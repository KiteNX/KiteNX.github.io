<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Butterfly的三个特殊menu</title>
    <url>/hyq/4612a9d4.html</url>
    <content><![CDATA[<blockquote>
<p>三个 Page Front-matter【必需】要配置 type 的 (标签、分类、友链)</p>
</blockquote>
<h3 id="tags标签页"><a href="#tags标签页" class="headerlink" title="tags标签页"></a>tags标签页</h3><p>创建</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>

<p>&#x2F;tags&#x2F;index.md 配置</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: tags</span><br><span class="line">date: 2024-10-13 17:30:47</span><br><span class="line">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>type 类型必须为 tags</p>
</blockquote>
<h3 id="categories分类页"><a href="#categories分类页" class="headerlink" title="categories分类页"></a>categories分类页</h3><p>创建</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>

<p>&#x2F;categories&#x2F;index.md 配置</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: categories</span><br><span class="line">date: 2024-10-13 16:46:30</span><br><span class="line">type: &quot;categories&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>type 类型必须为 categories</p>
</blockquote>
<h3 id="link友链页"><a href="#link友链页" class="headerlink" title="link友链页"></a>link友链页</h3><p>创建</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="built_in">link</span></span><br></pre></td></tr></table></figure>

<p>&#x2F;link&#x2F;index.md 配置</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: link</span><br><span class="line">date: 2024-10-12 23:20:38</span><br><span class="line">type: &quot;link&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>type 类型必须为 link</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Butterfly</tag>
      </tags>
  </entry>
  <entry>
    <title>Butterfly主题使用及美化</title>
    <url>/hyq/20873175.html</url>
    <content><![CDATA[<p>hexo-theme-butterfly 是基于 <code>Molunerfinn</code> 的 <code>hexo-theme-melody</code> 的基础上进行开发的</p>
<h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><blockquote>
<p>直接通过npm来安装 </p>
<p>仅支持Hexo 5.0.0及以上版本</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i hexo-theme-butterfly</span><br></pre></td></tr></table></figure>

<h3 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">hexo-theme-butterfly</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果有代码的需求 可以去 <code>node_modules</code> 里面找到 hexo-theme-butterfly 然后复制到 themes 文件夹里面</p>
</blockquote>
<h3 id="运行博客"><a href="#运行博客" class="headerlink" title="运行博客"></a>运行博客</h3><p>启动服务并访问<a href="https://link.zhihu.com/?target=http://localhost:4000/">http://localhost:4000</a>查看效果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>



<blockquote>
<p>主题配置文件<code>themes/hexo-theme-butterfly/_config.yml</code></p>
<p>站点配置文件 <code>博客项目名/_config.yml</code></p>
</blockquote>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><blockquote>
<p>如果你没有 pug 以及 stylus 的渲染器，请下载安装:</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>



<h3 id="站点配置"><a href="#站点配置" class="headerlink" title="站点配置"></a>站点配置</h3><p>切换主题语言</p>
<p>修改<code>站点配置文件</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure>

<p>站点信息</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">君小南</span>  <span class="comment"># 标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;自由一生是我全部的野心&#x27;</span>  <span class="comment"># 副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;时光不期而至，你我在此相遇&#x27;</span> <span class="comment"># 个性签名</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">南浔</span>   <span class="comment"># 作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span>  <span class="comment"># 语言</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span>   <span class="comment"># 时区</span></span><br></pre></td></tr></table></figure>

<p>生成文章唯一链接</p>
<p>安装 hexo-abbrlink 插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>

<p>在根目录 [项目名] 的配置文件 _config.yml 找到 permalink：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="comment">#修改为</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">post/:abbrlink.html</span> <span class="comment"># post为自定义前缀</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">	   <span class="attr">alg:</span> <span class="string">crc32</span>   <span class="comment"># 算法</span></span><br><span class="line">	   <span class="attr">rep:</span> <span class="string">hex</span>     <span class="comment"># 进制</span></span><br></pre></td></tr></table></figure>



<h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>菜单导航栏 </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目录</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">归档:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">更多||fas</span> <span class="attr">fa-list:</span></span><br><span class="line">    <span class="attr">Music:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">    <span class="attr">Movie:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br></pre></td></tr></table></figure>

<p>字数统计</p>
<blockquote>
<p>安装统计插件</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-wordcount --save or yarn add hexo-wordcount</span><br></pre></td></tr></table></figure>

<blockquote>
<p>开启统计</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">wordcount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_wordcount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_wordcount:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>分享功能</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分享</span></span><br><span class="line"><span class="attr">share:</span></span><br><span class="line">  <span class="comment"># Choose: sharejs / addtoany</span></span><br><span class="line">  <span class="comment"># Leave it empty if you don&#x27;t need share</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">sharejs</span>  </span><br><span class="line"></span><br><span class="line">  <span class="comment"># Share.js</span></span><br><span class="line">  <span class="comment"># https://github.com/overtrue/share.js</span></span><br><span class="line">  <span class="attr">sharejs:</span></span><br><span class="line">    <span class="attr">sites:</span> <span class="string">facebook,twitter,wechat,weibo,qq</span>   <span class="comment">#想要显示的内容</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># AddToAny</span></span><br><span class="line">  <span class="comment"># https://www.addtoany.com/</span></span><br><span class="line">  <span class="attr">addtoany:</span></span><br><span class="line">    <span class="attr">item:</span> <span class="string">facebook,twitter,wechat,sina_weibo,facebook_messenger,email,copy_link</span></span><br></pre></td></tr></table></figure>

<p>鼠标点击特效</p>
<blockquote>
<p>enable 设置成 true 就可以</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 烟花特效</span></span><br><span class="line"><span class="attr">fireworks:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">9999</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 点击出现爱心</span></span><br><span class="line"><span class="attr">click_heart:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼠标点击效果文字</span></span><br><span class="line"><span class="attr">clickShowText:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">text:</span></span><br><span class="line">    <span class="comment"># - I</span></span><br><span class="line">    <span class="comment"># - LOVE</span></span><br><span class="line">    <span class="comment"># - YOU</span></span><br><span class="line">  <span class="attr">fontSize:</span> <span class="string">15px</span></span><br><span class="line">  <span class="attr">random:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>背景特效</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 静态彩带</span></span><br><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">150</span></span><br><span class="line">  <span class="attr">alpha:</span> <span class="number">0.6</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">click_to_change:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态彩带</span></span><br><span class="line"><span class="attr">canvas_fluttering_ribbon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span> <span class="comment"># false 手机端不显示 true 手机端显示</span></span><br></pre></td></tr></table></figure>

<p>添加看板娘</p>
<blockquote>
<p>安装插件</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过npm下载对应的模型</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install live2d-widget-model-tororo <span class="comment">#对应的模型</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置里面添加</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 看板娘</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#是否显示看板娘</span></span><br><span class="line">    <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">    <span class="attr">model:</span></span><br><span class="line">        <span class="attr">use:</span> <span class="string">live2d-widget-model-tororo</span> <span class="comment">#需要与前面安装的模型名称相同，直接更换名字即可</span></span><br><span class="line">    <span class="attr">display:</span></span><br><span class="line">        <span class="attr">position:</span> <span class="string">left</span> <span class="comment">#宽高以及位置自己看着调</span></span><br><span class="line">        <span class="attr">width:</span> <span class="number">200</span></span><br><span class="line">        <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">    <span class="attr">mobile:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span> <span class="comment">#是否在手机进行显示</span></span><br></pre></td></tr></table></figure>

<p>更多模型</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://blog.csdn.net/wang_123_zy/article/details/87181892</span><br></pre></td></tr></table></figure>

<p>页脚渐变</p>
<blockquote>
<p> 新建  source&#x2F;css&#x2F;footer.css</p>
</blockquote>
<p>footer.css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 页脚footer */</span></span><br><span class="line"><span class="comment">/* 渐变色滚动动画 */</span></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> Gradient &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">50%</span> &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@-moz-keyframes</span> Gradient &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">50%</span> &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> Gradient &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">50%</span> &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(-<span class="number">45deg</span>, <span class="number">#ee7752</span>, <span class="number">#ce3e75</span>, <span class="number">#23a6d5</span>, <span class="number">#23d5ab</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">400%</span> <span class="number">400%</span>;</span><br><span class="line">    -webkit-<span class="attribute">animation</span>: Gradient <span class="number">10s</span> ease infinite;</span><br><span class="line">    -moz-<span class="attribute">animation</span>: Gradient <span class="number">10s</span> ease infinite;</span><br><span class="line">    <span class="attribute">animation</span>: Gradient <span class="number">10s</span> ease infinite;</span><br><span class="line">    -o-user-<span class="selector-tag">select</span>: none;</span><br><span class="line">    -ms-user-<span class="selector-tag">select</span>: none;</span><br><span class="line">    -webkit-user-<span class="selector-tag">select</span>: none;</span><br><span class="line">    -moz-user-<span class="selector-tag">select</span>: none;</span><br><span class="line">    user-<span class="selector-tag">select</span>: none;</span><br><span class="line">    <span class="attribute">border-top-left-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-top-right-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/footer.css&quot;&gt;</span>  <span class="comment"># 渐变页脚</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;&lt;div class=&quot;aplayer no-destroy&quot; data-id=&quot;464916877&quot; data-server=&quot;netease&quot; data-type=&quot;song&quot; data-fixed=&quot;true&quot; data-autoplay=&quot;true&quot;&gt; &lt;/div&gt;&#x27;</span></span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Butterfly</tag>
      </tags>
  </entry>
  <entry>
    <title>Pinia</title>
    <url>/hyq/74dce755.html</url>
    <content><![CDATA[<blockquote>
<p>官方中文文档：<a href="https://gitee.com/link?target=https://pinia.vuejs.org/zh/index.html">https://pinia.vuejs.org/zh/index.html</a></p>
</blockquote>
<h3 id="Pinia-介绍"><a href="#Pinia-介绍" class="headerlink" title="Pinia 介绍"></a>Pinia 介绍</h3><p>Pinia 是 Vue 的专属的最新的 <code>状态管理库</code> ，是 Vuex 状态管理工具的替代品</p>
<p>在 Vuex 中有四个核心概念：</p>
<ul>
<li>State</li>
<li>Getters</li>
<li>Mutations</li>
<li>Actions：只支持异步（同步使用 Mutations ）</li>
</ul>
<p>在 pinia 中：（没有 Mutations了 ）</p>
<ul>
<li>State</li>
<li>Getters</li>
<li>Actions：同步异步都支持</li>
</ul>
<p>Vuex 当前最新版本是 4.x</p>
<ul>
<li>Vue 3 使用 Vuex 4</li>
<li>Vue 2 使用 Vuex 3</li>
</ul>
<p>Pinia 当前最新版本是 2.x</p>
<ul>
<li>既支持 Vue 2 也支持 Vue 3</li>
</ul>
<blockquote>
<p>Pinia 可以认为就是 Vuex 5</p>
</blockquote>
<p>Pinia API 与 Vuex ≤4 有很大不同，即：</p>
<ul>
<li><em>mutations</em> 不再存在</li>
<li>无需创建自定义复杂包装器来支持 TypeScript，所有内容都是类型化的，并且 API 的设计方式尽可能利用 TS 类型推断。</li>
<li>不再需要注入、导入函数、调用函数、享受自动完成功能！</li>
<li>无需动态添加 Store，默认情况下它们都是动态的</li>
<li>不再有 <em>modules</em> 的嵌套结构</li>
<li>没有 <strong>命名空间模块</strong></li>
</ul>
<h3 id="搭建项目"><a href="#搭建项目" class="headerlink" title="搭建项目"></a>搭建项目</h3><blockquote>
<p>Vite + Vue 3 + Ts</p>
</blockquote>
<ul>
<li>新建一个新的vite项目（按提示选择 vue、typscript）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn create vite</span><br><span class="line">or</span><br><span class="line">npm init vite@latest</span><br></pre></td></tr></table></figure>

<ul>
<li>安装依赖</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<ul>
<li>运行项目</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<ul>
<li>安装 pinia</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i pinia</span><br></pre></td></tr></table></figure>

<p>【示例】：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\GitHub\note\Pinia&gt;npm init vite@latest pinia_test</span><br><span class="line">Need to install the following packages:</span><br><span class="line">create-vite@6.0.1</span><br><span class="line">Ok to proceed? (y)</span><br><span class="line">√ Select a framework: » Vue</span><br><span class="line">√ Select a variant: » TypeScript</span><br><span class="line"></span><br><span class="line">Scaffolding project in E:\GitHub\note\Pinia\pinia_test...</span><br><span class="line"></span><br><span class="line">Done. Now run:</span><br><span class="line"></span><br><span class="line">  cd pinia_test</span><br><span class="line">  npm install</span><br><span class="line">  npm run dev</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">E:\GitHub\note\Pinia&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>pinia_test</code> 是项目名称</li>
<li>如果不指定项目名称，Vite 会要求你输入一个</li>
</ul>
<h3 id="Pinia-的使用"><a href="#Pinia-的使用" class="headerlink" title="Pinia 的使用"></a>Pinia 的使用</h3><ul>
<li><code>src/main.ts</code>中创建pinia实例并且挂在vue实例上</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="comment">//创建pinia实例</span></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="comment">//挂载pinia实例</span></span><br><span class="line">app.<span class="title function_">use</span>(pinia)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>src/store/index.ts</code> 主要是定义容器 (要新建 store&#x2F;index.ts)</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="comment">// 定义并导出容器</span></span><br><span class="line"><span class="comment">// 返回值是一个函数，调用该函数即可得到容器实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useMainStore = <span class="title function_">defineStore</span>(<span class="string">&quot;main&quot;</span>, &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 类似于组件的 data， 用来存储全局状态</span></span><br><span class="line"><span class="comment">   * 1.必须是函数：这样是为了在服务端渲染的时候避免交叉请求导致的数据状态污染（客户端其实无所谓）</span></span><br><span class="line"><span class="comment">   * 2.必须是箭头函数：为了更好的 ts 类型推导</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">    <span class="attr">arr</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 类似于组件的 computed，用来封装计算属性，有【缓存】功能</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">getters</span>: &#123;&#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 完全类比于 Vue2 组件中的 methods（可以直接用this)，用来【封装业务逻辑】，修改state</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">actions</span>: &#123;&#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>src/components/HelloWorld.vue</code> （在组件中使用 pinia ）</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;mainStore.count&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; useMainStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../store&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> mainStore = <span class="title function_">useMainStore</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>src/App.vue</code>删除不必要的内容，保留 HelloWorld 组件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> <span class="keyword">from</span> <span class="string">&#x27;./components/HelloWorld.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HelloWorld</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="解构访问-Pinia-数据"><a href="#解构访问-Pinia-数据" class="headerlink" title="解构访问 Pinia 数据"></a>解构访问 Pinia 数据</h3><blockquote>
<p>不能直接使用解构,这样会丢失响应式,因为 pinia 在底层将 state 用 reactive 做了处理</p>
<p>src&#x2F;components&#x2F;HelloWorld.vue</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  &#123;&#123; count &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  &#123;&#123; name &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeState&quot;</span>&gt;</span>一键修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; useMainStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../store&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span> </span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 获取容器中的state</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> mainStore = <span class="title function_">useMainStore</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 不能直接使用解构,这样会丢失响应式,拿到的数据是一次性的</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 其实 pinia 在底层将 state 用 reactive 做了处理</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// const &#123;count,name&#125; = mainStore</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 若想使用解构,则需要用 storeToRefs 将结构出的数据做 ref 响应式代理</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123;count,name&#125; = <span class="title function_">storeToRefs</span>(mainStore)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 修改容器中的state</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">changeState</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  mainStore.<span class="property">count</span>++</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="状态更新和-Actions"><a href="#状态更新和-Actions" class="headerlink" title="状态更新和 Actions"></a>状态更新和 Actions</h3><blockquote>
<p>状态更新 4 种 方式</p>
</blockquote>
<ul>
<li>src&#x2F;components&#x2F;HelloWorld.vue</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  &#123;&#123; count &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">  &#123;&#123; name &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">  &#123;&#123; arr &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeState&quot;</span>&gt;</span>一键修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; useMainStore &#125; <span class="keyword">from</span> <span class="string">&quot;../store&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 获取容器中的state</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> mainStore = <span class="title function_">useMainStore</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 不能直接使用解构,这样会丢失响应式,拿到的数据是一次性的</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 其实 pinia 在底层将 state 用 reactive 做了处理</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// const &#123;count,name&#125; = mainStore</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 若想使用解构,则需要用 storeToRefs 将结构出的数据做 ref 响应式代理</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123; count, name, arr &#125; = <span class="title function_">storeToRefs</span>(mainStore);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 修改容器中的state</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">changeState</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 方法一：最简单的方式</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// mainStore.count++;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// mainStore.name=&quot;张三&quot;;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 方法二：使用 Pinia 提供的 $patch 方法 （一个函数） 批量修改 【推荐】</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// mainStore.$patch((state)=&gt;&#123;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   state.count++;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   state.name=&quot;张三&quot;;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   state.arr.push(6);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 方法三：使用 Pinia 提供的 $patch 方法 （一个对象） 批量修改</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// mainStore.$patch(&#123;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   count: mainStore.count + 1,</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   name: &quot;张三&quot;,</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   arr: [...mainStore.arr, 6],</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 方法四：封装到 Store 的 actions 中，并对外暴露接口</span></span></span><br><span class="line"><span class="language-javascript">  mainStore.<span class="title function_">changeData</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 传递参数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// mainStore.changeData(10)</span></span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>src&#x2F;store&#x2F;index.ts</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="comment">// 定义并导出容器</span></span><br><span class="line"><span class="comment">// 返回值是一个函数，调用该函数即可得到容器实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useMainStore = <span class="title function_">defineStore</span>(<span class="string">&quot;main&quot;</span>, &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 类似于组件的 data， 用来存储全局状态</span></span><br><span class="line"><span class="comment">   * 1.必须是函数：这样是为了在服务端渲染的时候避免交叉请求导致的数据状态污染（客户端其实无所谓）</span></span><br><span class="line"><span class="comment">   * 2.必须是箭头函数：为了更好的 ts 类型推导</span></span><br><span class="line"><span class="comment">   * 返回值：一个函数，调用该函数即可得到容器实例</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">    <span class="attr">arr</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 类似于组件的 computed，用来封装计算属性，有【缓存】功能</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">getters</span>: &#123;&#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 完全类比于 Vue2 组件中的 methods（可以直接用this)，用来【封装业务逻辑】，修改state</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">// 注意：不能使用箭头函数定义 actions ，因为箭头函数绑定了外部 this</span></span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">changeData</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 单个修改---&gt;直接使用 this , 类似 vue2</span></span><br><span class="line">      <span class="comment">//   this.count++,</span></span><br><span class="line">      <span class="comment">//     this.name = &#x27;jerry&#x27;,</span></span><br><span class="line">      <span class="comment">//     this.arr.push(4)</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 批量修改---&gt;建议使用 patch 做优化 (两种模式)</span></span><br><span class="line">      <span class="comment">//   this.$patch(&#123;</span></span><br><span class="line">      <span class="comment">//         count: this.count + 1,</span></span><br><span class="line">      <span class="comment">//         name: &#x27;jerry&#x27;,</span></span><br><span class="line">      <span class="comment">//         arr: [...this.arr, 4]</span></span><br><span class="line">      <span class="comment">//     &#125;)</span></span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.$patch(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">        state.<span class="property">count</span>++, (state.<span class="property">name</span> = <span class="string">&quot;pro&quot;</span>), state.<span class="property">arr</span>.<span class="title function_">push</span>(<span class="number">4</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 传递参数 每次 +num</span></span><br><span class="line">    <span class="comment">// changeData(num: number) &#123;</span></span><br><span class="line">    <span class="comment">//   this.$patch((state) =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     (state.count += num), (state.name = &quot;pro&quot;), state.arr.push(4);</span></span><br><span class="line">    <span class="comment">//   &#125;);</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="Getters-的使用"><a href="#Getters-的使用" class="headerlink" title="Getters 的使用"></a>Getters 的使用</h3><blockquote>
<p>和计算属性类似，带有缓存功能</p>
</blockquote>
<ul>
<li>src&#x2F;components&#x2F;HelloWorld.vue</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  &#123;&#123; count &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">  &#123;&#123; name &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">  &#123;&#123; arr &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; count10 &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;count20&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeState&quot;</span>&gt;</span>一键修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; useMainStore &#125; <span class="keyword">from</span> <span class="string">&quot;../store&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 获取容器中的state</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> mainStore = <span class="title function_">useMainStore</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 不能直接使用解构,这样会丢失响应式,拿到的数据是一次性的</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 其实 pinia 在底层将 state 用 reactive 做了处理</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// const &#123;count,name&#125; = mainStore</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 若想使用解构,则需要用 storeToRefs 将结构出的数据做 ref 响应式代理</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123; count, name, arr,count10,count20 &#125; = <span class="title function_">storeToRefs</span>(mainStore);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 修改容器中的state</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">changeState</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 方法一：最简单的方式</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// mainStore.count++;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// mainStore.name=&quot;张三&quot;;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 方法二：使用 Pinia 提供的 $patch 方法 （一个函数） 批量修改 【推荐】</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// mainStore.$patch((state)=&gt;&#123;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   state.count++;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   state.name=&quot;张三&quot;;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   state.arr.push(6);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 方法三：使用 Pinia 提供的 $patch 方法 （一个对象） 批量修改</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// mainStore.$patch(&#123;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   count: mainStore.count + 1,</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   name: &quot;张三&quot;,</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   arr: [...mainStore.arr, 6],</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 方法四：封装到 Store 的 actions 中，并对外暴露接口</span></span></span><br><span class="line"><span class="language-javascript">  mainStore.<span class="title function_">changeData</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 传递参数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// mainStore.changeData(10)</span></span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>src&#x2F;store&#x2F;index.ts</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="comment">// 定义并导出容器</span></span><br><span class="line"><span class="comment">// 返回值是一个函数，调用该函数即可得到容器实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useMainStore = <span class="title function_">defineStore</span>(<span class="string">&quot;main&quot;</span>, &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 类似于组件的 data， 用来存储全局状态</span></span><br><span class="line"><span class="comment">   * 1.必须是函数：这样是为了在服务端渲染的时候避免交叉请求导致的数据状态污染（客户端其实无所谓）</span></span><br><span class="line"><span class="comment">   * 2.必须是箭头函数：为了更好的 ts 类型推导</span></span><br><span class="line"><span class="comment">   * 返回值：一个函数，调用该函数即可得到容器实例</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">    <span class="attr">arr</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 类似于组件的 computed，用来封装计算属性，有【缓存】功能</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="comment">// 带 state 参数：对返回值类型做自动推导 【推荐】</span></span><br><span class="line">    <span class="title function_">count10</span>(<span class="params">state</span>)&#123;</span><br><span class="line">     <span class="keyword">return</span> state.<span class="property">count</span> + <span class="number">10</span>   </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 不带 state 参数：直接使用 this，此时就不能对返回值类型做自动推导了，必须手动指定</span></span><br><span class="line">    <span class="title function_">count20</span>():<span class="built_in">number</span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span> + <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 完全类比于 Vue2 组件中的 methods（可以直接用this)，用来【封装业务逻辑】，修改state</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">// 注意：不能使用箭头函数定义 actions ，因为箭头函数绑定了外部 this</span></span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">changeData</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 单个修改---&gt;直接使用 this , 类似 vue2</span></span><br><span class="line">      <span class="comment">//   this.count++,</span></span><br><span class="line">      <span class="comment">//     this.name = &#x27;jerry&#x27;,</span></span><br><span class="line">      <span class="comment">//     this.arr.push(4)</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 批量修改---&gt;建议使用 patch 做优化 (两种模式)</span></span><br><span class="line">      <span class="comment">//   this.$patch(&#123;</span></span><br><span class="line">      <span class="comment">//         count: this.count + 1,</span></span><br><span class="line">      <span class="comment">//         name: &#x27;jerry&#x27;,</span></span><br><span class="line">      <span class="comment">//         arr: [...this.arr, 4]</span></span><br><span class="line">      <span class="comment">//     &#125;)</span></span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.$patch(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">        state.<span class="property">count</span>++, (state.<span class="property">name</span> = <span class="string">&quot;pro&quot;</span>), state.<span class="property">arr</span>.<span class="title function_">push</span>(<span class="number">4</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 传递参数 每次 +num</span></span><br><span class="line">    <span class="comment">// changeData(num: number) &#123;</span></span><br><span class="line">    <span class="comment">//   this.$patch((state) =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     (state.count += num), (state.name = &quot;pro&quot;), state.arr.push(4);</span></span><br><span class="line">    <span class="comment">//   &#125;);</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="Pinia-和-VueDevtools"><a href="#Pinia-和-VueDevtools" class="headerlink" title="Pinia 和 VueDevtools"></a>Pinia 和 VueDevtools</h3><p>查看 pinia 和 组件(Components)</p>
<img src="/img/257.png" />

<p>pinia 容器内部</p>
<img src="/img/743.png" />
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>React</title>
    <url>/hyq/d8a440d1.html</url>
    <content><![CDATA[<h3 id="React-入门"><a href="#React-入门" class="headerlink" title="React 入门"></a>React 入门</h3><blockquote>
<p>React 是什么</p>
</blockquote>
<p>将数据渲染为 HTML 视图的开源 JavaScript 库</p>
<blockquote>
<p>谁开发的</p>
</blockquote>
<p>由 Facebook 开发，且开源</p>
<blockquote>
<p>React 的特点</p>
</blockquote>
<p>采用组件化模式，声明式编码，提高开发效率及组件复用率</p>
<p>在React Native中可以使用 React 语法进行移动端开发</p>
<p>使用虚拟DOM+优秀的Diffing算法，尽量减少与真实DOM的交互</p>
<h3 id="React基本使用"><a href="#React基本使用" class="headerlink" title="React基本使用"></a>React基本使用</h3><h4 id="相关js库"><a href="#相关js库" class="headerlink" title="相关js库"></a>相关js库</h4><blockquote>
<p>将 babel.js、react-dom.development.js 和 react.development.js 文件下载到本地</p>
</blockquote>
<ul>
<li>下载 babel.min.js</li>
</ul>
<p>打开浏览器，访问 <a href="https://gitee.com/link?target=https://unpkg.com/babel-standalone@6/babel.min.js">https:&#x2F;&#x2F;unpkg.com&#x2F;babel-standalone@6&#x2F;babel.min.js</a></p>
<p>右键点击页面中的代码，选择“另存为”</p>
<p>选择一个保存位置（例如，你的项目目录下的 libs 文件夹），命名文件为 babel.min.js，然后点击“保存”。</p>
<ul>
<li>下载 react.development.js</li>
</ul>
<p>打开浏览器，访问 <a href="https://gitee.com/link?target=https://unpkg.com/react@18.3.1/umd/react.development.js">https:&#x2F;&#x2F;unpkg.com&#x2F;react@18.3.1/umd/react.development.js</a></p>
<p>右键点击页面中的代码，选择“另存为”</p>
<p>选择同一个保存位置，命名文件为 react.development.js，然后点击“保存”。</p>
<ul>
<li>下载 react-dom.development.js</li>
</ul>
<p>打开浏览器，访问 <a href="https://gitee.com/link?target=https://unpkg.com/react-dom@18.3.1/umd/react-dom.development.js">https:&#x2F;&#x2F;unpkg.com&#x2F;react-dom@18.3.1/umd/react-dom.development.js</a></p>
<p>右键点击页面中的代码，选择“另存为”</p>
<p>选择同一个保存位置，命名文件为 react-dom.development.js，然后点击“保存”</p>
<h4 id="创建虚拟DOM"><a href="#创建虚拟DOM" class="headerlink" title="创建虚拟DOM"></a>创建虚拟DOM</h4><blockquote>
<p>hello_react 案例</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello_react<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react 核心库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react-dom 支持 react 操作 DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 babel 用于将 jsx 转换成 js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 此处一定要写 babel --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.创建虚拟DOM</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> <span class="variable constant_">VDOM</span> = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello,react<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.渲染虚拟DOM到页面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// ReactDOM.render(虚拟DOM,容器)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>目录结构</p>
</blockquote>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">react-base/</span><br><span class="line">├── 01_hello_react</span><br><span class="line">	├── hello_react.html</span><br><span class="line">└── js/</span><br><span class="line">    ├── babel.min.js</span><br><span class="line">    ├── react.development.js</span><br><span class="line">    └── react-dom.development.js</span><br></pre></td></tr></table></figure>

<h4 id="虚拟DOM和真实DOM"><a href="#虚拟DOM和真实DOM" class="headerlink" title="虚拟DOM和真实DOM"></a>虚拟DOM和真实DOM</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello_react<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;dome&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react 核心库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react-dom 支持 react 操作 DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 babel 用于将 jsx 转换成 js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 此处一定要写 babel --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.创建虚拟DOM</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> <span class="variable constant_">VDOM</span> = (</span></span><br><span class="line"><span class="language-javascript">            <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&#x27;title&#x27;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>hello,react<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">        )</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> <span class="variable constant_">TDOM</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;dome&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.渲染虚拟DOM到页面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// ReactDOM.render(虚拟DOM,容器)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;虚拟DOM&quot;</span>, <span class="variable constant_">VDOM</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;真实DOM&#x27;</span>, <span class="variable constant_">TDOM</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// debugger;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//  关于虚拟DOM:</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.本质是object类型的对象(一般对象)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.虚拟DOM比较“轻”，真实DOM比较“重”，因为虚拟DOM是React内部在用，无需真实DOM上那么多的属性。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.虚拟DOM最终会被React转化为真实DOM，呈现在页面上。</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="React-JSX"><a href="#React-JSX" class="headerlink" title="React JSX"></a>React JSX</h3><h4 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h4><p>全称: JavaScript XML</p>
<p>react 定义的一种类似于 XML 的 JS 扩展语法: JS+XML</p>
<p>本质是 React.createElement(component,props,…children)方法的语法糖</p>
<p>作用:用来简化创建虚拟 DOM</p>
<ul>
<li>写法:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var ele = &lt;h1&gt;Hello JSX!&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意 :<ul>
<li>它不是字符串,也不是 HTML&#x2F;XML标签</li>
<li>它最终产生的就是一个JS对象e标签名任意:HIML标签或其它标签e发送</li>
</ul>
</li>
</ul>
<p>标签名任意：HTML 标签和其他标签</p>
<h4 id="JSX语法规则"><a href="#JSX语法规则" class="headerlink" title="JSX语法规则"></a>JSX语法规则</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jsx语法规则<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.title</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: aqua;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;dome&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react 核心库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react-dom 支持 react 操作 DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 babel 用于将 jsx 转换成 js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 此处一定要写 babel --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> myId = <span class="string">&quot;tiTle&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> myData = <span class="string">&quot;HEllo,rEaCT&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.创建虚拟DOM</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> <span class="variable constant_">VDOM</span> = (</span></span><br><span class="line"><span class="language-javascript">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">className</span>=<span class="string">&quot;title&quot;</span> <span class="attr">id</span>=<span class="string">&#123;myId.toLocaleLowerCase()&#125;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">fontSize:</span> &#x27;<span class="attr">30px</span>&#x27;,<span class="attr">color:</span> &#x27;<span class="attr">red</span>&#x27; &#125;&#125;&gt;</span>&#123;myData.toLocaleLowerCase()&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                <span class="tag">&lt;<span class="name">good</span>&gt;</span>212121<span class="tag">&lt;/<span class="name">good</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                <span class="tag">&lt;<span class="name">Good</span>&gt;</span><span class="tag">&lt;/<span class="name">Good</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">        )</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> <span class="variable constant_">TDOM</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;dome&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.渲染虚拟DOM到页面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        jsx语法规则:</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            1.定义虚拟DOM时，不要写引号，</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            2.标签中混入Js表达式时要用&#123;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            3.样式的类名指定不要用class，要用className。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            4.内联样式，要用style=&#123;&#123;key:value&#125;&#125;的形式去写。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            5.只有一个根标签</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            6.标签必须闭合</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            7.标签首字母</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                (1).若小写字母开头，则将改标签转为html中同名元素，若html中无该标签对应的同名元素，则报错。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                (2).若大写字母开头，react就去渲染对应的组件，若组件没有定义，则报错 Good is not defined</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="jsx小练习"><a href="#jsx小练习" class="headerlink" title="jsx小练习"></a>jsx小练习</h4><p>没有交互（数据全是死的）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jsx小练习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> <span class="variable constant_">VDOM</span> = (</span></span><br><span class="line"><span class="language-javascript">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>前端框架<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>angular<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>react<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>vue<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">        )</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>模拟交互 自己给数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jsx小练习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         注意区分:【js语句(代码)】与【js表达式】</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         1.表达式: 一个表达式会产生一个值，可以放在任何一个需要值的地方</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            下面这些都是表达式: </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            (1).a</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            (2).a + b</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            (3).demo(1)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            (4).arr.map()</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            (5).function test()&#123; &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         2.语句(代码): </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            下面这些都是语句(代码): </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            (1).if()&#123; &#125; </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            (2).for()&#123; &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            (3).switch()&#123;case: xxxx &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 模拟前后端数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// react会帮你遍历数组[] 但是不会遍历对象 &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> data = [<span class="string">&#x27;angular&#x27;</span>, <span class="string">&#x27;react&#x27;</span>, <span class="string">&#x27;vue&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> <span class="variable constant_">VDOM</span> = (</span></span><br><span class="line"><span class="language-javascript">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>前端框架<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        data.map((item,index) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                            return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">        )</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="模块与组件、模块化与组件化的理解"><a href="#模块与组件、模块化与组件化的理解" class="headerlink" title="模块与组件、模块化与组件化的理解"></a>模块与组件、模块化与组件化的理解</h3><h4 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h4><p>理解: 向外提供特定功能的js程序,一般就是一个js 文件</p>
<p>为什么要拆成模块:随着业务逻辑增加，代码越来越多且复杂。</p>
<p>作用: 复用js,简化js 的编写,提高js 运行效率</p>
<h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><p>理解:用来实现局部功能效果的代码和资源的集合(html&#x2F;css&#x2F;js&#x2F;image 等等)</p>
<p>为什么:一个界面的功能更复杂</p>
<p>作用: 复用编码,简化项目编码,提高运行效率</p>
<h4 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h4><p>当应用的 js 都以模块来编写的,这个应用就是一个模块化的应用</p>
<h4 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h4><p>当应用是以多组件的方式实现,这个应用就是一个组件化的应用</p>
<h3 id="React面向组件编程"><a href="#React面向组件编程" class="headerlink" title="React面向组件编程"></a>React面向组件编程</h3><h4 id="基本理解和使用"><a href="#基本理解和使用" class="headerlink" title="基本理解和使用"></a>基本理解和使用</h4><ul>
<li>react 开发者工具<ul>
<li>React Developer Tools（基于谷歌安装）</li>
</ul>
</li>
<li>直接渲染报错（函数式组件）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 创建函数式组件</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>函数定义的组件（适用于【简单组件】的定义）<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 渲染组件到页面</span></span><br><span class="line">    <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(demo, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>报错信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Functions are not valid as a React child. This may happen if you return a Component instead of &lt;Component /&gt; from render. Or maybe you meant to call this function rather than return it.</span><br></pre></td></tr></table></figure>

<p>要以 <code>标签</code> 的形式渲染</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ReactDOM.render(&lt;demo /&gt;, document.getElementById(&#x27;test&#x27;))</span><br></pre></td></tr></table></figure>

<p>还是会报错，报错信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The tag &lt;demo&gt; is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.</span><br></pre></td></tr></table></figure>

<p>最终解决（标签【首字母】要大写）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">        <span class="comment">// 创建函数式组件</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>函数定义的组件（适用于【简单组件】的定义）<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 渲染组件到页面</span></span><br><span class="line">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>类的基础</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">// 创建一个 person 类</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">person</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 构造 person 类的实例对象（new person())</span></span><br><span class="line">        <span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title function_">person</span>()</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p1)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>运行 打开控制台查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">person &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>添加构造器方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">// 创建一个 person 类</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">person</span> &#123;</span><br><span class="line">            <span class="comment">// 构造器方法</span></span><br><span class="line">            <span class="title function_">constructor</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 构造 person 类的实例对象（new person())</span></span><br><span class="line">        <span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title function_">person</span>(<span class="string">&#x27;tom&#x27;</span>,<span class="number">17</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p1)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>运行 打开控制台查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">person &#123;name: &#x27;tom&#x27;, age: 17&#125;</span><br></pre></td></tr></table></figure>

<p>添加类方法(完整代码)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>类的基础知识<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建一个 person 类</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">person</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 构造器方法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 构造器中的this是谁?---类的实例对象</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">name</span> = name</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">age</span> = age</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 方法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//speak方法放在了哪里?-类的原型对象上，供实例使用</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//通过Person实例调用speak时，speak中的this就是Person实例</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>，我年龄是<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 构造 person 类的实例对象（new person())</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title function_">person</span>(<span class="string">&#x27;tom&#x27;</span>, <span class="number">17</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p1)</span></span><br><span class="line"><span class="language-javascript">        p1.<span class="title function_">speak</span>()</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>继承</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>类的基础知识<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            总结:</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                1.类中的构造器不是必须写的，要对实例进行一些初始化的操作，如添加指定属性时才写。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                2.如果A类继承了B类，且A类中写了构造器，那么A类构造器中的super是必须要调用的。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                3.类中所定义的方法，都是放在了类的原型对象上，供实例去使用</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript">       </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建一个 person 类</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">person</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 构造器方法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 构造器中的this是谁?---类的实例对象</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">name</span> = name</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">age</span> = age</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 方法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//speak方法放在了哪里?-类的原型对象上，供实例使用</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//通过Person实例调用speak时，speak中的this就是Person实例</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>，我年龄是<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建一个 student 类，继承 person 类</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">person</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 构造器方法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">constructor</span>(<span class="params">name, age, grade</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">super</span>(name, age)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">grade</span> = grade</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 方法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//重写从父类继承过来的方法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//speak方法放在了哪里?-类的原型对象上，供实例使用</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//通过Person实例调用speak时，speak中的this就是Person实例</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>，我年龄是<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>，我读<span class="subst">$&#123;<span class="variable language_">this</span>.grade&#125;</span>年级`</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 自己独有的方法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">study</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//study方法放在了哪里?-类的原型对象上，供实例使用</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//通过student实例调用study时，study中的this就是student实例</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是学生 需要学习&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 构造 person 类的实例对象（new person())</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title function_">person</span>(<span class="string">&#x27;tom&#x27;</span>, <span class="number">17</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="title function_">student</span>(<span class="string">&#x27;root&#x27;</span>, <span class="number">14</span>, <span class="string">&#x27;高一&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p1)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(s1)</span></span><br><span class="line"><span class="language-javascript">        p1.<span class="title function_">speak</span>()</span></span><br><span class="line"><span class="language-javascript">        s1.<span class="title function_">speak</span>()</span></span><br><span class="line"><span class="language-javascript">        s1.<span class="title function_">study</span>()</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>类式组件完整代码</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>类式组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react 核心库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react-dom 支持 react 操作 DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 babel 用于将 jsx 转换成 js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 定义类组件 必须要基础 React.Component</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 必须要有 render 方法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 必须要有返回值</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            正常模板 三者缺一不可</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            class Xxxx extends React.Component&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                render() &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    return xxxxx</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            */</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//render是放在哪里的?- Demo 的原型对象上，供实例使用。</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// render中的this是谁?--- Demo 实例对象，也就是Demo组件实例对象</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>类定义的组件（适用于【复杂组件】的定义）<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            执行了ReactDoM.render(&lt;Demo/&gt;.......之后，发生了什么?</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                1.React解析组件标签，找到了Demo组件。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                2.发现组件是使用类定义的，随后new出来该类的实例，并通过该实例调用到原型上的render方法。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                3.将render返回的虚拟DOM转为真实DOM，随后呈现在页面中。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="组件实例的三大核心属性之state"><a href="#组件实例的三大核心属性之state" class="headerlink" title="组件实例的三大核心属性之state"></a>组件实例的三大核心属性之state</h4><p>state的基本使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">        <span class="comment">// 定义类组件 必须要基础 React.Component</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">            <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">                <span class="variable language_">super</span>(props)</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">isHot</span>: <span class="literal">false</span> &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>今天天气很&#123;this.state.isHot ? &#x27;凉爽&#x27; : &#x27;炎热&#x27;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 渲染组件到页面</span></span><br><span class="line">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Weather</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">        </span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>react中点击事件的使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 定义类组件 必须要基础 React.Component</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">            <span class="variable language_">super</span>(props)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">isHot</span>: <span class="literal">false</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">            <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">onClick</span>=<span class="string">&#123;demo&#125;</span>&gt;</span>今天天气很&#123;isHot ? &#x27;凉爽&#x27; : &#x27;炎热&#x27;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 渲染组件到页面</span></span><br><span class="line">    <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Weather</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;标题被点击了&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>类中方法的this</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">        <span class="comment">// 定义类组件 必须要基础 React.Component</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">            <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">                <span class="variable language_">super</span>(props)</span><br><span class="line">                <span class="comment">// 初始化状态</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">isHot</span>: <span class="literal">true</span> &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">                <span class="comment">// 读取状态</span></span><br><span class="line">                <span class="keyword">const</span> &#123; isHot &#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">                <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">onClick</span>=<span class="string">&#123;this.demo&#125;</span>&gt;</span>今天天气很&#123;isHot ? &#x27;凉爽&#x27; : &#x27;炎热&#x27;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">//demo放在哪里?-- Weather的原型对象上，供实例使用</span></span><br><span class="line">                <span class="comment">//由于demo是作为onclick的回调，所以不是通过实例调用的，是直接调用</span></span><br><span class="line">                <span class="comment">//类中的方法默认开启了局部的严格模式，所以demo中的this为undefined</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 渲染组件到页面</span></span><br><span class="line">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Weather</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>解决类中this指向问题</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>组件实例的三大核心属性之state<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react 核心库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react-dom 支持 react 操作 DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 babel 用于将 jsx 转换成 js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 定义类组件 必须要基础 React.Component</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">super</span>(props)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 初始化状态</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">isHot</span>: <span class="literal">true</span> &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 解决this指向问题</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.demo.bind(this)的demo指的是下面的demo()方法</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.demo中的demo指的是onClick=&#123;this.demo&#125;这个demo</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">demo</span> = <span class="variable language_">this</span>.<span class="property">demo</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 读取状态</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> &#123; isHot &#125; = <span class="variable language_">this</span>.<span class="property">state</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">onClick</span>=<span class="string">&#123;this.demo&#125;</span>&gt;</span>今天天气很&#123;isHot ? &#x27;凉爽&#x27; : &#x27;炎热&#x27;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">demo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//demo放在哪里?-- Weather的原型对象上，供实例使用</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//由于demo是作为onclick的回调，所以不是通过实例调用的，是直接调用</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//类中的方法默认开启了局部的严格模式，所以demo中的this为undefined</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Weather</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>setState的使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>组件实例的三大核心属性之state<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react 核心库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react-dom 支持 react 操作 DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 babel 用于将 jsx 转换成 js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 定义类组件 必须要基础 React.Component</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//构造器调用几次?--1次</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">super</span>(props)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 初始化状态</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">isHot</span>: <span class="literal">true</span>, <span class="attr">wind</span>: <span class="string">&#x27;微风&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 解决this指向问题</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.demo.bind(this)的demo指的是下面的demo()方法</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.demo中的demo指的是onClick=&#123;this.demo&#125;这个demo</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">demo</span> = <span class="variable language_">this</span>.<span class="property">demo</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//render调用几次?  1+n次1是初始化的那次 n是状态更新的次数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 读取状态</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> &#123; isHot, wind &#125; = <span class="variable language_">this</span>.<span class="property">state</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">onClick</span>=<span class="string">&#123;this.demo&#125;</span>&gt;</span>今天天气很&#123;isHot ? &#x27;凉爽&#x27; : &#x27;炎热&#x27;&#125;,&#123;wind&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//demo调用几次?  点几次调几次</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">demo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//demo放在哪里?-- Weather的原型对象上，供实例使用</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//由于demo是作为onclick的回调，所以不是通过实例调用的，是直接调用</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//类中的方法默认开启了局部的严格模式，所以demo中的this为undefined</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//获取原来的isHot值</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> isHot = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isHot</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//严重注意:状态必须通过setState进行更新,且更新是一种合并，不是替换。</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">isHot</span>: !isHot &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Weather</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>state的简写</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>组件实例的三大核心属性之state<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react 核心库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react-dom 支持 react 操作 DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 babel 用于将 jsx 转换成 js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 定义类组件 必须要基础 React.Component</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 初始化状态</span></span></span><br><span class="line"><span class="language-javascript">            state = &#123; <span class="attr">isHot</span>: <span class="literal">true</span>, <span class="attr">wind</span>: <span class="string">&#x27;微风&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 读取状态</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> &#123; isHot, wind &#125; = <span class="variable language_">this</span>.<span class="property">state</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">onClick</span>=<span class="string">&#123;this.demo&#125;</span>&gt;</span>今天天气很&#123;isHot ? &#x27;凉爽&#x27; : &#x27;炎热&#x27;&#125;,&#123;wind&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//自定义方法--要用赋值语句的形式+箭头函数</span></span></span><br><span class="line"><span class="language-javascript">            demo = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//获取原来的isHot值</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> isHot = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isHot</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//严重注意:状态必须通过setState进行更新,且更新是一种合并，不是替换。</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">isHot</span>: !isHot &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Weather</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>组件中 render 方法中的 this 为组件实例对象</li>
<li>组件自定义的方法中this为undefined，如何解决?<ul>
<li>强制绑定 this:通过函数对象的 bind()</li>
<li>箭头函数</li>
</ul>
</li>
<li>状态数据，不能直接修改或更新</li>
</ul>
<h4 id="组件实例的三大核心属性之props"><a href="#组件实例的三大核心属性之props" class="headerlink" title="组件实例的三大核心属性之props"></a>组件实例的三大核心属性之props</h4><p>props基本使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>组件实例的三大核心属性之props<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react 核心库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react-dom 支持 react 操作 DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 babel 用于将 jsx 转换成 js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 定义类组件 必须要基础 React.Component</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> &#123; name, age, sex &#125; = <span class="variable language_">this</span>.<span class="property">props</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">                    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>性别：&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄：&#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">                )</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&#x27;tom&#x27;</span> <span class="attr">age</span>=<span class="string">&#x27;13&#x27;</span> <span class="attr">sex</span>=<span class="string">&#x27;男&#x27;</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&#x27;root&#x27;</span> <span class="attr">age</span>=<span class="string">&#x27;23&#x27;</span> <span class="attr">sex</span>=<span class="string">&#x27;女&#x27;</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test1&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&#x27;nanxun&#x27;</span> <span class="attr">age</span>=<span class="string">&#x27;18&#x27;</span> <span class="attr">sex</span>=<span class="string">&#x27;男&#x27;</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test2&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>批量传递props(批量传递标签属性)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>组件实例的三大核心属性之props<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react 核心库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react-dom 支持 react 操作 DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 babel 用于将 jsx 转换成 js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 定义类组件 必须要基础 React.Component</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> &#123; name, age, sex,time &#125; = <span class="variable language_">this</span>.<span class="property">props</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">                    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>性别：&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄：&#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名：&#123;time&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">                )</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&#x27;tom&#x27;</span> <span class="attr">age</span>=<span class="string">&#x27;13&#x27;</span> <span class="attr">sex</span>=<span class="string">&#x27;男&#x27;</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> p = &#123; <span class="attr">name</span>: <span class="string">&#x27;root&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;23&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span> ,<span class="attr">time</span>:<span class="string">&#x27;2021-01-23&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// ReactDOM.render(&lt;Person name=&#123;p.name&#125; age=&#123;p.age&#125; sex=&#123;p.sex&#125; /&gt;, document.getElementById(&#x27;test2&#x27;))</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> &#123;<span class="attr">...p</span>&#125; /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test2&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对props进行限制</p>
<p>第一种方式(Reactv15.5开始已弃用):</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="title class_">React</span>.<span class="property">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>, <span class="comment">//限制name必传，且为字符串</span></span><br><span class="line">    <span class="attr">sex</span>: <span class="title class_">React</span>.<span class="property">PropTypes</span>.<span class="property">string</span>,<span class="comment">//限制sex为字符串</span></span><br><span class="line">    <span class="attr">age</span>: <span class="title class_">React</span>.<span class="property">PropTypes</span>.<span class="property">number</span>,<span class="comment">//限制age为数值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二种方式(新):</p>
<p>使用 prop-types库进限制(需要引入prop-types 库)</p>
<p>引入prop-types 用于对组件标签属性进行限制</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>, <span class="comment">//限制name必传，且为字符串</span></span><br><span class="line">    <span class="attr">sex</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,<span class="comment">//限制sex为字符串</span></span><br><span class="line">    <span class="attr">age</span>: <span class="title class_">PropTypes</span>.<span class="property">number</span>,<span class="comment">//限制age为数值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【完整代码】</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>组件实例的三大核心属性之props<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react 核心库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react-dom 支持 react 操作 DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 babel 用于将 jsx 转换成 js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入prop-types 用于对组件标签属性进行限制 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/prop-types.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 定义类组件 必须要基础 React.Component</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> &#123; name, age, sex, time &#125; = <span class="variable language_">this</span>.<span class="property">props</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">                    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>性别：&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄：&#123;age + 1&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>时间：&#123;time&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">                )</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//对标签属性进行类型、必要性的限制</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Person</span>.<span class="property">propTypes</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>, <span class="comment">//限制name必传，且为字符串</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">sex</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,<span class="comment">//限制sex为字符串</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">age</span>: <span class="title class_">PropTypes</span>.<span class="property">number</span>,<span class="comment">//限制age为数值</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">speck</span>: <span class="title class_">PropTypes</span>.<span class="property">func</span> <span class="comment">//限制speak为函数</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//指定默认标签属性值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Person</span>.<span class="property">defaultProps</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">sex</span>: <span class="string">&#x27;不男不女&#x27;</span>, <span class="comment">//sex默认值</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">age</span>: <span class="number">17</span>  <span class="comment">//age默认值</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">speak</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;说话&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&#x27;tom&#x27;</span> <span class="attr">age</span>=<span class="string">&#123;16&#125;</span> <span class="attr">sex</span>=<span class="string">&#x27;男&#x27;</span> <span class="attr">speak</span>=<span class="string">&#123;speak&#125;</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> p = &#123; <span class="attr">name</span>: <span class="string">&#x27;root&#x27;</span>, <span class="attr">age</span>: <span class="number">3</span>, <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;2021-01-23&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// ReactDOM.render(&lt;Person name=&#123;p.name&#125; age=&#123;p.age&#125; sex=&#123;p.sex&#125; /&gt;, document.getElementById(&#x27;test2&#x27;))</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> &#123;<span class="attr">...p</span>&#125; /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test2&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>props限制简写</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>组件实例的三大核心属性之props<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react 核心库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react-dom 支持 react 操作 DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 babel 用于将 jsx 转换成 js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入prop-types 用于对组件标签属性进行限制 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/prop-types.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 定义类组件 必须要基础 React.Component</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//对标签属性进行类型、必要性的限制</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">static</span> propTypes = &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>, <span class="comment">//限制name必传，且为字符串</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">sex</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,<span class="comment">//限制sex为字符串</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>: <span class="title class_">PropTypes</span>.<span class="property">number</span>,<span class="comment">//限制age为数值</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">speck</span>: <span class="title class_">PropTypes</span>.<span class="property">func</span> <span class="comment">//限制speak为函数</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//指定默认标签属性值</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">static</span> defaultProps = &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">sex</span>: <span class="string">&#x27;不男不女&#x27;</span>, <span class="comment">//sex默认值</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>: <span class="number">17</span>  <span class="comment">//age默认值</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> &#123; name, age, sex, time &#125; = <span class="variable language_">this</span>.<span class="property">props</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">                    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>性别：&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄：&#123;age + 1&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>时间：&#123;time&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">                )</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;说话&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&#x27;tom&#x27;</span> <span class="attr">age</span>=<span class="string">&#123;16&#125;</span> <span class="attr">sex</span>=<span class="string">&#x27;男&#x27;</span> <span class="attr">speak</span>=<span class="string">&#123;speak&#125;</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> p = &#123; <span class="attr">name</span>: <span class="string">&#x27;root&#x27;</span>, <span class="attr">age</span>: <span class="number">3</span>, <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;2021-01-23&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// ReactDOM.render(&lt;Person name=&#123;p.name&#125; age=&#123;p.age&#125; sex=&#123;p.sex&#125; /&gt;, document.getElementById(&#x27;test2&#x27;))</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> &#123;<span class="attr">...p</span>&#125; /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test2&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>函数组件使用props</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>函数组件使用props<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react 核心库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react-dom 支持 react 操作 DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 babel 用于将 jsx 转换成 js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入prop-types 用于对组件标签属性进行限制 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/prop-types.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">props</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(props)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> &#123; name, age, sex &#125; = props</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">                <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>性别：&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄：&#123;age + 1&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">            )</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//对标签属性进行类型、必要性的限制</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Person</span>.<span class="property">propTypes</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>, <span class="comment">//限制name必传，且为字符串</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">sex</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,<span class="comment">//限制sex为字符串</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">age</span>: <span class="title class_">PropTypes</span>.<span class="property">number</span>,<span class="comment">//限制age为数值</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">speck</span>: <span class="title class_">PropTypes</span>.<span class="property">func</span> <span class="comment">//限制speak为函数</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//指定默认标签属性值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Person</span>.<span class="property">defaultProps</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">sex</span>: <span class="string">&#x27;不男不女&#x27;</span>, <span class="comment">//sex默认值</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">age</span>: <span class="number">17</span>  <span class="comment">//age默认值</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&#x27;tom&#x27;</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="组件实例的三大核心属性之refs"><a href="#组件实例的三大核心属性之refs" class="headerlink" title="组件实例的三大核心属性之refs"></a>组件实例的三大核心属性之refs</h4><p>字符串形式的 ref</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>字符串形式的 ref<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react 核心库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react-dom 支持 react 操作 DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 babel 用于将 jsx 转换成 js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 定义类组件 必须要基础 React.Component</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            showData = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 原生的写法</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// const input = document.getElementById(&#x27;input&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// alert(input.value)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// react写法</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> &#123; input1 &#125; = <span class="variable language_">this</span>.<span class="property">refs</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(input1.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            showData2 = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> &#123; input2 &#125; = <span class="variable language_">this</span>.<span class="property">refs</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(input2.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">                    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;input1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;点击按钮提示信息&quot;</span> /&gt;</span><span class="symbol">&amp;nbsp;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showData&#125;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;input2&quot;</span> <span class="attr">onBlur</span>=<span class="string">&#123;this.showData2&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;失去焦点提示信息&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">                )</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>回调形式的 ref</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>回调形式的 ref<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react 核心库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react-dom 支持 react 操作 DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 babel 用于将 jsx 转换成 js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 定义类组件 必须要基础 React.Component</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            showData = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> &#123; input1 &#125; = <span class="variable language_">this</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(input1.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            showData2 = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> &#123; input2 &#125; = <span class="variable language_">this</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(input2.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">                    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;(currentNode)</span> =&gt;</span> &#123; this.input1 = currentNode &#125;&#125; id=&quot;input&quot; type=&quot;text&quot; placeholder=&quot;点击按钮提示信息&quot; /&gt;<span class="symbol">&amp;nbsp;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showData&#125;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;(currentNode)</span> =&gt;</span> &#123; this.input2 = currentNode &#125;&#125; onBlur=&#123;this.showData2&#125; type=&quot;text&quot; placeholder=&quot;失去焦点提示信息&quot; /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">                )</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>createRef的使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>createRef的使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react 核心库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react-dom 支持 react 操作 DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 babel 用于将 jsx 转换成 js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 定义类组件 必须要基础 React.Component</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// React.createRef调用后可以返回一个容器，该容器可以存储被ref所标识的节点,该容器是“专人专用”的</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            myRef = <span class="title class_">React</span>.<span class="title function_">createRef</span>()</span></span><br><span class="line"><span class="language-javascript">            myRef2 = <span class="title class_">React</span>.<span class="title function_">createRef</span>()</span></span><br><span class="line"><span class="language-javascript">            showData = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">myRef</span>.<span class="property">current</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">myRef</span>.<span class="property">current</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            showData2 = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">myRef2</span>.<span class="property">current</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">                    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;点击按钮提示信息&quot;</span> /&gt;</span><span class="symbol">&amp;nbsp;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showData&#125;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef2&#125;</span> <span class="attr">onBlur</span>=<span class="string">&#123;this.showData2&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;失去焦点提示信息&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">                )</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h4><blockquote>
<p>React 使用自定义事件，而非原生 DOM 事件，即 <code>onClick、onBlur</code> (注意大小写) ：为了更好的兼容性</p>
<p>React 的事件通过事件委托方式进行处理：为了高效</p>
<p>通过 <code>event.target</code> 可获取触发事件的 DOM 元素：勿过度使用 <code>ref</code></p>
<p>当触发事件的元素和需要操作的元素为同一个时，可以不使用 <code>ref</code></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>事件处理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react 核心库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react-dom 支持 react 操作 DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 babel 用于将 jsx 转换成 js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">           <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            1.通过onXxx属性指定事件处理函数(注意大小写)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                React使用的是自定义(合成)事件，而不是使用的原生DOM事件--- 为了更好的兼容性</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                React中的事件是通过事件委托方式处理的(委托给组件最外层的元素) ---- 为了的高效</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            2.通过event.target得到发生事件的DOM元素对象-----不要过度使用ref</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">           */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建ref容器</span></span></span><br><span class="line"><span class="language-javascript">        myRef = <span class="title class_">React</span>.<span class="title function_">createRef</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        showData = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">myRef</span>.<span class="property">current</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">myRef</span>.<span class="property">current</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        showData2 = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(event.<span class="property">target</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">                <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;点击按钮提示信息&quot;</span> /&gt;</span><span class="symbol">&amp;nbsp;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showData&#125;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">onBlur</span>=<span class="string">&#123;this.showData2&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;失去焦点提示信息&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">            )</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="收集表单数据"><a href="#收集表单数据" class="headerlink" title="收集表单数据"></a>收集表单数据</h4><blockquote>
<p>非受控组件</p>
<p>主要是通过ref来实现</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>非受控组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react 核心库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react-dom 支持 react 操作 DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 babel 用于将 jsx 转换成 js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            handleSubmit = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                event.<span class="title function_">preventDefault</span>();<span class="comment">//阻止表单提交事件</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> &#123; username, password &#125; = <span class="variable language_">this</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">`你输入的用户名为<span class="subst">$&#123;username.value&#125;</span>,密码为<span class="subst">$&#123;password.value&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">                    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;(c)</span> =&gt;</span> &#123; this.username = c &#125;&#125; type=&quot;text&quot; name=&quot;username&quot; /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;(c)</span> =&gt;</span> &#123; this.password = c &#125;&#125; type=&quot;password&quot; name=&quot;password&quot; /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">                )</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Login</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>受控组件</p>
<p>通过表单的 onChange 事件，当内容变化时，将数据更新到state中</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>受控组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react 核心库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react-dom 支持 react 操作 DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 babel 用于将 jsx 转换成 js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建组件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 初始化状态值</span></span></span><br><span class="line"><span class="language-javascript">            state = &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">//用户名</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span> <span class="comment">//密码</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 保存用户名到状态中</span></span></span><br><span class="line"><span class="language-javascript">            saveUsername = <span class="function">(<span class="params">event</span>) =&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">setState</span> = (&#123;<span class="attr">username</span>:event.<span class="property">target</span>.<span class="property">value</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 保存密码到状态中</span></span></span><br><span class="line"><span class="language-javascript">            savePassword = <span class="function">(<span class="params">event</span>) =&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">setState</span> = (&#123;<span class="attr">password</span>:event.<span class="property">target</span>.<span class="property">value</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 提交表单函数</span></span></span><br><span class="line"><span class="language-javascript">            handleSubmit = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                event.<span class="title function_">preventDefault</span>();<span class="comment">//阻止表单提交事件</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 从 state 里面获取数据</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> &#123; username, password &#125; = <span class="variable language_">this</span>.<span class="property">state</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">`你输入的用户名为<span class="subst">$&#123;username&#125;</span>,密码为<span class="subst">$&#123;password&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">                    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveUsername&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.savePassword&#125;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">                )</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Login</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对上述受控组件的代码进行优化，希望把 <code>saveUsername</code> 和 <code>savePassword</code> 合并为一个函数的两种方法</p>
<ul>
<li>高阶函数：（符合下面两个规范中的任何一个，那么这个函数就是一个高阶函数）<ul>
<li>函数作为参数传递给另一个函数 （接收的参数是一个函数）</li>
<li>函数作为返回值返回 （调用的返回值依然是一个函数）</li>
</ul>
</li>
<li>函数柯里化：通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的 <code>函数编码</code> 形式</li>
</ul>
<blockquote>
<p>函数柯里化</p>
</blockquote>
<p>示例：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span> (<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">b</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</span><br><span class="line">        	<span class="keyword">return</span> a + b + c</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">sum</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>高阶函数_函数柯里化<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react 核心库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react-dom 支持 react 操作 DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 babel 用于将 jsx 转换成 js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建组件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 初始化状态值</span></span></span><br><span class="line"><span class="language-javascript">            state = &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">//用户名</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span> <span class="comment">//密码</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 保存表单数据到状态中</span></span></span><br><span class="line"><span class="language-javascript">            saveFormData = <span class="function">(<span class="params">dataType</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;[dataType]:event.<span class="property">target</span>.<span class="property">value</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 提交表单函数</span></span></span><br><span class="line"><span class="language-javascript">            handleSubmit = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                event.<span class="title function_">preventDefault</span>();<span class="comment">//阻止表单提交事件</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 从 state 里面获取数据</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> &#123; username, password &#125; = <span class="variable language_">this</span>.<span class="property">state</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">`你输入的用户名为<span class="subst">$&#123;username&#125;</span>,密码为<span class="subst">$&#123;password&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">                    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveFormData(</span>&#x27;<span class="attr">username</span>&#x27;)&#125; <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveFormData(</span>&#x27;<span class="attr">password</span>&#x27;)&#125; <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">                )</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Login</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>不使用柯里化</p>
<p>和柯里化差不多,只不过是在 onChange 里面定义一个匿名箭头函数来接受参数</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>不使用函数柯里化实现<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react 核心库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react-dom 支持 react 操作 DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 babel 用于将 jsx 转换成 js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建组件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 初始化状态值</span></span></span><br><span class="line"><span class="language-javascript">            state = &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">//用户名</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span> <span class="comment">//密码</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 保存表单数据到状态中</span></span></span><br><span class="line"><span class="language-javascript">            saveFormData = <span class="function">(<span class="params">dataType,event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;[dataType]:event.<span class="property">target</span>.<span class="property">value</span>&#125;)  </span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 提交表单函数</span></span></span><br><span class="line"><span class="language-javascript">            handleSubmit = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                event.<span class="title function_">preventDefault</span>();<span class="comment">//阻止表单提交事件</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 从 state 里面获取数据</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> &#123; username, password &#125; = <span class="variable language_">this</span>.<span class="property">state</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">`你输入的用户名为<span class="subst">$&#123;username&#125;</span>,密码为<span class="subst">$&#123;password&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">                    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;(event)</span>=&gt;</span>&#123;this.saveFormData(&#x27;username&#x27;,event)&#125;&#125; type=&quot;text&quot; name=&quot;username&quot; /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;(event)</span>=&gt;</span>&#123;this.saveFormData(&#x27;password&#x27;,event)&#125;&#125; type=&quot;password&quot; name=&quot;password&quot; /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">                )</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Login</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<p><code>现用现取</code> 就是非受控组件，</p>
<p><code>随着你的输入维护状态</code> 就是受控组件，类似于<code>Vue 双向绑定</code>的从视图层绑定到数据层</p>
<p>尽量使用受控组件，因为非受控组件需要使用大量的 <code>ref</code></p>
</blockquote>
<h4 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h4><h5 id="引出生命周期"><a href="#引出生命周期" class="headerlink" title="引出生命周期"></a>引出生命周期</h5><ul>
<li>当 Clock 组件第一次被渲染到 DOM 中的时候，这在 react 中被称之为 “挂载（mount）”</li>
<li>同时 在 DOM 中 Clock 组件被删除的时候，这在 react 中被称之为 “卸载（unmount）”</li>
</ul>
<blockquote>
<p>函数执行的时机：</p>
</blockquote>
<ul>
<li>render调用：初始化渲染时，render()会执行一次，之后就是state的改变，render()就会再次执行</li>
<li>componentDidMount调用：在组件第一次挂载</li>
<li>componentWillUnmount调用：在组件将要卸载</li>
</ul>
<blockquote>
<p>如果没有清除定时器就卸载组件会报错</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Can&#x27;t perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in the componentWillUnmount method.</span><br><span class="line">    in Life</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>引出生命周期<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react 核心库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react-dom 支持 react 操作 DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 babel 用于将 jsx 转换成 js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建组件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">Life</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 设置状态</span></span></span><br><span class="line"><span class="language-javascript">            state = &#123;<span class="attr">opacity</span>:<span class="number">1</span>&#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 提交表单函数</span></span></span><br><span class="line"><span class="language-javascript">            death = <span class="function">() =&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 清除定时器</span></span></span><br><span class="line"><span class="language-javascript">                <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">time</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 卸载组件</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title class_">ReactDOM</span>.<span class="title function_">unmountComponentAtNode</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">time</span> = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 获取原来的状态</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> &#123; opacity &#125; = <span class="variable language_">this</span>.<span class="property">state</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 减小 0.1</span></span></span><br><span class="line"><span class="language-javascript">                    opacity -= <span class="number">0.1</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 判断不出现复数 0-1循环</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(opacity &lt;= <span class="number">0</span>) opacity = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 设置新的状态</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;opacity&#125;)</span></span><br><span class="line"><span class="language-javascript">                &#125;, <span class="number">200</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                </span></span><br><span class="line"><span class="language-javascript">               <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">                   <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&#123;&#123;opacity:this.state.opacity&#125;&#125;</span>&gt;</span>我是一个组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.death&#125;</span>&gt;</span>消失<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">               )</span></span><br><span class="line"><span class="language-javascript">           &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Life</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用生命周期优化：在组件将要卸载时清除定时器</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">        <span class="comment">// 创建组件</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Life</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">            <span class="comment">// 设置状态</span></span><br><span class="line">            state = &#123;<span class="attr">opacity</span>:<span class="number">1</span>&#125;</span><br><span class="line">            <span class="comment">// 提交表单函数</span></span><br><span class="line">            death = <span class="function">() =&gt;</span>&#123;</span><br><span class="line">                <span class="comment">// 卸载组件</span></span><br><span class="line">                <span class="title class_">ReactDOM</span>.<span class="title function_">unmountComponentAtNode</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">time</span> = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                    <span class="comment">// 获取原来的状态</span></span><br><span class="line">                    <span class="keyword">let</span> &#123; opacity &#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">                    <span class="comment">// 减小 0.1</span></span><br><span class="line">                    opacity -= <span class="number">0.1</span></span><br><span class="line">                    <span class="comment">// 判断不出现复数 0-1循环</span></span><br><span class="line">                    <span class="keyword">if</span>(opacity &lt;= <span class="number">0</span>) opacity = <span class="number">1</span></span><br><span class="line">                    <span class="comment">// 设置新的状态</span></span><br><span class="line">                    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;opacity&#125;)</span><br><span class="line">                &#125;, <span class="number">200</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">// 清除定时器</span></span><br><span class="line">                <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">time</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">return</span> (</span><br><span class="line">                   <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&#123;&#123;opacity:this.state.opacity&#125;&#125;</span>&gt;</span>我是一个组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.death&#125;</span>&gt;</span>消失<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">               )</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 渲染组件到页面</span></span><br><span class="line">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Life</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h5 id="生命周期-旧版"><a href="#生命周期-旧版" class="headerlink" title="生命周期-旧版"></a>生命周期-旧版</h5><blockquote>
<p>三大阶段</p>
</blockquote>
<p><strong>初始化阶段</strong>：<code>ReactDOM.render()</code> 触发的初次渲染</p>
<ul>
<li><code>constructor()</code>：构造器</li>
<li><code>componentWillMount()</code>：组件将要挂载</li>
<li><code>render()</code>：组件初次渲染</li>
<li><code>componentDidMount()</code>：组件已经挂载完毕</li>
</ul>
<p><strong>更新阶段</strong></p>
<p>组件内部调用 <code>this.setState()</code> 修改状态</p>
<ul>
<li><code>shouldComponentUpdate()</code>：控制组件是否更新的阀门，必须有返回值，且返回值为布尔值 ，默认为 <code>true</code> 。若返回 <code>false</code> ，则后续流程不会进行</li>
<li><code>componentWillUpdate()</code>：组件将要更新</li>
<li><code>render()</code>：更新渲染</li>
<li><code>componentDidUpdate()</code>：组件更新完毕</li>
</ul>
<p>父组件重新 <code>render</code> 触发的更新</p>
<ul>
<li><code>componentWillReceiveProps()</code>：组件将要接收 <code>新的props</code> 属性 （第一次接收的不算 只有接收新的props属性会触发）componentWillReceiveProps 还可以有参数 就是接收到的props属性</li>
<li><code>shouldComponentUpdate()</code> ：控制组件是否更新的阀门，返回值为布尔值，默认为 <code>true</code> 。若返回 <code>false</code> ，则后续流程不会进行</li>
<li><code>componentWillUpdate()</code></li>
<li><code>render()</code></li>
<li><code>componentDidUpdate()</code></li>
</ul>
<p>组件内部调用 <code>this.forceUpdate()</code> 强制更新（不更改状态）</p>
<ul>
<li><code>componentWillUpdate()</code></li>
<li><code>render()</code></li>
<li><code>componentDidUpdate()</code></li>
</ul>
<p><strong>卸载阶段</strong>：<code>ReactDOM.unmountComponentAtNode()</code> 触发</p>
<ul>
<li><code>componentWillUnmount()</code> 组件将要卸载</li>
</ul>
<p><strong>流程图：</strong></p>
<img src="/img/2bd.png" />

<h5 id="生命周期-新版"><a href="#生命周期-新版" class="headerlink" title="生命周期-新版"></a>生命周期-新版</h5><p><code>react.development.js</code>、<code>react-dom.development.js</code>、<code>babel.min.js</code>、<code>prop-types.js</code> 这些都换了新的</p>
<p>可以在 <code>BootCDN</code> 这个网站上面下载</p>
<p>网址：<a href="https://gitee.com/link?target=https://www.bootcdn.cn/">https://www.bootcdn.cn/</a></p>
<img src="/img/454.png" />

<p><a href="https://gitee.com/link?target=https://zh-hans.reactjs.org/blog/2018/03/27/update-on-async-rendering.html">更改内容</a>：</p>
<img src="/img/755.png" />

<img src="/img/935.png" />

<blockquote>
<p>废弃三个钩子：<code>componentWillMount</code> 、<code>componentWillReceiveProps</code> 、 <code>componentWillUpdate</code> 。在新版本中这三个钩子需要加 <code>UNSAFE_</code> 前缀才能使用，后续可能会废弃</p>
<p>新增两个钩子（实际场景用得很少）：<code>getDerivedStateFromProps</code> 、<code>getSnapshotBeforeUpdate</code></p>
</blockquote>
<img src="/img/79b.png" />

<p><a href="https://gitee.com/link?target=https://zh-hans.reactjs.org/docs/react-component.html%23static-getderivedstatefromprops">static getDerivedStateFromProps(props, state)</a>：</p>
<ul>
<li>需使用 <code>static</code> 修饰</li>
<li>需返回一个对象更新 <code>state</code> 或返回 <code>null</code></li>
<li>适用于如下情况：<code>state</code> 的值任何时候都取决于 <code>props</code></li>
<li>示例1：返回一个对象更新 <code>state</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static getDerivedStateFromProps(props,state)&#123;</span><br><span class="line">    console.log(&#x27;getDerivedStateFromProps&#x27;,props,state)</span><br><span class="line">    return props</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>示例2：返回 <code>null</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static getDerivedStateFromProps(props,state)&#123;</span><br><span class="line">    console.log(&#x27;getDerivedStateFromProps&#x27;,props,state)</span><br><span class="line">    return null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://gitee.com/link?target=https://zh-hans.reactjs.org/docs/react-component.html%23getsnapshotbeforeupdate">getSnapshotBeforeUpdate(prevProps, prevState)</a>：</p>
<ul>
<li>在组件更新之前获取快照</li>
<li>组件能在发生更改之前从 DOM 中捕获一些信息（如滚动位置）</li>
<li>返回值将作为参数传递给 <code>componentDidUpdate()</code></li>
<li>示例：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getSnapshotBeforeUpdate()&#123;</span><br><span class="line">  console.log(&#x27;getSnapshotBeforeUpdate&#x27;);</span><br><span class="line">  return &#x27;atguigu&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentDidUpdate(prevProps,prevState,snapshotValue)&#123;</span><br><span class="line">  console.log(&#x27;componentDidUpdate&#x27;,prevProps,prevState,snapshotValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>getSnapshotBeforeUpdate的使用场景<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.newsList</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.list</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react 核心库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/17.0.2/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react-dom 支持 react 操作 DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/17.0.2/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 babel 用于将 jsx 转换成 js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/17.0.2/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建组件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">NewsList</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 初始化状态</span></span></span><br><span class="line"><span class="language-javascript">            state = &#123;<span class="attr">newsArr</span>:[]&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//获取状态</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span> &#123;newsArr&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 模拟数据</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span> news = <span class="string">&#x27;新闻&#x27;</span> + (newsArr.<span class="property">length</span> + <span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//修改状态</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">newsArr</span>:[news,...newsArr]&#125;)</span></span><br><span class="line"><span class="language-javascript">                &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">getSnapshotBeforeUpdate</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 获取滚动条的位置 （获取当前高度）</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">refs</span>.<span class="property">list</span>.<span class="property">scrollHeight</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">componentDidUpdate</span>(<span class="params">prevProps,prevState,height</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">refs</span>.<span class="property">list</span>.<span class="property">scrollTop</span> += (<span class="variable language_">this</span>.<span class="property">refs</span>.<span class="property">list</span>.<span class="property">scrollHeight</span> - height)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          </span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">                   <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;newsList&quot;</span> <span class="attr">ref</span>=<span class="string">&#x27;list&#x27;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                            this.state.newsArr.map((item,index)=&gt;&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                                return <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list&quot;</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                            &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">               )</span></span><br><span class="line"><span class="language-javascript">           &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">NewsList</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="最重要的三个钩子"><a href="#最重要的三个钩子" class="headerlink" title="最重要的三个钩子"></a>最重要的三个钩子</h5><ul>
<li><code>render</code> ：初始化渲染和更新渲染</li>
<li><code>componentDidMount</code> ：进行初始化，如开启定时器、发送网络请求、订阅消息</li>
<li><code>componentWillUnmount</code> ：进行收尾，如关闭定时器、取消订阅消息</li>
</ul>
<h4 id="虚拟DOM与Diff算法"><a href="#虚拟DOM与Diff算法" class="headerlink" title="虚拟DOM与Diff算法"></a>虚拟DOM与Diff算法</h4><p><strong>key 的作用：</strong></p>
<p>简单来说：<code>key</code> 是虚拟 DOM 对象的标识，在更新页面时 key 起着极其重要的作用</p>
<p>详细来说：当状态中的数据发生变化时，react 会根据【新数据】生成【新的虚拟DOM】,随后 react 进行【新的虚拟DOM】与【旧的虚拟DOM】的 diff 比较，规则如下：</p>
<ul>
<li>旧虚拟 DOM 找到和新虚拟 DOM 相同的 key：<ul>
<li>若内容没变，直接复用真实 DOM</li>
<li>若内容改变，则生成新的真实 DOM ，替换页面中之前的真实 DOM</li>
</ul>
</li>
<li>旧虚拟 DOM 未找到和新虚拟 DOM 相同的 key：<ul>
<li>根据数据创建新的真实 DOM ，渲染到页面</li>
</ul>
</li>
</ul>
<p><strong>使用 index 作为 key 可能引发的问题：</strong></p>
<ul>
<li>若对数据进行逆序添加、逆序删除等破坏顺序的操作，会进行没有必要的真实 DOM 更新。界面效果没问题，但效率低下。</li>
<li>如果结构中包含输入类的 DOM（如 input 输入框） ，则会产生错误的 DOM 更新</li>
<li>若不存在对数据逆序添加、逆序删除等破坏顺序的操作，仅用于渲染展示，则没有问题</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>key的作用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react 核心库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/17.0.2/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react-dom 支持 react 操作 DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/17.0.2/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 babel 用于将 jsx 转换成 js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/17.0.2/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建组件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            state = &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">persons</span>: [</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;小张&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;小李&#x27;</span>, <span class="attr">age</span>: <span class="number">19</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                ],</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            add = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> &#123; persons &#125; = <span class="variable language_">this</span>.<span class="property">state</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> p = &#123; <span class="attr">id</span>: persons.<span class="property">length</span> + <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;小王&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">persons</span>: [p, ...persons] &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">                    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>展示人员信息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>添加小王<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>使用index(索引值)作为key<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                            &#123;this.state.persons.map((personObj, index) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                                return (</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                                        &#123;personObj.name&#125;---&#123;personObj.age&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                                )</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                            &#125;)&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>使用id(数据唯一标识)作为key<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                            &#123;this.state.persons.map((personObj) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                                return (</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;personObj.id&#125;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                                        &#123;personObj.name&#125;---&#123;personObj.age&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                                )</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                            &#125;)&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">                )</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="react应用（基于-react-脚手架）"><a href="#react应用（基于-react-脚手架）" class="headerlink" title="react应用（基于 react 脚手架）"></a>react应用（基于 react 脚手架）</h3><h4 id="react-脚手架"><a href="#react-脚手架" class="headerlink" title="react 脚手架"></a>react 脚手架</h4><ul>
<li>包含了所有需要的配置（语法检测、jsx编译、devServer…）</li>
<li>下载好了所有相关的依赖</li>
<li>可以直接运行一个简单效果</li>
</ul>
<p>react 提供了一个用于创建 react 项目的脚手架库：create-react-app</p>
<p>项目的整体技术架构为：react + webpack + es6 + eslint</p>
<p>使用脚手架开发项目的特点：模块化、组件化、工程化</p>
<h4 id="创建项目并启动"><a href="#创建项目并启动" class="headerlink" title="创建项目并启动"></a>创建项目并启动</h4><ul>
<li>全局安装 React 脚手架：<code>npm i -g create-react-app</code></li>
<li>创建项目：<code>create-react-app 项目名称</code></li>
<li>进入文件夹：<code>cd 项目名称</code></li>
<li>启动项目：<code>npm start</code></li>
</ul>
<h4 id="项目结构说明"><a href="#项目结构说明" class="headerlink" title="项目结构说明"></a>项目结构说明</h4><p><code>public</code> ：静态资源文件夹</p>
<ul>
<li><code>favicon.ico</code> ：网站页签图标（站点图标）</li>
<li><strong><code>index.html</code></strong> ：主页面</li>
<li><code>logo192.png</code> ：logo图</li>
<li><code>logo152.png</code> ：logo图</li>
<li><code>manifest.json</code> ：应用加壳（把网页变成安卓&#x2F;IOS 软件）的配置文件</li>
<li><code>robots.txt</code> ：爬虫协议文件</li>
</ul>
<p><code>src</code> ：源码文件夹</p>
<ul>
<li><code>App.css</code> ：App组件的样式</li>
<li><strong><code>App.js</code></strong> ：App组件</li>
<li><code>App.test.js</code> ：用于给 <code>App</code> 组件做测试，一般不用</li>
<li><code>index.css</code> ：样式</li>
<li><strong><code>index.js</code></strong> ：入口文件</li>
<li><code>logo</code> ：logo图片</li>
<li><code>reportWebVitals.js</code> ：页面性能分析文件，需要 <code>web-vitals</code> 库支持</li>
<li><code>setupTests.js</code> ：组件单元测试文件，需要 <code>jest-dom</code> 库支持</li>
</ul>
<img src="/img/459.png" />

<p><code>index.html</code> 主页面代码分析：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- %PUBLIC_URL%/ 代表 public 文件夹的路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;%PUBLIC_URL%/favicon.ico&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启理想视口，用于做移动端网页适配 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用于配置浏览器页签+地址栏的颜色(仅支持安卓手机浏览器) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;theme-color&quot;</span> <span class="attr">content</span>=<span class="string">&quot;#000000&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 网站描述 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">&quot;description&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">content</span>=<span class="string">&quot;Web site created using create-react-app&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用于指定网页添加到手机主屏幕的图标（仅支持苹果手机） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;apple-touch-icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;%PUBLIC_URL%/logo192.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 应用加壳时的配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;manifest&quot;</span> <span class="attr">href</span>=<span class="string">&quot;%PUBLIC_URL%/manifest.json&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>React App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 若浏览器不支持 js 则展示标签中的内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span>You need to enable JavaScript to run this app.<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>删除项目中不必要的文件，并且使用jsx文件来定义组件</p>
<img src="/img/642.png" />

<blockquote>
<p>在 React 18 中，<code>ReactDOM.render</code> 被替换为 <code>createRoot</code> API。这是因为 React 18 引入了并发特性和其他新功能，因此需要新的挂载方式 ，<a href="https://gitee.com/link?target=https://reactjs.org/docs/react-dom-client.html%23createroot">React 18 文档</a></p>
</blockquote>
<h4 id="样式模块化"><a href="#样式模块化" class="headerlink" title="样式模块化"></a>样式模块化</h4><img src="/img/812.png" />

<ul>
<li>样式文件名称：index.module.css</li>
<li>引入方式：import hello from “.&#x2F;index.module.css”</li>
<li>使用方式：className&#x3D;{hello.title}</li>
</ul>
<h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>ES7 React&#x2F;Redux&#x2F;GraphQL&#x2F;React-Native snippets：使用代码模块快速开发</p>
<p>输入：<code>rcc</code> ，直接出现以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">export default class FileName extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;div&gt;$2&lt;/div&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="组件化编码流程"><a href="#组件化编码流程" class="headerlink" title="组件化编码流程"></a>组件化编码流程</h4><p>1.拆分组件：拆分界面，抽取组件</p>
<p>2.实现静态组件：使用组件实现静态页面效果</p>
<p>3.实现动态组件：</p>
<ul>
<li>动态显示初始化数据（数据类型、数据名称、保存在哪个组件）</li>
<li>交互（从绑定事件监听开始）</li>
</ul>
<h4 id="TodoList-案例总结"><a href="#TodoList-案例总结" class="headerlink" title="TodoList 案例总结"></a>TodoList 案例总结</h4><p>拆分组件、实现静态组件，注意：<code>className</code> 、<code>style</code> 的写法</p>
<p>动态初始化列表，如何确定将数据放在哪个组件的 <code>state</code> 中？</p>
<ul>
<li>某个组件使用：放在其自身的 <code>state</code> 中</li>
<li>某些组件使用：放在他们共同的父组件 <code>state</code> 中，即<strong>状态提升</strong></li>
</ul>
<p>关于父子之间通信：</p>
<ul>
<li>父传子：直接通过 <code>props</code> 传递</li>
<li>子传父：父组件通过 <code>props</code> 给子组件传递一个函数，子组件调用该函数</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">class Father extends Component &#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    todos: [&#123; id: &#x27;001&#x27;, name: &#x27;吃饭&#x27;, done: true &#125;],</span><br><span class="line">    flag: true,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addTodo = (todo) =&gt; &#123;</span><br><span class="line">    const &#123; todos &#125; = this.state</span><br><span class="line">    const newTodos = [todo, ...todos]</span><br><span class="line">    this.setState(&#123; todos: newTodos &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">      // 父组件给子组件传递一个 addTodo 函数</span><br><span class="line">    return &lt;List todos=&#123;this.state.todos&#125; addTodo=&#123;this.addTodo&#125; /&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 子组件</span><br><span class="line">class Son extends Component &#123;</span><br><span class="line">  // 由于 addTodo 是箭头函数，this 指向父组件实例对象，因此子组件调用它相当于父组件实例在调用</span><br><span class="line">  handleClick = () =&gt; &#123;</span><br><span class="line">      //子组件调用 addTodo 函数</span><br><span class="line">    this.props.addTodo(&#123; id: &#x27;002&#x27;, name: &#x27;敲代码&#x27;, done: false &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;button onClick=&#123;this.handleClick&#125;&gt;添加&lt;/button&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意 <code>defaultChecked</code> 和 <code>checked</code> 的区别，使用 <code>checked</code> 要搭配 <code>onChange</code> 。 类似的还有 <code>defaultValue</code> 和 <code>value</code></p>
<p>状态在哪里，操作状态的方法就在哪里</p>
<h4 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h4><blockquote>
<p>方法一</p>
</blockquote>
<p>在 <code>package.json</code> 文件中进行配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;proxy&quot;: &quot;http://localhost:5000&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>优点：配置简单，前端请求资源可不加前缀</li>
<li>缺点：不能配置多个代理</li>
<li>工作方式：当请求了 3000 端口号（本机）不存在的资源时，就会把请求转发给 5000 端口号服务器</li>
</ul>
<blockquote>
<p>方法二</p>
</blockquote>
<p>在 <code>src</code> 目录下创建代理配置文件 <code>setupProxy.js</code> ，进行配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const proxy = require(&#x27;http-proxy-middleware&#x27;)</span><br><span class="line"></span><br><span class="line">module.exports = function (app) &#123;</span><br><span class="line">  app.use(</span><br><span class="line">    //api1是需要转发的请求(所有带有/api1前缀的请求都会转发给5000)</span><br><span class="line">    proxy(&#x27;/api1&#x27;, &#123;</span><br><span class="line">      //配置转发目标地址(能返回数据的服务器地址)</span><br><span class="line">      target: &#x27;http://localhost:5000&#x27;,</span><br><span class="line">      //控制服务器接收到的请求头中host字段的值</span><br><span class="line">      /*</span><br><span class="line">      changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span><br><span class="line">      changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:3000</span><br><span class="line">      changeOrigin默认值为false，但一般将changeOrigin改为true</span><br><span class="line">      */</span><br><span class="line">      changeOrigin: true,</span><br><span class="line"></span><br><span class="line">      //去除请求前缀，保证交给后台服务器的是正常请求地址(必须配置)</span><br><span class="line">      //将 /api1 替换成 空字符串</span><br><span class="line">      pathRewrite: &#123; &#x27;^/api1&#x27;: &#x27;&#x27; &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    proxy(&#x27;/api2&#x27;, &#123;</span><br><span class="line">      target: &#x27;http://localhost:5001&#x27;,</span><br><span class="line">      changeOrigin: true,</span><br><span class="line">      pathRewrite: &#123; &#x27;^/api2&#x27;: &#x27;&#x27; &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：</p>
<p>优点：可以配置多个代理，可以灵活的控制请求是否走代理</p>
<p>缺点：配置繁琐，前端请求资源时必须加前缀</p>
</blockquote>
<h3 id="消息订阅发布机制"><a href="#消息订阅发布机制" class="headerlink" title="消息订阅发布机制"></a>消息订阅发布机制</h3><p>即 React 中 <code>兄弟组件</code>或 <code>任意组件</code> 之间的通信方式</p>
<ul>
<li>先订阅，再发布（隔空对话）</li>
<li>适用于任意组件间通信</li>
<li>要在 <code>componentWillUnmount</code> 钩子中取消订阅</li>
</ul>
<p>使用的工具库：<a href="https://gitee.com/link?target=https://www.npmjs.com/package/pubsub-js">PubSubJS</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i pubsub-js</span><br></pre></td></tr></table></figure>

<p>基础用法：</p>
<ul>
<li>发布一个名为 <code>topic</code> 的事件，并带上数据 <code>hello react</code></li>
<li>订阅名为 <code>topic</code> 的事件，拿到数据 <code>data</code></li>
<li>当不再需要接收消息时，记得取消订阅</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">PubSub</span> <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布消息</span></span><br><span class="line"><span class="title class_">PubSub</span>.<span class="title function_">publish</span>(<span class="string">&#x27;topic&#x27;</span>, <span class="string">&#x27;hello react&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅消息 token是一个标识，类似 setTimeout 会有个返回值作为标识</span></span><br><span class="line"><span class="keyword">let</span> token = <span class="title class_">PubSub</span>.<span class="title function_">subscribe</span>(<span class="string">&#x27;topic&#x27;</span>, <span class="function">(<span class="params">msg, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(msg, data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消订阅</span></span><br><span class="line"><span class="title class_">PubSub</span>.<span class="title function_">unsubscribe</span>(token)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="扩展-–-Fetch"><a href="#扩展-–-Fetch" class="headerlink" title="扩展 – Fetch"></a>扩展 – Fetch</h3><blockquote>
<p>首先 fetch 也是一种发送请求的方式，它是在 xhr 之外的一种，我们平常用的 Jquery 和 axios 都是封装了 xhr 的第三方库，而 fetch 是官方自带的库，同时它也采用的是 Promise 的方式</p>
</blockquote>
<p>使用</p>
<p>方法一：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fetch(&#x27;http://xxx&#x27;)</span><br><span class="line">  .then(response =&gt; response.json())</span><br><span class="line">  .then(json =&gt; console.log(json))</span><br><span class="line">  .catch(err =&gt; console.log(&#x27;Request Failed&#x27;, err)); </span><br></pre></td></tr></table></figure>

<p><code>fetch()</code>接收到的 <code>response</code> 是一个 <a href="https://gitee.com/link?target=https://developer.mozilla.org/en-US/docs/Web/API/Streams_API">Stream 对象</a>，<code>response.json()</code>是一个异步操作，取出所有内容，并将其转为 JSON 对象</p>
<p>方法二：（简化）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">async function getJSON() &#123;</span><br><span class="line">  let url = &#x27;https://xxx&#x27;;</span><br><span class="line">  try &#123;</span><br><span class="line">    let response = await fetch(url);</span><br><span class="line">    return await reasponse.json();</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    console.log(&#x27;Request Failed&#x27;, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后关于错误对象的获取可以采用 <code>try...catch</code> 来实现</p>
<h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="number">1</span> &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//传统解构赋值</span></span><br><span class="line"><span class="keyword">const</span> &#123; a &#125; = obj</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">//连续解构赋值</span></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="attr">a</span>: &#123; b &#125;,</span><br><span class="line">&#125; = obj</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">//连续解构赋值 + 重命名</span></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="attr">a</span>: &#123; <span class="attr">b</span>: value &#125;,</span><br><span class="line">&#125; = obj</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="nanoid生成唯一标识"><a href="#nanoid生成唯一标识" class="headerlink" title="nanoid生成唯一标识"></a>nanoid生成唯一标识</h3><p>GitHub仓库：<a href="https://gitee.com/link?target=https://github.com/ai/nanoid">https://github.com/ai/nanoid</a></p>
<p>Gitee仓库：<a href="https://gitee.com/mirrors/nanoid">https://gitee.com/mirrors/nanoid</a></p>
<blockquote>
<p>生成唯一标识的一个库 (类似于 uuid 但是比 uuid 小)</p>
</blockquote>
<p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install nanoid</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; nanoid &#125; from &#x27;nanoid&#x27;</span><br><span class="line">model.id = nanoid()</span><br><span class="line">console.log(model.id)  // V1StGXR8_Z5jdHi6B-mT</span><br></pre></td></tr></table></figure>

<h3 id="react-router"><a href="#react-router" class="headerlink" title="react-router"></a>react-router</h3><h4 id="路由的理解"><a href="#路由的理解" class="headerlink" title="路由的理解"></a>路由的理解</h4><p>什么是路由</p>
<ul>
<li>一个路由是一个映射关系</li>
<li><code>key</code> 为路径，<code>value</code> 可能是 <code>function</code> 或 <strong>组件</strong>(component)</li>
</ul>
<p>路由的分类</p>
<ul>
<li>后端路由<ul>
<li><code>value</code> 是 <code>function</code> ，用于处理客户端的请求</li>
<li>注册路由：<code>router.get(path, function(req, res))</code></li>
<li>工作过程：Node 接收到请求，根据路径匹配路由，调用对应函数处理请求，返回响应数据</li>
</ul>
</li>
<li>前端路由<ul>
<li>浏览器路由，<code>value</code> 是组件(component)，用于展示页面内容</li>
<li>注册路由：<code>&lt;Route path=&quot;/test&quot; component=&#123;Test&#125;&gt;</code></li>
<li>工作过程：浏览器路径变为 <code>/test</code> ，展示 <code>Test</code> 组件</li>
</ul>
</li>
</ul>
<h4 id="路由的原理"><a href="#路由的原理" class="headerlink" title="路由的原理"></a>路由的原理</h4><blockquote>
<p>前端路由的主要依靠的是 history ，也就是浏览器的历史记录</p>
<p>history 是 BOM 对象下的一个属性，在 H5 中新增了一些操作 history 的 API</p>
</blockquote>
<p>浏览器的历史记录就类似于一个 <strong><code>栈</code></strong> 的数据结构，前进就相当于 **<code>入栈</code>**，后退就相当于 <strong><code>出栈</code></strong></p>
<p>并且历史记录上可以采用 <code>listen</code> 来监听请求路由的改变，从而判断是否改变路径</p>
<p>在 H5 中新增了 <code>createBrowserHistory</code> 的 API ，用于创建一个 history 栈，用 H5 实现，单页路由的 URL 不会多出一个 <code>#</code> 号，这样会更加的美观</p>
<p>还有一种就是 <code>createHashHistory</code> 哈希值 ，单页路由的 URL 多出一个 <code>#</code> 号 ，性能极佳</p>
<h4 id="路由的基本使用"><a href="#路由的基本使用" class="headerlink" title="路由的基本使用"></a>路由的基本使用</h4><p>安装 <code>react-router-dom</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 安装 5.X 版本路由</span><br><span class="line">npm install react-router-dom@5</span><br></pre></td></tr></table></figure>

<p>最新默认是安装的6.x版本，这里以 <code>5.x</code> 版本为例展示基本使用,后面再写6.x版本的使用</p>
<blockquote>
<p>导航区使用 <code>&lt;Link&gt;</code>，展示区使用 <code>&lt;Route&gt;</code></p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Link</span>,<span class="title class_">Route</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/About&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Home&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Header&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 类式 App 组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="comment">// 渲染函数</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-offset-2 col-xs-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-2 col-xs-offset-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/* 导航 */&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Link</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span> = <span class="string">&quot;/home&quot;</span> &gt;</span>Home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Link</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span> = <span class="string">&quot;/about&quot;</span> &gt;</span>About<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  &#123;/* 注册路由，展示组件内容，也就是写对应的关系 */&#125;</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="Link组件"><a href="#Link组件" class="headerlink" title="Link组件"></a>Link组件</h5><blockquote>
<p>定义导航链接，用来替换a标签</p>
</blockquote>
<ul>
<li>to属性：定义点击之后切换的路径（要跳转的组件路径）</li>
<li>className属性： 定义类名</li>
<li>标签体：定义显示的名称</li>
</ul>
<p>【例如】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Link className=&quot;list-group-item&quot; to = &quot;/home&quot; &gt;Home&lt;/Link&gt;</span><br></pre></td></tr></table></figure>

<h5 id="Route组件"><a href="#Route组件" class="headerlink" title="Route组件"></a>Route组件</h5><blockquote>
<p>路由组件匹配成功之后的展示区</p>
</blockquote>
<ul>
<li>path属性：匹配的路径</li>
<li>component属性：匹配成功后展示的组件</li>
</ul>
<p>【例如】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Route path=&quot;/home&quot; component=&#123;Home&#125; /&gt;</span><br></pre></td></tr></table></figure>

<h5 id="路由入门案例"><a href="#路由入门案例" class="headerlink" title="路由入门案例"></a>路由入门案例</h5><ul>
<li>复制boostrap.css到public&#x2F;css下,并且在index.html中引入</li>
</ul>
<img src="/img/953.png" />

<ul>
<li>App.jsx</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span>, <span class="title class_">Route</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./components/About&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            About</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            Home</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>index.js 中<code>&lt;App&gt;</code> 的最外侧包裹 <code>&lt;BrowserRouter&gt;</code> 或 <code>&lt;HashRouter&gt;</code> ：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 react 核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="comment">// 引入 react-dom 库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">BrowserRouter</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="comment">// 引入 App 组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取根元素</span></span><br><span class="line"><span class="keyword">const</span> rootElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建根</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(rootElement);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染 App 组件到页面</span></span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="路由组件和一般组件"><a href="#路由组件和一般组件" class="headerlink" title="路由组件和一般组件"></a>路由组件和一般组件</h4><p>存放位置不同</p>
<ul>
<li>一般组件：<code>components</code></li>
<li>路由组件：<code>pages</code></li>
</ul>
<p><strong>写法不同</strong></p>
<ul>
<li>一般组件：<code>&lt;Demo/&gt;</code></li>
<li>路由组件：<code>&lt;Route path=&quot;/demo&quot; component=&#123;Demo&#125;/&gt;</code></li>
</ul>
<p><strong>接收到的 props不同</strong></p>
<ul>
<li>一般组件：标签属性传递</li>
<li>路由组件：接收到三个固定的属性(history、location、match)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;history&quot;: &#123;</span><br><span class="line">    &quot;length&quot;: 3,</span><br><span class="line">    &quot;action&quot;: &quot;REPLACE&quot;,</span><br><span class="line">    &quot;location&quot;: &#123;</span><br><span class="line">      &quot;pathname&quot;: &quot;/about&quot;,</span><br><span class="line">      &quot;search&quot;: &quot;&quot;,</span><br><span class="line">      &quot;hash&quot;: &quot;&quot;,</span><br><span class="line">      &quot;key&quot;: &quot;izso4a&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;location&quot;: &#123;</span><br><span class="line">    &quot;pathname&quot;: &quot;/about&quot;,</span><br><span class="line">    &quot;search&quot;: &quot;&quot;,</span><br><span class="line">    &quot;hash&quot;: &quot;&quot;,</span><br><span class="line">    &quot;key&quot;: &quot;izso4a&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;match&quot;: &#123;</span><br><span class="line">    &quot;path&quot;: &quot;/about&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;/about&quot;,</span><br><span class="line">    &quot;isExact&quot;: true,</span><br><span class="line">    &quot;params&quot;: &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="NavLink组件"><a href="#NavLink组件" class="headerlink" title="NavLink组件"></a>NavLink组件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NavLink` 可以实现路由链接的高亮，通过 `activeClassName` 指定样式名，默认追加类名为 `active</span><br><span class="line">&lt;NavLink className=&quot;list-group-item&quot; to=&quot;/about&quot;&gt;About&lt;/NavLink&gt;</span><br><span class="line">&lt;NavLink className=&quot;list-group-item&quot; to=&quot;/home&quot;&gt;Home&lt;/NavLink&gt;</span><br></pre></td></tr></table></figure>

<p>NavLink 标签是默认的添加上 <code>active</code> 类，我们也可以改变它，在标签上添加一个属性 <code>activeClassName</code></p>
<p>例如 :</p>
<p><code>activeClassName=&quot;navLinkActive&quot;</code> 在触发这个 NavLink 时，会自动添加一个 <code>navLinkActive</code>类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;NavLink activeClassName=&quot;navLinkActive&quot; to=&quot;/about&quot;&gt;About&lt;/NavLink&gt;</span><br><span class="line">&lt;NavLink activeClassName=&quot;navLinkActive&quot; to=&quot;/home&quot;&gt;Home&lt;/NavLink&gt;</span><br></pre></td></tr></table></figure>

<p>可以在 <code>index.html</code> 中自定义样式，但是样式一定要加 <strong><code>权重 !important</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .navLinkActive&#123;</span><br><span class="line">        background-color: aqua !important;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>封装 <code>NavLink</code> 组件：由于 <code>NavLink</code> 组件中重复的代码太多，因此进行二次封装</p>
<blockquote>
<p>组件标签的内容会传递到 <code>this.props.children</code> 属性中，反过来通过指定标签的 <code>children</code> 属性可以修改组件标签内容</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// MyNavLink 组件</span><br><span class="line">import React, &#123; Component &#125; from &#x27;react&#x27;</span><br><span class="line">import &#123; NavLink &#125; from &#x27;react-router-dom&#x27;</span><br><span class="line"></span><br><span class="line">export default class MyNavLink extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    console.log(this.props) // &#123;&quot;to&quot;: &quot;/about&quot;, &quot;children&quot;: &quot;About&quot;&#125;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;/* this.props.children 可以取到标签体内容，如 About, Home</span><br><span class="line">    	反过来通过指定标签的 children 属性可以修改标签体内容 */&#125;</span><br><span class="line">        &lt;NavLink className=&quot;list-group-item&quot; &#123;...this.props&#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Switch-的使用"><a href="#Switch-的使用" class="headerlink" title="Switch 的使用"></a>Switch 的使用</h4><p><code>Switch</code> 可以提高路由匹配效率，如果匹配成功，则不再继续匹配后面的路由，也就是只匹配一个（单一匹配）</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!-- 从上往下匹配 只会展示前面的组件 匹配到 <span class="title class_">Home</span> 组件之后就结束匹配 不会展示 <span class="title class_">Test</span> 组件 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&quot;&#123;About&#125;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&quot;&#123;Home&#125;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&quot;&#123;Test&#125;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="多级路径刷新页面样式丢失"><a href="#多级路径刷新页面样式丢失" class="headerlink" title="多级路径刷新页面样式丢失"></a>多级路径刷新页面样式丢失</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;MyNavLink to = &quot;/nanxun/about&quot; &gt;About&lt;/MyNavLink&gt;</span><br><span class="line">&lt;MyNavLink to = &quot;/nanxun/home&quot; &gt;Home&lt;/MyNavLink&gt;</span><br><span class="line"></span><br><span class="line">&lt;Route path=&quot;/nanxun/about&quot; component=&#123;About&#125;/&gt;</span><br><span class="line">&lt;Route path=&quot;/nanxun/home&quot; component=&#123;Home&#125;/&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>public/index.html</code> 中 引入样式时不写 <code>./</code> 写 <code>/</code> （常用）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/bootstrap.css&quot;&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>public/index.html</code> 中 引入样式时不写 <code>./</code> 写 <code>%PUBLIC_URL%</code> （常用）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;%PUBLIC_URL%/css/bootstrap.css&quot;&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 <code>index.js</code> 中使用 <code>HashRouter</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 渲染 App 组件到页面</span><br><span class="line">root.render(</span><br><span class="line">  &lt;React.StrictMode&gt;</span><br><span class="line">    &lt;HashRouter&gt;</span><br><span class="line">      &lt;App /&gt;</span><br><span class="line">    &lt;/HashRouter&gt;</span><br><span class="line">  &lt;/React.StrictMode&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="路由的严格匹配与模糊匹配"><a href="#路由的严格匹配与模糊匹配" class="headerlink" title="路由的严格匹配与模糊匹配"></a>路由的严格匹配与模糊匹配</h4><ul>
<li>默认使用模糊匹配（<code>Route</code>组件的<code>path</code>必须属于<code>Link</code>组件要匹配的路径，且顺序一致）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;MyNavLink to = &quot;/about&quot; &gt;About&lt;/MyNavLink&gt;</span><br><span class="line">&lt;MyNavLink to = &quot;/home/a/b&quot; &gt;Home&lt;/MyNavLink&gt;</span><br><span class="line"></span><br><span class="line">&lt;Route path=&quot;/about&quot; component=&#123;About&#125;/&gt;</span><br><span class="line">&lt;Route path=&quot;/home&quot; component=&#123;Home&#125;/&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>开启严格匹配：<code>&lt;Route exact path=&quot;/about&quot; component=&#123;About&#125;/&gt;</code> ，直接添加 <code>exact</code> 属性</li>
<li>严格匹配需要再开，开启可能会导致无法继续匹配二级路由</li>
</ul>
<h4 id="Redirect-重定向"><a href="#Redirect-重定向" class="headerlink" title="Redirect (重定向)"></a>Redirect (重定向)</h4><p>一般写在所有路由注册的 <code>最下方</code> ，当所有路由都无法匹配时，跳转到 Redirect 指定的路由</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123;Route,Redirect&#125; from &#x27;react-router-dom&#x27;</span><br><span class="line">&lt;Switch&gt;</span><br><span class="line">  &lt;Route path=&quot;/about&quot; component=&quot;&#123;About&#125;&quot; /&gt;</span><br><span class="line">  &lt;Route path=&quot;/home&quot; component=&quot;&#123;Home&#125;&quot; /&gt;</span><br><span class="line">  &lt;Redirect to=&quot;/about&quot; /&gt;</span><br><span class="line">&lt;/Switch&gt;</span><br></pre></td></tr></table></figure>

<h4 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h4><ul>
<li>注册 <code>子路由</code> 需写上 <code>父路由</code> 的 <code>path</code></li>
<li>路由的匹配是<strong>按照注册路由的顺序进行</strong>的</li>
</ul>
<p>App.jsx 主路由 （一级路由）</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;<span class="title class_">MyNavLink</span> to=<span class="string">&quot;/about&quot;</span>&gt;<span class="title class_">About</span>&lt;/<span class="title class_">MyNavLink</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>子路由 （二级路由）</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;ul className=<span class="string">&quot;nav nav-tabs&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&quot;/home/news&quot;</span>&gt;</span>News<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&quot;/home/message&quot;</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home/news&quot;</span> <span class="attr">component</span>=<span class="string">&#123;News&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home/message&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Message&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/home/news&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>点击二级路由的时候，会先匹配一级路由，通过模糊匹配，匹配到 &#x2F;home 这个路由 然后渲染 Home 组件 点击导航再次匹配路由 &#x2F;home&#x2F;news 一级路由全部不符合 匹配二级路由成功渲染 News 组件</p>
</blockquote>
<img src="/img/503.png" />

<h4 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h4><p>三种方式：<code>params, search, state</code> 参数</p>
<p>params 参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 路由链接（携带参数）</span><br><span class="line">&lt;Link to=&#x27;/home/message/detail/tom/21&#x27;&gt;params&lt;/Link&gt;</span><br><span class="line">&lt;Link to=&#123;`/home/message/detail/$&#123;item.name&#125;/$&#123;item.age&#125;`&#125;&gt;&#123;item.name&#125;&lt;/Link&gt;</span><br><span class="line">// 注册路由（声明参数）</span><br><span class="line">&lt;Route path=&#x27;/home/message/detail/:name/:age&#x27; component=&#123;Detail&#125; /&gt;</span><br><span class="line">// 接收参数</span><br><span class="line">const &#123; name, age &#125; = this.props.match.params</span><br></pre></td></tr></table></figure>

<p>search 参数：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由链接（携带参数）</span></span><br><span class="line">&lt;<span class="title class_">Link</span> to=&#123;&#123;<span class="attr">pathname</span>:<span class="string">&#x27;/home/message/detail&#x27;</span>,<span class="attr">state</span>: &#123;<span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>, <span class="attr">age</span>: <span class="number">21</span>&#125;&#125;&#125;&gt;state&lt;/<span class="title class_">Link</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;&#123;pathname:</span>&#x27;/<span class="attr">home</span>/<span class="attr">message</span>/<span class="attr">detail</span>&#x27;,<span class="attr">state:</span>&#123;<span class="attr">name:item.name</span>,<span class="attr">age:item.age</span>&#125;&#125;&#125;&gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 注册路由（不需要声明，直接注册即可）</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/home/message/detail&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Detail&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 接收参数</span></span><br><span class="line"><span class="keyword">const</span> &#123;name,age&#125; = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">location</span>.<span class="property">state</span> || &#123;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>三种方式的区别：</p>
<p><code>state</code> 方式当前页面刷新 <strong><code>参数会丢失</code></strong></p>
<p><code>params </code>和 <code>search</code> 方式由于参数保存在 URL 地址上，因此都能 <strong><code>保留参数</code></strong></p>
</blockquote>
<h4 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h4><p>使用路由组件 <code>this.props.history</code> 提供的 API 进行路由跳转，前进，后退</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 推入新路由</span><br><span class="line">this.props.history.push(path, state)</span><br><span class="line">// 替换当前路由</span><br><span class="line">this.props.history.replace(path, state)</span><br><span class="line">// 前进一页</span><br><span class="line">this.props.history.goForward()</span><br><span class="line">// 返回上一页</span><br><span class="line">this.props.history.goBack()</span><br><span class="line">// 前进或后退</span><br><span class="line">this.props.history.go(n)</span><br></pre></td></tr></table></figure>

<p>编程式导航传参</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// params  </span><br><span class="line">this.props.history.push(`/home/message/detail/$&#123;id&#125;/$&#123;title&#125;`)</span><br><span class="line">// search</span><br><span class="line">this.props.history.push(`/home/message/detail?id=$&#123;id&#125;&amp;title=$&#123;title&#125;`)</span><br><span class="line">// state</span><br><span class="line">this.props.history.push(`/home/message/detail`, &#123; id: id, title: title &#125;)</span><br></pre></td></tr></table></figure>

<h4 id="withRouter-的使用"><a href="#withRouter-的使用" class="headerlink" title="withRouter 的使用"></a>withRouter 的使用</h4><p><code>withRouter</code> 的作用：加工一般组件，让其拥有路由组件所特有的 API ，如 <code>this.props.history.goBack</code> 等</p>
<p><code>withRouter</code> 的返回值是一个新组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; withRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Header</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  back = <span class="function">() =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">goBack</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>react router dom<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.back&#125;</span>&gt;</span>回退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">withRouter</span>(<span class="title class_">Header</span>) <span class="comment">// 导出前用withRouter加工一下</span></span><br></pre></td></tr></table></figure>

<h4 id="BrowserRouter-和-HashRouter"><a href="#BrowserRouter-和-HashRouter" class="headerlink" title="BrowserRouter 和 HashRouter"></a>BrowserRouter 和 HashRouter</h4><p>底层原理不一样：</p>
<ul>
<li><code>BrowserRouter</code> 使用的是 H5 的 history API，不兼容 IE9 及以下版本</li>
<li><code>HashRouter</code> 使用的是 URL 的哈希值</li>
</ul>
<p>路径表现形式不一样</p>
<ul>
<li><code>BrowserRouter</code> 的路径中<strong>没有</strong> <code>#</code> ，如：<code>localhost:3000/demo/test</code></li>
<li><code>HashRouter</code> 的路径<strong>包含</strong> <code>#</code> ，如：<code>localhost:3000/#/demo/test</code></li>
</ul>
<p>刷新后对路由 <code>state</code> 参数的影响</p>
<ul>
<li><code>BrowserRouter</code> 和 <code>HashRouter</code> 刷新后都会导致路由 <code>state</code> 参数的丢失</li>
</ul>
<p>备注：<code>HashRouter</code> 可以用于解决一些路径错误相关的<a href="https://brucecai55520.gitee.io/bruceblog/notes/react/react-router5.html#%E8%A7%A3%E5%86%B3%E5%A4%9A%E7%BA%A7%E8%B7%AF%E5%BE%84%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2%E6%A0%B7%E5%BC%8F%E4%B8%A2%E5%A4%B1%E7%9A%84%E9%97%AE%E9%A2%98">问题</a></p>
<h3 id="react-UI-组件库"><a href="#react-UI-组件库" class="headerlink" title="react UI 组件库"></a>react UI 组件库</h3><p>material-ui（国外）</p>
<p>ant-design（国内蚂蚁金服）</p>
<ul>
<li>官网：<a href="https://gitee.com/link?target=https://ant.design/index-cn">https://ant.design/index-cn</a></li>
<li>github：<a href="https://gitee.com/link?target=https://github.com/ant-design/ant-design">https://github.com/ant-design/ant-design</a></li>
</ul>
<h3 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h3><p>Redux 是什么，类似 vue 中的 vuex</p>
<ul>
<li>Redux 是用于做 <strong>状态管理</strong> 的 JS 库</li>
<li>可用于 React、Angular、Vue 等项目中，常用于 React</li>
<li>集中式管理 React 应用多个组件 <code>共享 </code>的状态</li>
</ul>
<p>何时用 Redux</p>
<ul>
<li>某个组件的状态，需要让其他组件拿到（状态共享）</li>
<li>一个组件需要改变另一个组件的状态（通信）</li>
<li>使用原则：不到万不得已不要轻易动用</li>
</ul>
<p>Redux 工作流程</p>
<img src="/img/200.png" />

<ul>
<li>组件想操作 Redux 中的状态：把动作类型和数据告诉 <code>Action Creators</code></li>
<li><code>Action Creators</code> 创建 <code>action</code> ：同步 <code>action</code> 是一个普通对象，异步 <code>action</code> 是一个函数</li>
<li><code>Store</code> 调用 <code>dispatch()</code> 分发 <code>action</code> 给 <code>Reducers</code> 执行</li>
<li><code>Reducers</code> 接收 <code>previousState</code> 、<code>action</code> 两个参数，对状态进行加工后返回新状态</li>
<li><code>Store</code> 调用 <code>getState()</code> 把状态传给组件</li>
</ul>
<h4 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h4><h5 id="action"><a href="#action" class="headerlink" title="action"></a>action</h5><ul>
<li>表示动作的对象，包含 2 个属性</li>
<li><code>type</code> ：标识属性，值为字符串，唯一，必须属性</li>
<li><code>data</code> ：数据属性，类型任意，可选属性。</li>
</ul>
<p>例如：<code>&#123;type: &#39;increment&#39;, data: 2&#125;</code></p>
<h5 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h5><ul>
<li>用于初始化状态、加工状态</li>
<li>根据旧状态和 <code>action</code> 产生新状态</li>
<li>是<strong>纯函数</strong></li>
</ul>
<blockquote>
<p>纯函数：输入同样的实参，必定得到同样的输出</p>
<ul>
<li>不能改写参数数据</li>
<li>不产生副作用，如网络请求、输入输出设备（网络请求不稳定）</li>
<li>不能调用 <code>Date.now()</code> 、<code>Math.random()</code> 等不纯方法</li>
</ul>
</blockquote>
<h5 id="store"><a href="#store" class="headerlink" title="store"></a>store</h5><ul>
<li>Redux 核心对象，内部维护着 <code>state</code> 和 <code>reducer</code></li>
<li>核心 API<ul>
<li><code>store.getState()</code> ：获取状态</li>
<li><code>store.dispatch(action)</code> ：分发任务，触发 <code>reducer</code> 调用，产生新状态</li>
<li><code>store.subscribe(func)</code> ：注册监听函数，当状态改变自动调用</li>
</ul>
</li>
</ul>
<h4 id="求和案例"><a href="#求和案例" class="headerlink" title="求和案例"></a>求和案例</h4><ul>
<li>安装 Redux Toolkit 和 Redux</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install @reduxjs/toolkit react-redux</span><br></pre></td></tr></table></figure>

<ul>
<li>App.jsx</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Count</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Count&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Count</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>index.js</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./redux/store&#x27;</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line"><span class="comment">// 订阅Redux store，每次state变化时重新渲染App组件</span></span><br><span class="line">store.<span class="title function_">subscribe</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  root.<span class="title function_">render</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 初始渲染App组件</span></span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>redux&#x2F;constant.js 定义常量</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 改模块用于定义 action 对象的 type 类型常量值，不要直接修改该文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">INCREMENT</span> = <span class="string">&#x27;increment&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">DECREMENT</span> = <span class="string">&#x27;decrement&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>count_action.js</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">INCREMENT</span>, <span class="variable constant_">DECREMENT</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./constant&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createIncrementAction</span> = (<span class="params">data</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">type</span>:<span class="variable constant_">INCREMENT</span>,data&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createDecrementAction</span> = (<span class="params">data</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">type</span>:<span class="variable constant_">DECREMENT</span>,data&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>redux&#x2F;count_reducer.js</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该文件是用于创建一个为Count组件服务的reducer，reducer的本质是一个函数</span></span><br><span class="line"><span class="comment"> * reducer函数会接到两个参数，分别为：之前的状态(preState)，动作对象(action)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">INCREMENT</span>, <span class="variable constant_">DECREMENT</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./constant&#x27;</span></span><br><span class="line"><span class="keyword">const</span> initState = <span class="number">0</span> <span class="comment">// 初始化状态</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">countReducer</span>(<span class="params">preState=initState,action</span>)&#123;</span><br><span class="line">  <span class="comment">// 从action对象中获取：type、data</span></span><br><span class="line">  <span class="keyword">const</span> &#123;type,data&#125; = action</span><br><span class="line">  <span class="comment">// 根据type决定如何加工数据</span></span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">INCREMENT</span>:</span><br><span class="line">      <span class="keyword">return</span> preState + data</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">DECREMENT</span>:</span><br><span class="line">      <span class="keyword">return</span> preState - data</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> preState</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>redux&#x2F;store.js</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该文件专门用于暴露一个 store对象，整个应用只有一个store对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 使用 configureStore 来创建 Redux store</span></span><br><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span>;</span><br><span class="line"><span class="comment">// 引入 为 count 服务 reducer</span></span><br><span class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">&#x27;./count_reducer&#x27;</span></span><br><span class="line"><span class="comment">// 暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">    <span class="attr">reducer</span>: countReducer</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>components&#x2F;Count&#x2F;index.jsx</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// 引入 store 用于获取状redux中管理的状态</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;../../redux/store&#x27;</span></span><br><span class="line"><span class="comment">// 引入 actionCreator 专门用于创建 action 对象</span></span><br><span class="line"><span class="keyword">import</span> &#123;createIncrementAction,createDecrementAction&#125; <span class="keyword">from</span> <span class="string">&#x27;../../redux/count_action&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Count</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="comment">// 可在组件单独监听 Redux 状态变化 也可在 indx.js 中全局监听</span></span><br><span class="line">    <span class="comment">// 监听redux状态的变化 调用render </span></span><br><span class="line">    <span class="comment">// componentDidMount()&#123;</span></span><br><span class="line">    <span class="comment">//     store.subscribe(()=&gt;&#123;</span></span><br><span class="line">    <span class="comment">//         this.setState(&#123;&#125;)</span></span><br><span class="line">    <span class="comment">//     &#125;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// 加法</span></span><br><span class="line">    increment = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">        <span class="comment">// 通知 redux 加</span></span><br><span class="line">        store.<span class="title function_">dispatch</span>(<span class="title function_">createIncrementAction</span>(value*<span class="number">1</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 减法</span></span><br><span class="line">    decrement  = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">        store.<span class="title function_">dispatch</span>(<span class="title function_">createDecrementAction</span>(value*<span class="number">1</span>))</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="comment">// 奇数在加</span></span><br><span class="line">    incrementIfOdd = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">        <span class="keyword">const</span> count = store.<span class="title function_">getState</span>()</span><br><span class="line">        <span class="keyword">if</span>(count % <span class="number">2</span> !== <span class="number">0</span>)&#123;</span><br><span class="line">            store.<span class="title function_">dispatch</span>(<span class="title function_">createIncrementAction</span>(value*<span class="number">1</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 异步加                    </span></span><br><span class="line">    incrementAsync = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            store.<span class="title function_">dispatch</span>(<span class="title function_">createIncrementAction</span>(value*<span class="number">1</span>))</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前求和为&#123;store.getState()&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">select</span> <span class="attr">ref</span>=<span class="string">&#123;(c)</span> =&gt;</span> (this.selectNumber = c)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.decrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementIfOdd&#125;</span>&gt;</span>奇数加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementAsync&#125;</span>&gt;</span>异步加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：</p>
<p>1.去除 Count 组件自身的状态</p>
<p>2.src下创建 redux文件夹,里面创建四个文件</p>
<ul>
<li>store.js</li>
<li>使用 configureStore 来创建 Redux store</li>
<li>configureStore 调用时 引入 为其服务的 reducer</li>
<li>暴露 store</li>
<li>count_reducer.js</li>
<li>reducer 的本质是一个函数 ,接收 preState 和 action ，返回加工后的状态</li>
<li>reducer 有两个作用：初始化状态，加工状态</li>
<li>reducer 第一次被调用时，是 store 自动触发的，传递的 preState 是 undefined，<code>action</code> 为 <code>&#123;type: &#39;@@REDUX/ININT_a.5.v.9&#39;&#125;</code> 类似的数据格式，只有 <code>type</code>，没有 <code>data</code></li>
<li>constant.js 放置 type 类型值</li>
<li>count_action.js 专门用于创建 action 对象</li>
</ul>
<p>5.在 index.js 中监测 store 中状态的变化，一旦发生变化重新渲染 组件</p>
<ul>
<li>备注：redux 只负责状态管理，至于状态的改变驱动着页面的展示，要自己渲染</li>
</ul>
</blockquote>
<h4 id="异步-action-编程"><a href="#异步-action-编程" class="headerlink" title="异步 action 编程"></a>异步 action 编程</h4><blockquote>
<p>1.延迟的动作不想交给组件自身，而是想交给 <code>action</code></p>
<p>2.当操作状态所需数据要靠异步任务返回时，可用异步 <code>action</code></p>
<p>3.创建 <code>action</code> 的函数<strong>返回一个函数</strong>，该函数中写异步任务</p>
<p>4.异步任务完成后，分发一个同步 <code>action</code> 操作状态</p>
<p>5.异步 <code>action</code> 不是必要的，完全可以在组件中等待异步任务结果返回在分发同步 <code>action</code></p>
</blockquote>
<p>安装中间件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i redux-thunk</span><br></pre></td></tr></table></figure>

<p><strong>在上面的求和案例基础上进行修改</strong></p>
<ul>
<li>store.js</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该文件专门用于暴露一个 store对象，整个应用只有一个store对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 使用 configureStore 来创建 Redux store</span></span><br><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span>;</span><br><span class="line"><span class="comment">// 引入 为 count 服务 reducer</span></span><br><span class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">&#x27;./count_reducer&#x27;</span></span><br><span class="line"><span class="comment">// 引入 redux-thunk 支持异步 action（不过，Redux Toolkit 已经默认集成了 thunk）</span></span><br><span class="line"><span class="comment">// import thunk from &#x27;redux-thunk&#x27;</span></span><br><span class="line"><span class="comment">// 暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">    <span class="attr">reducer</span>:countReducer, </span><br><span class="line">    <span class="comment">// 不需要手动应用 thunk，因为 Redux Toolkit 已经内建支持了</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>count_action.js</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 异步 action 就是指函数返回值是函数，异步 action 中一般都会调用同步 action</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createIncrementAsyncAction</span> = (<span class="params">data,time</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">dispatch</span>(<span class="title function_">createIncrementAction</span>(data))</span><br><span class="line">        &#125;,time)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Count.jsx</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createIncrementAction,createDecrementAction,createIncrementAsyncAction&#125; <span class="keyword">from</span> <span class="string">&#x27;../../redux/count_action&#x27;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步加                    </span></span><br><span class="line">incrementAsync = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">    <span class="comment">// setTimeout(()=&gt;&#123;</span></span><br><span class="line">    store.<span class="title function_">dispatch</span>(<span class="title function_">createIncrementAsyncAction</span>(value*<span class="number">1</span>,<span class="number">1000</span>))</span><br><span class="line">    <span class="comment">// &#125;,1000)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h3><img src="/img/071.png" />

<p>React-Redux 将组件分为两类：</p>
<ul>
<li>UI 组件<ul>
<li>只负责 UI 呈现，不带有业务逻辑</li>
<li>通过 <code>props</code> 接收数据</li>
<li>不能使用 Redux 的 API</li>
<li>保存在 <code>components</code> 文件夹下</li>
</ul>
</li>
<li>容器组件<ul>
<li>负责管理数据和业务逻辑，和 Redux 通信，将结果交给 UI 组件</li>
<li>可使用 Redux 的 API</li>
<li>保存在 <code>containers</code> 文件夹下</li>
</ul>
</li>
</ul>
<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><ul>
<li>安装 react-redux：<code>npm i react-redux</code></li>
<li><code>connect()()</code> ：创建容器组件</li>
<li><code>mapStateToProps(state)</code> ：映射状态为 UI 组件标签属性，即给UI 组件传递状态，返回值是一个对象</li>
<li><code>mapDispatchToProps(dispatch)</code> ：给UI 组件传递操作状态的方法，返回值是一个对象</li>
<li>容器组件中的 <code>store</code> 是靠 <code>props</code> 传进去，而不是在容器组件中直接引入</li>
</ul>
<p>【案例】</p>
<blockquote>
<p>Count 容器组件</p>
<p>containers&#x2F;Count&#x2F;index.jsx</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 Count 的 UI 组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">CountUI</span> <span class="keyword">from</span> <span class="string">&quot;../../components/Count&quot;</span>;</span><br><span class="line"><span class="comment">// 引入 react-redux 的 connect 方法 用于连接 UI 组件 和 redux</span></span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;createDecrementAction,createIncrementAction,createIncrementAsyncAction&#125; <span class="keyword">from</span> <span class="string">&#x27;../../redux/count_action&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// mapStateToProps 函数返回的对象中的 key 值会作为 UI 组件的属性 props 传递给 CountUI，key 值是状态值，value 值是状态值对应的值</span></span><br><span class="line"><span class="comment">//  传递状态</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapStateToProps</span> = (<span class="params">state</span>)=&gt;&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">count</span>: state,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// mapDispatchToProps 函数返回一个对象，对象中的key值会作为UI组件的属性传递给CountUI，value值是函数，函数返回值会作为UI组件的属性传递给CountUI</span></span><br><span class="line"><span class="comment">//  操作状态的方法</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapDispatchToProps</span> = (<span class="params">dispatch</span>)=&gt;&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">add</span>: <span class="function">(<span class="params">number</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 通知 redux 执行加法</span></span><br><span class="line">      <span class="title function_">dispatch</span>(<span class="title function_">createIncrementAction</span>(number))</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">sub</span>: <span class="function">(<span class="params">number</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 通知 redux 执行减法</span></span><br><span class="line">      <span class="title function_">dispatch</span>(<span class="title function_">createDecrementAction</span>(number))</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">addAsync</span>: <span class="function">(<span class="params">number,time</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 通知 redux 执行异步加法</span></span><br><span class="line">      <span class="title function_">dispatch</span>(<span class="title function_">createIncrementAsyncAction</span>(number,time))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 connect()() 创建容器组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CountContainer</span> = <span class="title function_">connect</span>(mapStateToProps,mapDispatchToProps)(<span class="title class_">CountUI</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露出容器组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">CountContainer</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>App.jsx</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Count</span> <span class="keyword">from</span> <span class="string">&#x27;./containers/Count&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./redux/store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 给容器组件传递store */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Count</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Count UI 组件</p>
<p>components&#x2F;Count&#x2F;index.jsx</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Count</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">       <span class="comment">// 加法</span></span><br><span class="line">    increment = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">add</span>(value*<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 减法</span></span><br><span class="line">    decrement  = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">sub</span>(value*<span class="number">1</span>)</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="comment">// 奇数在加</span></span><br><span class="line">    incrementIfOdd = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">count</span> % <span class="number">2</span> !== <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">add</span>(value*<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 异步加                    </span></span><br><span class="line">    incrementAsync = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">addAsync</span>(value*<span class="number">1</span>,<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(this.props)</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前求和为：&#123;this.props.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">select</span> <span class="attr">ref</span>=<span class="string">&#123;(c)</span> =&gt;</span> (this.selectNumber = c)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.decrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementIfOdd&#125;</span>&gt;</span>奇数加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementAsync&#125;</span>&gt;</span>异步加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="优化简写"><a href="#优化简写" class="headerlink" title="优化简写"></a>优化简写</h4><blockquote>
<p><code>mapDispatchToProps</code> 可以写成对象形式，React-Redux 底层会自动分发dispatch</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数写法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(</span><br><span class="line">  <span class="function"><span class="params">state</span> =&gt;</span> (&#123;<span class="attr">count</span>:state&#125;),</span><br><span class="line">  <span class="function"><span class="params">dispatch</span> =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">add</span>: <span class="function"><span class="params">number</span> =&gt;</span> <span class="title function_">dispatch</span>(<span class="title function_">createIncrementAction</span>(number)),</span><br><span class="line">    <span class="attr">sub</span>: <span class="function"><span class="params">number</span> =&gt;</span> <span class="title function_">dispatch</span>(<span class="title function_">createDecrementAction</span>(number)),</span><br><span class="line">    <span class="attr">addAsync</span>: <span class="function">(<span class="params">number,time</span>) =&gt;</span> <span class="title function_">dispatch</span>(<span class="title function_">createIncrementAsyncAction</span>(number,time)),</span><br><span class="line">  &#125;)</span><br><span class="line">)(<span class="title class_">CountUI</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象写法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(</span><br><span class="line">  <span class="function"><span class="params">state</span> =&gt;</span> (&#123; <span class="attr">count</span>: state &#125;),</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">add</span>: createIncrementAction,</span><br><span class="line">    <span class="attr">sub</span>: createDecrementAction,</span><br><span class="line">    <span class="attr">addAsync</span>: createIncrementAsyncAction,</span><br><span class="line">  &#125;</span><br><span class="line">)(<span class="title class_">CountUI</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>React-Redux 容器组件可以自动监测 Redux 状态变化，因此 <code>index.js</code> 不需要手动监听</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注释掉或者删掉不需要了</span></span><br><span class="line"><span class="comment">// 订阅Redux store，每次state变化时重新渲染App组件</span></span><br><span class="line">store.<span class="title function_">subscribe</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  root.<span class="title function_">render</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>Provider</code> 组件的使用：在入口文件 <code>index.js</code> 中配置让所有组件都能获得状态数据，不必一个一个传递</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./redux/store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Provider</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始渲染App组件</span></span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将容器组件和 UI 组件整合为一个文件</p>
</blockquote>
<ul>
<li>直接删除UI组件components</li>
<li>默认暴露容器组件，UI 组件不需要暴露</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 react-redux 的 connect 方法 用于连接 UI 组件 和 redux</span></span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;createDecrementAction,createIncrementAction,createIncrementAsyncAction&#125; <span class="keyword">from</span> <span class="string">&#x27;../../redux/count_action&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 UI 组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Count</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 connect()() 创建容器组件</span></span><br><span class="line"><span class="comment">// 暴露出容器组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(</span><br><span class="line">  <span class="function"><span class="params">state</span>=&gt;</span>(&#123;<span class="attr">count</span>: state&#125;),</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">add</span>: createIncrementAction,</span><br><span class="line">    <span class="attr">sub</span>: createDecrementAction,</span><br><span class="line">    <span class="attr">addAsync</span>: createIncrementAsyncAction</span><br><span class="line">  &#125;</span><br><span class="line">)(<span class="title class_">Count</span>)</span><br></pre></td></tr></table></figure>

<h4 id="多组件数据共享"><a href="#多组件数据共享" class="headerlink" title="多组件数据共享"></a>多组件数据共享</h4><blockquote>
<p>首先规范化文件结构，容器组件和 UI 组件合为一体后放在 <code>containers</code> 文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redux` 文件夹新建 `actions` 和 `reducers` 文件夹分别用于存放每个组件对应的 `action` 和 `reducer</span><br></pre></td></tr></table></figure>
</blockquote>
<p>新建 <code>Person</code> 组件对应的 <code>action</code> 和 <code>reducer</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// redux/actions/person.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">ADD_PERSON</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;../constant&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建action对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createAddPersonAction</span> = (<span class="params">personObj</span>) =&gt; (&#123;<span class="attr">type</span>:<span class="variable constant_">ADD_PERSON</span>,<span class="attr">data</span>:personObj&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// redux/reducers/person.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">ADD_PERSON</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;../constant&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initState = [&#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;]</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">personReducer</span>(<span class="params">preState=initState,action</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;type,data&#125; = action</span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">ADD_PERSON</span>:</span><br><span class="line">      <span class="keyword">return</span> [data,...preState]</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> preState</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>重点</strong>：在 <code>store.js</code> 中使用 <code>combineReducers()</code> 整合多个 <code>reducer</code> 来创建 <code>store</code> 对象</p>
<p>这样 Redux 中就会以对象的形式存储着每个组件的数据 类似于这样</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  count: 0, // Count 组件的数据</span><br><span class="line">  person: []  // Person 组件的数据</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// redux/store.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 configureStore 来创建 Redux store</span></span><br><span class="line"><span class="keyword">import</span> &#123; configureStore,combineReducers &#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span>;</span><br><span class="line"><span class="comment">// 引入 为 count 服务 reducer</span></span><br><span class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">&#x27;../redux/reducers/count&#x27;</span></span><br><span class="line"><span class="comment">// 引入 为 person 服务 reducer</span></span><br><span class="line"><span class="keyword">import</span> personReducer <span class="keyword">from</span> <span class="string">&#x27;../redux/reducers/person&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关键代码！！！</span></span><br><span class="line"><span class="keyword">const</span> allReducer = <span class="title function_">combineReducers</span>(&#123;</span><br><span class="line">  <span class="attr">count</span>:countReducer,</span><br><span class="line">  <span class="attr">persons</span>:personReducer</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">    <span class="attr">reducer</span>:allReducer, </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在 <code>Person</code> 组件中获取 Redux 保存的状态</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; nanoid &#125; <span class="keyword">from</span> <span class="string">&#x27;nanoid&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createAddPersonAction &#125; <span class="keyword">from</span> <span class="string">&#x27;../../redux/actions/person&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  addPerson = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> name = <span class="variable language_">this</span>.<span class="property">nameNode</span>.<span class="property">value</span></span><br><span class="line">        <span class="keyword">const</span> age = <span class="variable language_">this</span>.<span class="property">ageNode</span>.<span class="property">value</span></span><br><span class="line">        <span class="keyword">const</span> personObj = &#123;<span class="attr">id</span>:<span class="title function_">nanoid</span>(),name,age&#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">addPerson</span>(personObj)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">nameNode</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ageNode</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 这里的值是 this.props.sum 就是下面 state 里面的 sum */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是Person组件,Count组件求和为：&#123;this.props.sum&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;(c)</span> =&gt;</span> (this.nameNode = c)&#125; type=&quot;text&quot; placeholder=&#x27;输入名字&#x27; /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;(c)</span> =&gt;</span> (this.ageNode = c)&#125; type=&quot;text&quot; placeholder=&#x27;输入年龄&#x27; /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addPerson&#125;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;</span></span><br><span class="line"><span class="language-xml">            this.props.person.map((item) =&gt;&#123;</span></span><br><span class="line"><span class="language-xml">              return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span>&#123;item.name&#125;-&#123;item.age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#125;)</span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(</span><br><span class="line">  <span class="comment">// state 是 Redux 保存的状态对象</span></span><br><span class="line">  <span class="comment">// 容器组件从 Redux 中取出需要的状态，并传递给 UI 组件</span></span><br><span class="line">  <span class="comment">// 这里的 state.persons 和 state.count, 就是 store.js 里面 combineReducers 整合的 Reducer</span></span><br><span class="line">  <span class="function"><span class="params">state</span> =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">person</span>:state.<span class="property">persons</span>,</span><br><span class="line">    <span class="attr">sum</span>:state.<span class="property">count</span></span><br><span class="line">  &#125;), <span class="comment">//映射state.person</span></span><br><span class="line">  &#123;<span class="attr">addPerson</span>:createAddPersonAction&#125;</span><br><span class="line">)(<span class="title class_">Person</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：</p>
<p>1.定义一个 Person 组件和 Count 组件共享数据</p>
<p>2.为 Person 组件编写 reducer、action 文件 再配置 constant 常量</p>
<p>3.Person 的 Reducer 和 Count 的 Reducer 要使用 combineReducers 进行合并，合并后的总状态是一个对象</p>
<p>4.交给 store 的是一个 总reducer</p>
</blockquote>
<h4 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h4><p>概念：输入同样的参数（实参），返回同样的输出</p>
<p>必须遵守以下一些约束</p>
<ul>
<li>不能修改参数数据</li>
<li>不产生任何副作用，如网络请求、输入和输出设备</li>
<li>不能调用 <code>Date.now()</code> 或 <code>Math.random()</code> 等不纯的方法</li>
</ul>
<p><code>reducer</code> 的函数必须是纯函数</p>
<h4 id="redux开发工具"><a href="#redux开发工具" class="headerlink" title="redux开发工具"></a>redux开发工具</h4><ul>
<li>Chrome 安装 Redux DevTools 开发者工具</li>
</ul>
<h4 id="项目打包上线"><a href="#项目打包上线" class="headerlink" title="项目打包上线"></a>项目打包上线</h4><p>在项目 全局安装 npm i serve -g</p>
<p>使用 serve build 启动</p>
<h3 id="react扩展"><a href="#react扩展" class="headerlink" title="react扩展"></a>react扩展</h3><h4 id="setState-更新状态的两种写法"><a href="#setState-更新状态的两种写法" class="headerlink" title="setState 更新状态的两种写法"></a>setState 更新状态的两种写法</h4><p>对象式：<code>setState(stateChange, [callback])</code></p>
<ul>
<li><code>stateChange</code> 为状态改变对象(该对象可以体现出状态的更改)</li>
<li><code>callback</code> 是可选的回调函数, 它在状态更新完毕、界面也更新后（render之后调用）才被调用</li>
<li>【示例】</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">export default class Demo extends Component &#123;</span><br><span class="line">    state = &#123;count:0&#125;</span><br><span class="line">    add = () =&gt; &#123;</span><br><span class="line">        // 对象式的setState</span><br><span class="line">        const &#123;count&#125; = this.state</span><br><span class="line">        this.setState(&#123;count:count+1&#125;,()=&gt;&#123;</span><br><span class="line">            // callback函数 如果要查看更新之后的状态 那么可写 反之可不写</span><br><span class="line">            console.log(&#x27;count&#x27;,this.state.count)</span><br><span class="line">        &#125;)</span><br><span class="line">        console.log(&#x27;count&#x27;,this.state.count)</span><br><span class="line">    &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;当前求和为：&#123;this.state.count&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button onClick=&#123;this.add&#125;&gt;点我+1&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数式：<code>setState(updater, [callback])</code></p>
<ul>
<li>updater 为返回 stateChange 对象的函数。</li>
<li>updater 可以接收到 state 和 props</li>
<li>callback 是可选的回调函数, 它在状态更新完毕、界面也更新后（render之后调用）才被调用</li>
<li>【示例】</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">state = &#123;count:0&#125;</span><br><span class="line">add = () =&gt; &#123;</span><br><span class="line">    // 函数式的setState</span><br><span class="line">    //自动获取到state,props 不用跟手动获取  如果没有传递 props 这里也可以不写</span><br><span class="line">    this.setState((state,props)=&gt;&#123;</span><br><span class="line">        return &#123;count:state.count+1&#125;</span><br><span class="line">    &#125;,()=&gt;&#123;</span><br><span class="line">        // callback函数 如果要查看更新之后的状态 那么可写 反之可不写</span><br><span class="line">        console.log(&#x27;count&#x27;,this.state.count)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：</p>
<p>React 状态更新是异步的。代码打印的 <code>count</code> 值是上一次的值，而非更新后的 ，可在第二个参数回调中获取更新后的状态</p>
<p>对象式写法可以看做函数式写法的语法糖</p>
</blockquote>
<h4 id="路由组件懒加载-lazyLoad"><a href="#路由组件懒加载-lazyLoad" class="headerlink" title="路由组件懒加载 lazyLoad"></a>路由组件懒加载 lazyLoad</h4><ul>
<li><code>Suspense</code> 会在懒加载的组件加载完成之前显示一个 <code>Loading</code> 组件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React,&#123;Component,lazy,Suspense  &#125; from &#x27;react&#x27;;</span><br><span class="line">import &#123;NavLink,Route,Switch &#125; from &#x27;react-router-dom&#x27;</span><br><span class="line"></span><br><span class="line">import Loading from &#x27;./Loading&#x27;</span><br><span class="line">// 懒加载</span><br><span class="line">const About = lazy(()=&gt;import(&#x27;./About&#x27;))</span><br><span class="line">const Home = lazy(()=&gt;import(&#x27;./Home&#x27;))</span><br><span class="line"></span><br><span class="line">export default class Demo extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div className=&quot;row&quot;&gt;</span><br><span class="line">          &lt;div className=&quot;col-xs-offset-2 col-xs-8&quot;&gt;</span><br><span class="line">              &lt;h2&gt;react router dom lazyload&lt;/h2&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div className=&quot;row&quot;&gt;</span><br><span class="line">          &lt;div className=&quot;col-xs-2 col-xs-offset-2&quot;&gt;</span><br><span class="line">            &lt;div className=&quot;list-group&quot;&gt;</span><br><span class="line">                &lt;NavLink className=&quot;list-group-item&quot; to = &quot;/home&quot; &gt;Home&lt;/NavLink&gt;</span><br><span class="line">                &lt;NavLink className=&quot;list-group-item&quot; to = &quot;/about&quot; &gt;About&lt;/NavLink&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div className=&quot;col-xs-6&quot;&gt;</span><br><span class="line">            &lt;div className=&quot;panel&quot;&gt;</span><br><span class="line">              &lt;div className=&quot;panel-body&quot;&gt;</span><br><span class="line">                  &#123;/* 使用 Suspense 包裹懒加载组件，显示加载状态 */&#125;</span><br><span class="line">                  &#123;/* 通过 &lt;Suspense&gt; 指定在加载得到路由打包文件前显示一个自定义 Loading 界面 */&#125;</span><br><span class="line">                  &lt;Suspense fallback=&#123;&lt;Loading /&gt;&#125;&gt;</span><br><span class="line">                    &lt;Switch&gt;</span><br><span class="line">                      &lt;Route path=&quot;/about&quot; component=&#123;About &#125; /&gt;</span><br><span class="line">                      &lt;Route path=&quot;/home&quot; component=&#123;Home &#125; /&gt;</span><br><span class="line">                    &lt;/Switch&gt;</span><br><span class="line">                  &lt;/Suspense&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="React-Hook"><a href="#React-Hook" class="headerlink" title="React Hook"></a>React Hook</h4><blockquote>
<p>Hook 是 React 16.8.0 增加的新特性，让我们能在函数式组件中使用 <code>state</code> 和其他特性</p>
</blockquote>
<h5 id="State-Hook"><a href="#State-Hook" class="headerlink" title="State Hook"></a>State Hook</h5><ul>
<li><code>State Hook</code> 让函数式组件也可拥有 <code>state</code> 状态</li>
<li>语法：<code>const [Xxx, setXxx] = React.useState(initValue)</code></li>
<li><code>useState()</code> 参数：状态初始化值；返回值：包含 2 个元素的数组，分别为状态值和状态更新函数</li>
<li><code>setXxx()</code> 的 2 种用法：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setXxx(newValue)</span><br><span class="line">setXxx(value =&gt; newValue)</span><br></pre></td></tr></table></figure>

<p>【案例】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function StateHook()&#123;</span><br><span class="line">    const [count,setCount] = React.useState(0) </span><br><span class="line">    // 点我+1的回调</span><br><span class="line">    function add()&#123;</span><br><span class="line">        // 第一种写法</span><br><span class="line">        // setCount(prevCount+1) </span><br><span class="line">        // 第二种写法</span><br><span class="line">        setCount(prevCount =&gt; prevCount + 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;当前求和：&#123;count&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button onClick=&#123;add&#125;&gt;点我+1&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line">export default StateHook</span><br></pre></td></tr></table></figure>

<h5 id="Effect-Hook"><a href="#Effect-Hook" class="headerlink" title="Effect Hook"></a>Effect Hook</h5><ul>
<li><code>Effect Hook</code> 让我们能在函数式组件中执行副作用操作（就是模拟生命周期钩子）</li>
<li>副作用操作：发送 Ajax 请求、定时器、手动更改真实 DOM</li>
<li><code>Effect Hook</code> 可以模拟三个钩子：<code>componentDidMount</code>、<code>componentDidUpdate</code>、<code>componentWillUnmount</code></li>
<li><code>React.useEffect</code> 第一个参数 <code>return</code> 的函数相当于 <code>componentWillUnmount</code> ，若有多个会按顺序执行</li>
<li>语法说明：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 语法</span><br><span class="line">React.useEffect(()=&gt;&#123;</span><br><span class="line">    ...</span><br><span class="line">    // 自此可以执行任何带副作用的操作 </span><br><span class="line">    return () =&gt; &#123;  // 在组件卸载前执行 即 componentWillUnmount 钩子</span><br><span class="line">        // 做一些收尾工作 比如清除定时器，取消订阅</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,[stateValue]) // 如果指定的是[]，回调函数只会在第一次render()后执行 即 componentDidMount 钩子</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 模拟 componentDidMount</span><br><span class="line">// 第二个参数数组为空，表示不监听任何状态的更新</span><br><span class="line">// 因此只有页面首次渲染会执行输出</span><br><span class="line">React.useEffect(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;componentDidMount&#x27;)</span><br><span class="line">  return () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;1&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [])</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">// 模拟全部状态 componentDidUpdate</span><br><span class="line">// 若第二个参数不写，表示监听所有状态的更新</span><br><span class="line">React.useEffect(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;All componentDidUpdate&#x27;)</span><br><span class="line">  return () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;2&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">// 模拟部分状态 componentDidUpdate</span><br><span class="line">// 第二个参数数组写上状态，表示只监听这些状态的更新</span><br><span class="line">React.useEffect(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;Part componentDidUpdate&#x27;)</span><br><span class="line">  return () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;3&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [count, name])    // 指监听 count, name 状态的更新</span><br></pre></td></tr></table></figure>

<p>【案例】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function EffectHook()&#123;</span><br><span class="line">    const [count,setCount] = React.useState(0)</span><br><span class="line"></span><br><span class="line">    const [isMounted, setIsMounted] = React.useState(true); // 控制组件是否挂载</span><br><span class="line"></span><br><span class="line">    React.useEffect(()=&gt;&#123;</span><br><span class="line">        if (!isMounted) return; // 如果组件已卸载，跳出</span><br><span class="line"></span><br><span class="line">        // 创建定时器并返回清除定时器的函数</span><br><span class="line">        const timer = setInterval(() =&gt; &#123;</span><br><span class="line">            setCount((prevCount) =&gt; prevCount + 1);</span><br><span class="line">          &#125;, 1000);</span><br><span class="line"></span><br><span class="line">        // 清除定时器，防止内存泄漏</span><br><span class="line">        return () =&gt; clearInterval(timer);</span><br><span class="line"></span><br><span class="line">    &#125;,[isMounted]) // 依赖 isMounted，确保组件卸载时清除定时器</span><br><span class="line"></span><br><span class="line">     // 卸载组件</span><br><span class="line">    function unmount() &#123;</span><br><span class="line">        setIsMounted(false); // 设置为 false，组件将被卸载</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!isMounted) return null; // 如果组件已卸载，返回 null，不渲染组件</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;当前求和：&#123;count&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button onClick=&#123;unmount&#125;&gt;卸载组件&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line">export default EffectHook</span><br></pre></td></tr></table></figure>

<h5 id="Ref-Hook"><a href="#Ref-Hook" class="headerlink" title="Ref Hook"></a>Ref Hook</h5><ul>
<li><code>Ref Hook</code> 可以在函数式组件存储或查找组件内的标签或其他数据</li>
<li>语法：<code>const refContainer = React.useRef()</code></li>
<li>作用：保存标签对象的容器，功能和 <code>React.createRef()</code> 类似</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">export default function RefHook() &#123;</span><br><span class="line">  const myRef = React.useRef()</span><br><span class="line">  const submit = () =&gt; console.log(&#x27;myRef.current.value&#x27;, myRef.current.value)</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot;  ref=&#123;myRef&#125;/&gt;</span><br><span class="line">        &lt;button onClick=&#123;submit&#125;&gt;提交&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h5><ul>
<li><code>Fragment</code> 标签本身不会被渲染成一个真实 DOM 标签，有点像 Vue 的 <code>template</code> 标签</li>
<li>用 <code>空标签</code> 也有相同效果，但是空标签不能传递任何属性，<code>Fragment</code> 标签可以传递 <code>key</code> 属性，遍历时候可用</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component, Fragment &#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">export default class Demo extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;Fragment key=&#123;1&#125;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; /&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; /&gt;</span><br><span class="line">      &lt;/Fragment&gt;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    // 或</span><br><span class="line">    return (</span><br><span class="line">      &lt;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; /&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; /&gt;</span><br><span class="line">      &lt;/&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>App.js渲染的时候也有一个</p>
<p>标签也可以改成标签</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component,Fragment &#125; from &#x27;react&#x27;</span><br><span class="line">import Demo from &#x27;./components/05_Context&#x27;</span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;Fragment&gt;</span><br><span class="line">        &lt;Demo/&gt;</span><br><span class="line">      &lt;/Fragment&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Context-了解"><a href="#Context-了解" class="headerlink" title="Context (了解)"></a>Context (了解)</h5><ul>
<li>Context 是一种组件间通信方式，常用于 <code>祖组件</code> 与 <code>后代组件</code></li>
<li>实际开发一般不用，一般用 React-Redux</li>
<li>用法说明：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) 创建Context容器对象：</span><br><span class="line">const XxxContext = React.createContext()</span><br><span class="line"></span><br><span class="line">2) 渲染子组时，外面包裹xxxContext.Provider, 通过value属性给后代组件传递数据：</span><br><span class="line">&lt;XxxContext.Provider value=&#123;数据&#125;&gt;</span><br><span class="line">  子组件</span><br><span class="line">&lt;/XxxContext.Provider&gt;</span><br><span class="line"></span><br><span class="line">3) 后代组件读取数据：</span><br><span class="line"></span><br><span class="line">// 第一种方式：仅适用于类组件</span><br><span class="line">// 声明接收context</span><br><span class="line">static contextType = xxxContext</span><br><span class="line">// 读取context中的value数据</span><br><span class="line">this.context</span><br><span class="line"></span><br><span class="line">//第二种方式: 可用于函数组件与类组件</span><br><span class="line">&lt;XxxContext.Consumer&gt;</span><br><span class="line">  &#123;</span><br><span class="line">    // value就是context中的value数据</span><br><span class="line">    value =&gt; (</span><br><span class="line">      ...</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/XxxContext.Consumer&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>【案例】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">const MyContext = React.createContext()</span><br><span class="line">const &#123; Provider, Consumer &#125; = MyContext</span><br><span class="line"></span><br><span class="line">export default class Demo extends Component &#123;</span><br><span class="line">    state = &#123; username: &#x27;tom&#x27;, age: 18 &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123; username, age &#125; = this.state</span><br><span class="line">    return (</span><br><span class="line">        </span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        Demo组件</span><br><span class="line">        &lt;h2&gt;用户名是:&#123;username&#125;，年龄是：&#123;age&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;Provider value=&#123;&#123; username, age &#125;&#125;&gt;</span><br><span class="line">            &lt;Demo_1 /&gt;</span><br><span class="line">        &lt;/Provider&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Demo_1 extends Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          Demo_1组件</span><br><span class="line">          &lt;Demo_2 /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 类式组件</span><br><span class="line">/* class Demo_2 extends Component &#123;</span><br><span class="line">    static contextType = MyContext</span><br><span class="line">    render() &#123;</span><br><span class="line">    const &#123; username, age &#125; = this.context</span><br><span class="line">      return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          Demo_2组件</span><br><span class="line">          &lt;h4&gt;</span><br><span class="line">            从Demo组件接收到的用户名:&#123;username&#125;,年龄:&#123;age&#125;</span><br><span class="line">          &lt;/h4&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">&#125; */</span><br><span class="line"></span><br><span class="line">// 函数式组件</span><br><span class="line">function Demo_2() &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h3&gt;我是Demo_2组件&lt;/h3&gt;</span><br><span class="line">            &lt;h4&gt;</span><br><span class="line">                从Demo组件接收到的用户名:</span><br><span class="line">                &lt;Consumer&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        (value) =&gt; &#123;</span><br><span class="line">                            console.log(value)</span><br><span class="line">                            return `$&#123;value.username&#125;,年龄是$&#123;value.age&#125;`</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &lt;/Consumer&gt;</span><br><span class="line">            &lt;/h4&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="组件渲染优化"><a href="#组件渲染优化" class="headerlink" title="组件渲染优化"></a>组件渲染优化</h5><p>Component的两个问题：</p>
<ul>
<li>只要调用 <code>setState()</code> ，即使没有修改状态，组件也会重新 <code>render()</code></li>
<li>只要父组件重新渲染，即使子组件没有使用父组件的状态，也会重新 <code>render()</code></li>
</ul>
<p>原因：</p>
<ul>
<li><code>shouldComponentUpdate()</code> 钩子默认总是返回 <code>true</code></li>
</ul>
<p>修改方法：</p>
<ul>
<li>手动重写 <code>shouldComponentUpdate(nextProps, nextState)</code> 的逻辑，只有数据发生改变才返回 <code>true</code></li>
<li>使用 <code>PureComponent</code> ，它重写了 <code>shouldComponentUpdate()</code> ， 只有 <code>state</code> 或 <code>props</code> 数据有变化才返回 <code>true</code></li>
</ul>
<blockquote>
<p>注意：</p>
<ul>
<li><code>PureComponent</code> 它只是进行 <code>state</code> 和 <code>props</code> 数据的 <code>浅比较</code> , 如果只是数据对象内部数据变了, 返回 <code>false</code>。即对于引用数据类型，比较的是地址引用</li>
<li>不要直接修改 <code>state</code> 数据, 而是要产生新数据</li>
</ul>
</blockquote>
<p>【案例】	</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; PureComponent  &#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">export default class Demo extends PureComponent  &#123;</span><br><span class="line">    state = &#123;stu:[&#x27;小明&#x27;,&#x27;小红&#x27;]&#125;</span><br><span class="line">    addStu = () =&gt;&#123;</span><br><span class="line">        const &#123;stu&#125; = this.state</span><br><span class="line">        this.setState(&#123;stu:[&#x27;小刘&#x27;,...stu]&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123;stu&#125; = this.state</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        展示数据：&#123;stu&#125;</span><br><span class="line">        &lt;button onClick=&#123;this.addStu&#125;&gt;添加小刘&lt;/button&gt;</span><br><span class="line">        &lt;Demo_1/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Demo_1 extends PureComponent  &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            Demo_1</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="render-props-插槽"><a href="#render-props-插槽" class="headerlink" title="render props (插槽)"></a>render props (插槽)</h5><blockquote>
<p>类似于 Vue 中的slot插槽技术</p>
</blockquote>
<p>类似于 Vue 中的插槽技术</p>
<ul>
<li><p>Vue：slot插槽技术</p>
</li>
<li><p>React：</p>
<ul>
<li>使用 <code>children props</code>：通过组件标签体传入结构</li>
</ul>
<p>【案例】</p>
<blockquote>
<p>组件标签体内容会存储到 <code>this.props.children</code> 中</p>
<p>缺点：A 组件无法向 B 组件传递数据</p>
</blockquote>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Parent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Parent组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">A</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">B</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">A</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  state = &#123; <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span> &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>A组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.props.children&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>B组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>使用 <code>render props</code>：通过组件标签属性传入结构，可携带数据</li>
</ul>
<p>【案例】</p>
<blockquote>
<p>&lt;A render&#x3D;{(name) &#x3D;&gt; <B name={name} />} &#x2F;&gt;</p>
<p>{this.props.render(name)}</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 错误边界</span><br><span class="line">import React, &#123; Component &#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">export default class Parent extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;Parent组件&lt;/h3&gt;</span><br><span class="line">        &lt;A render=&#123;(name) =&gt; &lt;B name=&#123;name&#125; /&gt;&#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class A extends Component &#123;</span><br><span class="line">  state = &#123; name: &#x27;tom&#x27; &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123; name &#125; = this.state</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;A组件&lt;/h3&gt;</span><br><span class="line">        &#123;this.props.render(name)&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;B组件,&#123;this.props.name&#125;&lt;/h3&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="错误边界"><a href="#错误边界" class="headerlink" title="错误边界"></a>错误边界</h5><blockquote>
<p>注意：</p>
<p>错误边界(Error boundary)：用来捕获后代组件错误，渲染出备用页面</p>
<p>只在生产环境（项目上线）起效</p>
<p>特点：</p>
<p>只能捕获<strong>后代组件生命周期</strong>产生的错误，不能捕获自己组件产生的错误和其他组件在合成事件、定时器中产生的错误</p>
</blockquote>
<p>使用方式：getDerivedStateFromError 配合 componentDidCatch</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生命周期函数，一旦后台组件报错 就会触发</span></span><br><span class="line"><span class="keyword">static</span> <span class="title function_">getDerivedStateFromError</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// render 之前触发</span></span><br><span class="line">    <span class="comment">// 返回新的 state</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">hasError</span>: error &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">componentDidCatch</span>(<span class="params">error, info</span>) &#123;</span><br><span class="line">    <span class="comment">// 统计页面的错误，发送请求到后台去</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error, info)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;此处统计错误，反馈给服务器&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【案例】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &#x27;react&#x27;</span><br><span class="line">import Child from &#x27;./Child&#x27;</span><br><span class="line"></span><br><span class="line">export default class Parent extends Component &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    //用于标识子组件是否产生错误</span><br><span class="line">    hasError: &#x27;&#x27;,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 当子组件出现错误，会触发调用，并携带错误信息</span><br><span class="line">  static getDerivedStateFromError(error) &#123;</span><br><span class="line">    // render 之前触发</span><br><span class="line">    // 返回新的 state</span><br><span class="line">    return &#123; hasError: error &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 子组件产生错误时调用该钩子</span><br><span class="line">  componentDidCatch(error, info) &#123;</span><br><span class="line">    console.log(error, info)</span><br><span class="line">    console.log(&#x27;此处统计错误，反馈给服务器&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;Parent组件&lt;/h2&gt;</span><br><span class="line">        &#123;this.state.hasError ? &lt;h2&gt;网络不稳定，稍后再试&lt;/h2&gt; : &lt;Child /&gt;&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="组件通信方式总结"><a href="#组件通信方式总结" class="headerlink" title="组件通信方式总结"></a>组件通信方式总结</h5><p>组件间的关系：</p>
<ul>
<li>父子组件</li>
<li>兄弟组件</li>
<li>祖孙组件</li>
</ul>
<p>几种通信方式：</p>
<ul>
<li>props（children props、render props）</li>
<li>消息订阅-发布（pubs-sub）</li>
<li>集中式管理（redux）</li>
<li>conText</li>
</ul>
<p>推荐搭配：</p>
<ul>
<li>父子组件：props</li>
<li>兄弟组件：消息订阅-发布、集中式管理</li>
<li>祖孙组件(跨级组件)：消息订阅-发布、集中式管理、<code>conText</code>(开发用的少，封装插件用的多即 React-Redux)</li>
</ul>
<h4 id="react-router6"><a href="#react-router6" class="headerlink" title="react-router6"></a>react-router6</h4><p>官方文档：<a href="https://gitee.com/link?target=https://reactrouter.com/">https://reactrouter.com/</a></p>
<p>React Router 发布了三个不同的包到 npm 上：</p>
<ul>
<li><code>react-router</code>：路由核心库，提供许多组件、钩子</li>
<li><code>react-router-dom</code>：包括了 <code>react-router</code> 所有内容，同时添加了用于 DOM 的组件，如 <code>&lt;BrowserRouter&gt;</code></li>
<li><code>react-router-native</code>：包括了 <code>react-router</code> 所有内容，同时添加了用于 ReactNative 的 API，如 <code>&lt;NativeRouter&gt;</code></li>
</ul>
<p>与 React Router 5.x 版本的区别：</p>
<ul>
<li>内置组件的变化：移除 <code>&lt;Switch/&gt;</code>，新增 <code>&lt;Routes/&gt;</code>……</li>
<li>语法变化：<code>component=&#123;About&#125;</code> 变成 <code>element=&#123;&lt;About/&gt;&#125;</code>……</li>
<li>新增 hook：<code>useParams</code>、<code>useNavigate</code>、<code>useMatch</code>……</li>
<li><strong>官方明确表示推荐使用函数式组件</strong></li>
</ul>
<h5 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h5><p>安装 6 版本的 React Router</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install react-router-dom</span><br></pre></td></tr></table></figure>

<p>index.js 文件引入 <code>&lt;BrowserRouter&gt;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom/client&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">BrowserRouter</span>&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>App.jsx 设置路由链接和注册路由</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NavLink</span>, <span class="title class_">Routes</span>, <span class="title class_">Route</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">About</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="BrowserRouter"><a href="#BrowserRouter" class="headerlink" title="BrowserRouter"></a>BrowserRouter</h5><p><code>&lt;BrowserRouter&gt;</code> 用于包裹整个应用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom/client&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">BrowserRouter</span>&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h5 id="HashRouter"><a href="#HashRouter" class="headerlink" title="HashRouter"></a>HashRouter</h5><p>作用与 <code>&lt;BrowserRouter&gt;</code> 一样，但 <code>&lt;HashRouter&gt;</code> 修改的是地址栏的 hash 值</p>
<p>6.x 版本中 <code>&lt;HashRouter&gt;</code>、<code>&lt;BrowserRouter&gt;</code> 的用法与 5.x 相同</p>
<h5 id="Routes"><a href="#Routes" class="headerlink" title="Routes"></a>Routes</h5><p>6 版本中移出了 <code>&lt;Switch&gt;</code>，引入了新的替代者：<code>&lt;Routes&gt;</code></p>
<p><code>&lt;Routes&gt;</code> 和 <code>&lt;Route&gt;</code> 必须要配合使用，且必须要用 <code>&lt;Routes&gt;</code> 包裹 <code>&lt;Route&gt;</code>。</p>
<p><code>&lt;Route&gt;</code> 相当于一个if语句，如果其路径与当前URL匹配，则呈现其对应的组件</p>
<p><code>&lt;Route caseSensitive&gt;</code> 属性用于指定匹配时是否区分大小写（默认为 false）</p>
<p>当URL发生变化是，<code>&lt;Routes&gt;</code> 都会查看其所有子<code>&lt;Route&gt;</code> 元素以找到最佳匹配并呈现组件</p>
<p><code>&lt;Route&gt;</code> 也可以嵌套使用，而且可以配合<code>useRoutes()</code> 配置 路由表，但需要通过<code>&lt;Outlet&gt;</code>组件来渲染其子路由</p>
<h5 id="Navigate-重定向"><a href="#Navigate-重定向" class="headerlink" title="Navigate-重定向"></a>Navigate-重定向</h5><p>只要 <code>&lt;Navigate&gt;</code> 组件被渲染，就会修改路径，切换视图，可用于<code>路由重定向</code></p>
<p><code>replace</code> 属性用于控制跳转模式（push 或 replace，默认是 push）</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NavLink</span>, <span class="title class_">Routes</span>, <span class="title class_">Route</span>, <span class="title class_">Navigate</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">About</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Navigate</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [sum, setSum] = <span class="title function_">useState</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* 根据sum的值决定是否切换视图 */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;sum === 1 ? <span class="tag">&lt;<span class="name">h4</span>&gt;</span>sum的值为&#123;sum&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span> : <span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">replace</span>=<span class="string">&#123;true&#125;</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setSum(2)&#125;&gt;将sum变为 2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="NavLink-路由高亮"><a href="#NavLink-路由高亮" class="headerlink" title="NavLink 路由高亮"></a>NavLink 路由高亮</h5><p>实现导航的 <code>高亮</code> 效果，6 版本不能直接指定高亮类名，需要通过函数返回，该函数传入一个对象，类似于 <code>&#123;isActive: true&#125;</code> 标识路由是否被激活</p>
<p>默认情况下，当 <code>Home</code> 的子组件匹配成功，<code>Home</code> 的导航也会高亮，<code>end</code> 属性可移除该效果</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NavLink 默认类名是 active，下面是指定自定义类名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义样式</span></span><br><span class="line">&lt;<span class="title class_">NavLink</span></span><br><span class="line">    to=<span class="string">&quot;news&quot;</span></span><br><span class="line">    className=&#123;<span class="function">(<span class="params">&#123; isActive &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;home&#x27;</span>, isActive)</span><br><span class="line">        <span class="keyword">return</span> isActive ? <span class="string">&#x27;base MyClass&#x27;</span> : <span class="string">&#x27;base&#x27;</span></span><br><span class="line">    &#125;&#125;</span><br><span class="line">&gt;about&lt;/<span class="title class_">NavLink</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认情况下，当 Home 的子组件匹配成功，Home 的导航也会高亮</span></span><br><span class="line"><span class="comment">// 当 NavLink 上添加了 end 属性后，若 Home 的子组件匹配成功，则 Home 的导航没有高亮效果</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;home&quot;</span> <span class="attr">end</span> &gt;</span>home<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="useRoutes-路由表"><a href="#useRoutes-路由表" class="headerlink" title="useRoutes() 路由表"></a>useRoutes() 路由表</h5><p>路由规则可以单独抽出一个模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由表</span></span><br><span class="line"><span class="comment">// src/routes/index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Navigate</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">About</span> /&gt;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Home</span> /&gt;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span> /&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> routes</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入路由表</span></span><br><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NavLink</span>, useRoutes &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">&#x27;./routes&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 生成路由规则</span></span><br><span class="line">  <span class="keyword">const</span> element = <span class="title function_">useRoutes</span>(routes)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;element&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Outlet-嵌套路由"><a href="#Outlet-嵌套路由" class="headerlink" title="Outlet 嵌套路由"></a>Outlet 嵌套路由</h5><ul>
<li>嵌套路由中，需要使用 <code>&lt;Outlet&gt;</code> 设置子路由的路由出口，即在何处渲染子路由</li>
<li>设置二级路由链接时，可以是 <code>to=&quot;news&quot;</code>、<code>to=&quot;./news&quot;</code>，但不能是 <code>to=&quot;/news&quot;</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;/* 不使用路由表 */&#125;</span><br><span class="line">&lt;Routes&gt;</span><br><span class="line">    &#123;/* path属性用于定义路径，element属性用于定义当前路径所对应的组件 */&#125;</span><br><span class="line">    &lt;Route path=&quot;about&quot; element=&#123;&lt;About /&gt;&#125; /&gt;</span><br><span class="line">    &#123;/* 用于定义嵌套路由，home是一级路由，对应的路径是/home/news或者/home/message */&#125;</span><br><span class="line">    &lt;Route path=&quot;home&quot; element=&#123;&lt;Home /&gt;&#125;&gt;</span><br><span class="line">        &lt;Route path=&quot;news&quot; element=&#123;&lt;News /&gt;&#125; /&gt;</span><br><span class="line">        &lt;Route path=&quot;message&quot; element=&#123;&lt;Message /&gt;&#125; /&gt;</span><br><span class="line">    &lt;/Route&gt;</span><br><span class="line">    &#123;/* Route也可以不写element属性，这时就是用于展示嵌套路由，所对应的路径是/users/xxx */&#125;</span><br><span class="line">    &lt;Route path=&quot;users&quot;&gt;</span><br><span class="line">        &lt;Route path=&quot;xxx&quot; element=&#123;&lt;Demo /&gt;&#125; /&gt;</span><br><span class="line">    &lt;/Route&gt;</span><br><span class="line">    &#123;/* 重定向 如果路径是 http://localhost:3000 那么默认带了 / 直接跳转到 about */&#125;</span><br><span class="line">    &lt;Route path=&quot;/&quot; element=&#123;&lt;Navigate to=&quot;about&quot; /&gt;&#125; /&gt;</span><br><span class="line">&lt;/Routes&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由表</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">About</span> /&gt;</span></span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Home</span> /&gt;</span></span>,</span><br><span class="line">    <span class="comment">// 定义二级路由，注意不要加 /</span></span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">News</span> /&gt;</span></span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Message</span> /&gt;</span></span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span> /&gt;</span></span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> routes</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Home 子组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Fragment</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NavLink</span>, <span class="title class_">Outlet</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Home组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* 子路由链接 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;news&quot;</span>&gt;</span>News<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;message&quot;</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* 子路由出口 指定路由组件的展示位置 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="路由传参-1"><a href="#路由传参-1" class="headerlink" title="路由传参"></a>路由传参</h5><h6 id="传递-params-参数"><a href="#传递-params-参数" class="headerlink" title="传递 params 参数"></a>传递 params 参数</h6><p>注册路由时声明 <code>params</code> 参数，和 React Router 5 一样</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由表</span></span><br><span class="line"><span class="keyword">const</span> routes =  [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">About</span> /&gt;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Home</span> /&gt;</span></span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">          <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">News</span> /&gt;</span></span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">          <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Message</span> /&gt;</span></span>,</span><br><span class="line">          <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">path</span>: <span class="string">&#x27;detail/:id/:name/:age&#x27;</span>,</span><br><span class="line">              <span class="attr">element</span>:  <span class="language-xml"><span class="tag">&lt;<span class="name">Detail</span> /&gt;</span></span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&#x27;/about&#x27;</span> /&gt;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> routes</span><br></pre></td></tr></table></figure>

<p>传递参数</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span>, <span class="title class_">Outlet</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Message</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [<span class="title class_">Message</span>] = <span class="title function_">useState</span>(</span><br><span class="line">        [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">id</span>:<span class="number">1</span>,</span><br><span class="line">                <span class="attr">name</span>:<span class="string">&quot;A&quot;</span>,</span><br><span class="line">                <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">id</span>:<span class="number">2</span>,</span><br><span class="line">                <span class="attr">name</span>:<span class="string">&quot;B&quot;</span>,</span><br><span class="line">                <span class="attr">age</span>:<span class="number">19</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">id</span>:<span class="number">3</span>,</span><br><span class="line">                <span class="attr">name</span>:<span class="string">&quot;C&quot;</span>,</span><br><span class="line">                <span class="attr">age</span>:<span class="number">20</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;</span></span><br><span class="line"><span class="language-xml">            Message.map((item)=&gt;(</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`<span class="attr">detail</span>/$&#123;<span class="attr">item.id</span>&#125;/$&#123;<span class="attr">item.name</span>&#125;/$&#123;<span class="attr">item.age</span>&#125;`&#125; &gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            ))</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Outlet</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用 <code>useParams()</code> 接收 <code>params</code> 参数。<code>useParams()</code> 返回一个参数对象</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useParams, useMatch &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Detail</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// const params = useParams()</span></span><br><span class="line">    <span class="comment">// console.log(params)</span></span><br><span class="line">    <span class="comment">// const match = useMatch(&#x27;home/message/detail/:id/:name/:age&#x27;)</span></span><br><span class="line">    <span class="comment">// console.log(match)</span></span><br><span class="line">  <span class="comment">// 解构赋值</span></span><br><span class="line">  <span class="keyword">const</span> &#123; id, name, age &#125; = <span class="title function_">useParams</span>()</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>id:&#123;id&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>name:&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>age:&#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<h4 id="useMatch"><a href="#useMatch" class="headerlink" title="useMatch()"></a>useMatch()</h4><p>返回路由组件的 <code>match</code> 数据，即 5 版本中的 <code>match</code> 属性</p>
<p>必须传入该组件对应的路由规则才能正确返回，否则返回 <code>null</code></p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useParams, useMatch &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Detail</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> match = <span class="title function_">useMatch</span>(<span class="string">&#x27;home/message/detail/:id/:name/:age&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(match)</span><br><span class="line">  <span class="comment">// 解构赋值</span></span><br><span class="line">  <span class="keyword">const</span> &#123; id, name, age &#125; = <span class="title function_">useParams</span>()</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>id:&#123;id&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>name:&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>age:&#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* &#123;</span></span><br><span class="line"><span class="comment">    &quot;params&quot;: &#123;</span></span><br><span class="line"><span class="comment">        &quot;id&quot;: &quot;1&quot;,</span></span><br><span class="line"><span class="comment">        &quot;name&quot;: &quot;A&quot;,</span></span><br><span class="line"><span class="comment">        &quot;age&quot;: &quot;18&quot;</span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">    &quot;pathname&quot;: &quot;/home/message/detail/1/A/18&quot;,</span></span><br><span class="line"><span class="comment">    &quot;pathnameBase&quot;: &quot;/home/message/detail/1/A/18&quot;,</span></span><br><span class="line"><span class="comment">    &quot;pattern&quot;: &#123;</span></span><br><span class="line"><span class="comment">        &quot;path&quot;: &quot;home/message/detail/:id/:name/:age&quot;,</span></span><br><span class="line"><span class="comment">        &quot;caseSensitive&quot;: false,</span></span><br><span class="line"><span class="comment">        &quot;end&quot;: true</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br></pre></td></tr></table></figure>

<h6 id="传递-search-参数"><a href="#传递-search-参数" class="headerlink" title="传递 search 参数"></a>传递 search 参数</h6><p>和 5 版本一样，正常注册路由即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由表</span></span><br><span class="line"><span class="keyword">const</span> routes =  [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">About</span> /&gt;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Home</span> /&gt;</span></span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">          <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">News</span> /&gt;</span></span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">          <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Message</span> /&gt;</span></span>,</span><br><span class="line">          <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">path</span>: <span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">              <span class="attr">element</span>:  <span class="language-xml"><span class="tag">&lt;<span class="name">Detail</span> /&gt;</span></span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&#x27;/about&#x27;</span> /&gt;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> routes</span><br></pre></td></tr></table></figure>

<p>传递参数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`<span class="attr">detail</span>/?<span class="attr">id</span>=<span class="string">$&#123;item.id&#125;&amp;name</span>=<span class="string">$&#123;item.name&#125;&amp;age</span>=<span class="string">$&#123;item.age&#125;</span>`&#125; &gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用 <code>useSearchParams()</code> 接收参数。该方法返回一个包含两个元素的数组：<code>search</code> 参数和修改 <code>search</code> 参数的方法</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useSearchParams,useLocation &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Detail</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// const location = useLocation()</span></span><br><span class="line">    <span class="comment">// console.log(location)</span></span><br><span class="line">    <span class="comment">// 数组的解构赋值</span></span><br><span class="line">    <span class="keyword">const</span> [searchParams, setSearchParams] = <span class="title function_">useSearchParams</span>()</span><br><span class="line">    <span class="comment">// 需要调用 get() 方法获取对应的参数值</span></span><br><span class="line">    <span class="keyword">const</span> id = searchParams.<span class="title function_">get</span>(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> name = searchParams.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> age = searchParams.<span class="title function_">get</span>(<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line">	<span class="comment">// 更新 search params 的回调</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">change</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="title function_">setSearchParams</span>(&#123;<span class="attr">id</span>:<span class="number">4</span>,<span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 解构赋值</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>id:&#123;id&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>name:&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>age:&#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;change&#125;</span>&gt;</span>更新 search params<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="传递-state-参数"><a href="#传递-state-参数" class="headerlink" title="传递 state 参数"></a>传递 state 参数</h6><p>和 5 版本一样，正常注册路由即可 跟上面的 search 传参一样 不需要携带参数占位</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Message</span> /&gt;</span></span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">          <span class="attr">element</span>:  <span class="language-xml"><span class="tag">&lt;<span class="name">Detail</span> /&gt;</span></span>,</span><br><span class="line">        &#125;,                </span><br><span class="line">    ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>传递参数，这里相较于 5 版本有所不同，不必写到一个对象里面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;detail&quot;</span> <span class="attr">state</span>=<span class="string">&#123;&#123;id:</span> <span class="attr">item.id</span>, <span class="attr">name:</span> <span class="attr">item.name</span>, <span class="attr">age:</span> <span class="attr">item.age</span>&#125;&#125;&gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用 <code>useLocation()</code> 接收参数，该方法返回路由组件的 <code>location</code> 对象，就是 5 版本路由组件的 <code>location</code> 属性，其中包含 <code>state</code> 参数</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;useLocation&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Detail</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// const location = useLocation()</span></span><br><span class="line">  <span class="comment">// const &#123;id,name,age&#125; = location.state</span></span><br><span class="line">  <span class="comment">// 连续解构赋值</span></span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="attr">state</span>: &#123; id, name, age &#125;,</span><br><span class="line">  &#125; = <span class="title function_">useLocation</span>()</span><br><span class="line">  <span class="comment">// 解构赋值</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>id:&#123;id&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>name:&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>age:&#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="useNavigate-编程式路由导航"><a href="#useNavigate-编程式路由导航" class="headerlink" title="useNavigate() 编程式路由导航"></a>useNavigate() 编程式路由导航</h5><p><code>useNavigate()</code> 返回一个函数，调用该函数实现编程式路由导航，函数有两种参数传递方式</p>
<ul>
<li>第一种方式传递两个参数：路由和相关参数。参数只能设置 <code>replace</code> 和 <code>state</code>。<strong>想要传递 params 和 search 参数直接在路由带上</strong></li>
<li>第二种方式传递数字，代表前进或后退几步</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span>, <span class="title class_">Outlet</span>,useNavigate &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Message</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> navigate = <span class="title function_">useNavigate</span>()</span><br><span class="line">    <span class="keyword">const</span> [<span class="title class_">Message</span>] = <span class="title function_">useState</span>(</span><br><span class="line">        [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">id</span>:<span class="number">1</span>,</span><br><span class="line">                <span class="attr">name</span>:<span class="string">&quot;A&quot;</span>,</span><br><span class="line">                <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">id</span>:<span class="number">2</span>,</span><br><span class="line">                <span class="attr">name</span>:<span class="string">&quot;B&quot;</span>,</span><br><span class="line">                <span class="attr">age</span>:<span class="number">19</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">id</span>:<span class="number">3</span>,</span><br><span class="line">                <span class="attr">name</span>:<span class="string">&quot;C&quot;</span>,</span><br><span class="line">                <span class="attr">age</span>:<span class="number">20</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 第一种方式</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">showDetail</span>(<span class="params">item</span>)&#123;</span><br><span class="line">    <span class="title function_">navigate</span>(<span class="string">&#x27;detail&#x27;</span>,&#123;</span><br><span class="line">        <span class="attr">replace</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">state</span>:item</span><br><span class="line">    &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">// 第二种方式</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">back</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">navigate</span>(<span class="number">1</span>)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">forward</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">navigate</span>(-<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;</span></span><br><span class="line"><span class="language-xml">            Message.map((item)=&gt;(</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;detail&quot;</span> <span class="attr">state</span>=<span class="string">&#123;&#123;id:</span> <span class="attr">item.id</span>, <span class="attr">name:</span> <span class="attr">item.name</span>, <span class="attr">age:</span> <span class="attr">item.age</span>&#125;&#125;&gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>showDetail(item)&#125;&gt;查看详情<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;back&#125;</span>&gt;</span>后退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;forward&#125;</span>&gt;</span>前进<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            ))</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Outlet</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="useInRouterContext（了解）"><a href="#useInRouterContext（了解）" class="headerlink" title="useInRouterContext（了解）"></a>useInRouterContext（了解）</h5><p>如果组件在 <code>&lt;Router&gt;</code> 的上下文中呈现，则 <code>useInRouterContext</code> 钩子返回 <code>true</code>，否则返回 <code>false</code>，即组件有没有被包裹在 <code>&lt;BrowserRouter&gt;</code> 这种东西里面。这个对第三方组件库有用处</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom/client&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">BrowserRouter</span>&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Demo</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Demo&#x27;</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Demo</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Demo.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;useInRouterContext&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">About</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">useInRouterContext</span>())</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      Demo组件</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="useNavigationType（了解）"><a href="#useNavigationType（了解）" class="headerlink" title="useNavigationType（了解）"></a>useNavigationType（了解）</h5><p>作用：返回当前的导航类型（用户是如何来到当前页面的）</p>
<p>返回值：<code>POP</code>、<code>PUSH</code>、<code>REPLACE</code></p>
<p>注意：<code>POP</code> 是指在浏览器中直接打开了这个路由组件（<code>刷新页面</code>）</p>
<p>【案例】</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;useNavigationType&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">About</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">useNavigationType</span>())</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      About组件</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注意：</span></span><br><span class="line"><span class="comment">点击 About组件 默认就是 PUSH</span></span><br><span class="line"><span class="comment">如果开启 replace=&#123;true&#125;  &lt;NavLink to=&quot;/about&quot; replace=&#123;true&#125;&gt;About&lt;/NavLink&gt; ，就是 REPLACE</span></span><br><span class="line"><span class="comment">处于当前页面，直接刷新页面 就是 POP */</span></span><br></pre></td></tr></table></figure>

<h5 id="useOutlet（了解）"><a href="#useOutlet（了解）" class="headerlink" title="useOutlet（了解）"></a>useOutlet（了解）</h5><p>作用：用来呈现当前组件中渲染的嵌套路由</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NavLink</span>, <span class="title class_">Outlet</span>,useOutlet &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">useOutlet</span>())</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      Home组件</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;news&quot;</span>&gt;</span>News<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;message&quot;</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* 子路由出口 指定路由组件的展示位置 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果嵌套路由没有挂载,则返回 null</span></span><br><span class="line"><span class="comment">// 如果嵌套路由已经挂载,则展示嵌套的路由对象</span></span><br></pre></td></tr></table></figure>

<h5 id="useResolvedPath（了解）"><a href="#useResolvedPath（了解）" class="headerlink" title="useResolvedPath（了解）"></a>useResolvedPath（了解）</h5><p>作用：给定一个 URL 值，解析其中的：<code>path</code>、<code>search</code>、<code>hash</code> 值</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useResolvedPath &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">News</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="title function_">useResolvedPath</span>(<span class="string">&#x27;/user?id=001&amp;name=tom#React&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* &#123;</span></span><br><span class="line"><span class="comment">  &quot;pathname&quot;: &quot;/user&quot;,</span></span><br><span class="line"><span class="comment">  &quot;search&quot;: &quot;?id=001&amp;name=tom&quot;,</span></span><br><span class="line"><span class="comment">  &quot;hash&quot;: &quot;#React&quot;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Butterfly的Front-matter</title>
    <url>/hyq/c3e8be4f.html</url>
    <content><![CDATA[<h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><blockquote>
<p>Page Front-matter 用于页面配置</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">type:</span><br><span class="line">comments:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aside:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>key</th>
<th>value</th>
</tr>
</thead>
<tbody><tr>
<td>title</td>
<td>标题</td>
</tr>
<tr>
<td>date</td>
<td>创建日期</td>
</tr>
<tr>
<td>updated</td>
<td>更新日期</td>
</tr>
<tr>
<td>type</td>
<td>标签、分类和友情链接三个页面需要配置</td>
</tr>
<tr>
<td>comments</td>
<td>评论</td>
</tr>
<tr>
<td>description</td>
<td>描述</td>
</tr>
<tr>
<td>keywords</td>
<td>关键字</td>
</tr>
<tr>
<td>top_img</td>
<td>顶部图片</td>
</tr>
<tr>
<td>mathjax</td>
<td>显示mathjax</td>
</tr>
<tr>
<td>katex</td>
<td>显示katex</td>
</tr>
<tr>
<td>aside</td>
<td>侧边栏</td>
</tr>
<tr>
<td>aplayer</td>
<td>需要 js和css</td>
</tr>
<tr>
<td>highlight_shrink</td>
<td>代码框是否展开</td>
</tr>
</tbody></table>
<blockquote>
<p>Post Front-matter 用于文章页配置</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">comments:</span></span><br><span class="line"><span class="emphasis">cover:</span></span><br><span class="line"><span class="emphasis">toc:</span></span><br><span class="line"><span class="emphasis">copyright:</span></span><br><span class="line"><span class="emphasis">copyright_</span>author:</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>key</th>
<th>value</th>
</tr>
</thead>
<tbody><tr>
<td>title</td>
<td>标题</td>
</tr>
<tr>
<td>date</td>
<td>创建日期</td>
</tr>
<tr>
<td>updated</td>
<td>更新日期</td>
</tr>
<tr>
<td>tags</td>
<td>标签</td>
</tr>
<tr>
<td>categories</td>
<td>分类</td>
</tr>
<tr>
<td>description</td>
<td>描述</td>
</tr>
<tr>
<td>keywords</td>
<td>关键字</td>
</tr>
<tr>
<td>top_img</td>
<td>顶部图片</td>
</tr>
<tr>
<td>cover</td>
<td>缩略图&#x2F;文章封面</td>
</tr>
<tr>
<td>comments</td>
<td>评论</td>
</tr>
<tr>
<td>toc</td>
<td>默认主题配置中的</td>
</tr>
<tr>
<td>copyright</td>
<td>版权</td>
</tr>
<tr>
<td>copyright_author</td>
<td>作者</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Butterfly</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/hyq/4a17b156.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>nodejs</title>
    <url>/hyq/3418e521.html</url>
    <content><![CDATA[<h1 id="node-基本概念"><a href="#node-基本概念" class="headerlink" title="node 基本概念"></a>node 基本概念</h1><blockquote>
<p>nodejs 是什么</p>
</blockquote>
<p>Node.js 是一个开源的，跨平台的 JavaScript 运行环境。</p>
<p>通俗来讲：Node.js 就是一款应用程序，是一款软件，它可以运行 JavaScript</p>
<blockquote>
<p>nodejs 的作用</p>
</blockquote>
<ul>
<li>开发服务器应用</li>
<li>开发工具类应用</li>
<li>开发桌面端应用</li>
</ul>
<blockquote>
<p>nodejs 下载安装</p>
</blockquote>
<p>下载地址</p>
<ul>
<li><p><a href="https://nodejs.org/">node.js官方网站</a></p>
</li>
<li><p><a href="http://nodejs.cn/">node.js中文网</a></p>
</li>
<li><p>LTS 版本：Long-term Support 版本，长期支持版，即稳定版。</p>
</li>
<li><p>Current 版本：Latest Features 版本，最新版本，新特性会在该版本中最先加入</p>
</li>
</ul>
<p>下载之后一直点下一步即可完成安装，安装之后使用cmd查看node版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<blockquote>
<p>nodejs 编码注意事项</p>
</blockquote>
<p>nodejs 中不能使用 BOM 和 DOM 的 API ，可以使用 console 和 定时器 API</p>
<p>nodejs 中的顶级对象为 global，也可以使用 globalThis 访问顶级对象</p>
<h1 id="fs-模块"><a href="#fs-模块" class="headerlink" title="fs 模块"></a>fs 模块</h1><h2 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h2><blockquote>
<p>fs 全称为 <code>file system</code> ，称之为 <code>文件系统</code> ，是 Node.js 中的 <code>内置模块</code> ，可以对计算机中的磁盘进行操作</p>
</blockquote>
<h3 id="writeFile-异步写入文件"><a href="#writeFile-异步写入文件" class="headerlink" title="writeFile 异步写入文件"></a>writeFile 异步写入文件</h3><p><strong>语法</strong>： <code>fs.writeFile(file, data[, options], callback)</code></p>
<p><strong>参数说明</strong>：</p>
<ul>
<li>file：带文件名称的文件路径</li>
<li>data：要写入的文件内容</li>
<li>options 选项设置 <code>（可选）</code></li>
<li>callback(err)：写入成功之后的回调</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 需求：</span></span><br><span class="line"><span class="comment">新建一个文件夹：1.txt，写入内容：node写文件 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// require 是 Node.js 环境中的 &#x27;全局&#x27; 变量，用来导入模块</span></span><br><span class="line"><span class="comment">// 导入 fs 模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入文件</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;1.txt&#x27;</span>,<span class="string">&#x27;node写文件&#x27;</span>,<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// err 为错误对象，如果没有错误，则返回null</span></span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入失败&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="writeFileSync-同步写入"><a href="#writeFileSync-同步写入" class="headerlink" title="writeFileSync 同步写入"></a>writeFileSync 同步写入</h3><p><strong>语法:</strong> <code>fs.writeFileSync(file, data[, options])</code></p>
<p>参数与 <code>fs.writeFile</code> 大体一致，只是没有 callback 参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">writeFileSync</span>(<span class="string">&#x27;2.txt&#x27;</span>,<span class="string">&#x27;node写文件&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="appendFile-appendFileSync-追加写入"><a href="#appendFile-appendFileSync-追加写入" class="headerlink" title="appendFile &#x2F; appendFileSync 追加写入"></a>appendFile &#x2F; appendFileSync 追加写入</h3><blockquote>
<p><code>appendFile</code> 作用是在文件尾部追加内容，<code>appendFile</code> 语法与 <code>writeFile</code> 语法完全相同</p>
</blockquote>
<p><strong>语法</strong>:</p>
<p><code>fs.appendFile(file, data[, options], callback)</code></p>
<p><code>fs.appendFileSync(file, data[, options])</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">appendFile</span>(<span class="string">&#x27;1.txt&#x27;</span>,<span class="string">&#x27;\n追加内容&#x27;</span>,<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// err 为错误对象，如果没有错误，则返回null</span></span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;追加写入失败&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;追加写入成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">appendFileSync</span>(<span class="string">&#x27;2.txt&#x27;</span>,<span class="string">&#x27;\n追加内容&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="createWriteStream-流式写入"><a href="#createWriteStream-流式写入" class="headerlink" title="createWriteStream 流式写入"></a>createWriteStream 流式写入</h3><p><strong>语法</strong>：<code>fs.createWriteStream(path[, options])</code></p>
<p><strong>参数说明</strong>：</p>
<ul>
<li><code>path</code> 文件路径</li>
<li><code>options</code> 选项配置（ <code>可选</code> ）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 流式写入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入 fs 模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">// 创建写入流对象</span></span><br><span class="line"><span class="keyword">const</span> ws = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;3.txt&#x27;</span>)</span><br><span class="line"><span class="comment">// write 方法写入数据</span></span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&#x27;node 写文件\r\n&#x27;</span>)</span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&#x27;node createWriteStream流式写入\r\n&#x27;</span>)</span><br><span class="line"><span class="comment">// 关闭写入流</span></span><br><span class="line">ws.<span class="title function_">close</span>()</span><br><span class="line"><span class="comment">// ws.end()</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>程序打开一个文件是需要消耗资源的，流式写入可以减少打开关闭文件的次数。</p>
<p>流式写入方式适用于 大文件写入或者频繁写入的场景，<code>writeFile</code>适合于 写入频率较低的场景</p>
</blockquote>
<h2 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h2><h3 id="readFile-异步读取"><a href="#readFile-异步读取" class="headerlink" title="readFile 异步读取"></a>readFile 异步读取</h3><p><strong>语法</strong>: <code>fs.readFile(path[, options], callback)</code></p>
<p><strong>参数说明</strong>：</p>
<ul>
<li>path：文件路径</li>
<li>options：文件编码(可选) 若不传则返回buffer对象</li>
<li>callback：文件读完的回调</li>
</ul>
<blockquote>
<p>方法一：不传编码参数,回调函数中可以得到buffer对象,需要使用toString转化成字符串</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./1.txt&#x27;</span>,<span class="function">(<span class="params">err,data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取失败&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取成功&#x27;</span>,data)  <span class="comment">//打印buffer对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取成功&#x27;</span>,data.<span class="title function_">toString</span>())  <span class="comment">//正常打印字符串</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>方法二：传编码参数,回调函数中可以得到读取到的字符串</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;1.txt&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>,<span class="function">(<span class="params">err,data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data&#x27;</span>, data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>关于Buffer对象</p>
<ul>
<li>Buffer 对象是 Nodejs 用于处理二进制数据的</li>
<li>其实任意的数据在计算机底层都是二进制数据，因为计算机只认识二进制</li>
<li>所以读取任意的文件，返回的结果都是二进制数据，即 Buffer 对象</li>
<li>Buffer 对象可以调用 toString() 方法转换成字符串</li>
</ul>
<h3 id="readFileSync-同步读取"><a href="#readFileSync-同步读取" class="headerlink" title="readFileSync 同步读取"></a>readFileSync 同步读取</h3><p><strong>语法：</strong><code>fs.readFileSync(path[, options])</code></p>
<p><strong>参数说明：</strong></p>
<ul>
<li>path 文件路径</li>
<li>options 选项配置</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;1.txt&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;1.txt&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="createReadStream-流式读取"><a href="#createReadStream-流式读取" class="headerlink" title="createReadStream 流式读取"></a>createReadStream 流式读取</h3><p><strong>语法：</strong><code>fs.createReadStream(path[, options])</code></p>
<p><strong>参数说明：</strong></p>
<ul>
<li>path 文件路径</li>
<li>options 选项配置（ <code>可选</code> ）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建读取流对象</span></span><br><span class="line"><span class="keyword">let</span> rs = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;1.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每次取出 64k 数据后执行一次 data 回调</span></span><br><span class="line"><span class="comment">// 绑定一个 data 事件</span></span><br><span class="line">re.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">chunk</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(chunk)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(chunk.<span class="property">length</span>)  <span class="comment">// 65536 字节 =&gt; 64KB</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取完毕后，执行 end 回调 (可选事件)</span></span><br><span class="line">re.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取完毕&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="其他api（了解）"><a href="#其他api（了解）" class="headerlink" title="其他api（了解）"></a>其他api（了解）</h3><p>文档：<a href="http://nodejs.cn/api/fs.html">http://nodejs.cn/api/fs.html</a></p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>fs.rename(oldPath, newPath, callback)</td>
<td>文件移动和重命名（同步）</td>
</tr>
<tr>
<td>fs.renameSync(oldPath, newPath)</td>
<td>文件移动和重命名（异步）</td>
</tr>
<tr>
<td>fs.unlink(path, callback)</td>
<td>删除文件（异步）</td>
</tr>
<tr>
<td>fs.unlinkSync(path)</td>
<td>删除文件（同步）</td>
</tr>
<tr>
<td>fs.mkdir(path, mode, callback)</td>
<td>创建文件夹（异步）</td>
</tr>
<tr>
<td>fs.mkdirSync(path, mode)</td>
<td>创建文件夹（同步）</td>
</tr>
<tr>
<td>fs.rmdir(path, callback)</td>
<td>删除文件夹（异步）</td>
</tr>
<tr>
<td>fs.rmdirSync(path)</td>
<td>删除文件夹（同步）</td>
</tr>
<tr>
<td>fs.readdir(path, option, callback)</td>
<td>读取文件夹内容（异步）</td>
</tr>
<tr>
<td>fs.readdirSync(path, option)</td>
<td>读取文件夹内容（同步）</td>
</tr>
<tr>
<td>fs.stat(path, callback)</td>
<td>查看文件状态（异步）</td>
</tr>
<tr>
<td>fs.statSync(path)</td>
<td>查看文件状态（同步）</td>
</tr>
</tbody></table>
<h1 id="path模块"><a href="#path模块" class="headerlink" title="path模块"></a>path模块</h1><blockquote>
<p><code>path</code> 模块提供了 <code>操作路径</code> 的功能，我们将介绍如下几个较为常用的几个 API：</p>
</blockquote>
<table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>path.resolve</td>
<td>拼接规范的绝对路径 <code>常用</code></td>
</tr>
<tr>
<td>path.sep</td>
<td>获取操作系统的路径分隔符</td>
</tr>
<tr>
<td>path.parse</td>
<td>解析路径并返回对象</td>
</tr>
<tr>
<td>path.basename</td>
<td>获取路径的基础名称</td>
</tr>
<tr>
<td>path.dirname</td>
<td>获取路径的目录名</td>
</tr>
<tr>
<td>path.extname</td>
<td>获得路径的扩展名</td>
</tr>
</tbody></table>
<p>代码示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入 path 模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入文件</span></span><br><span class="line"><span class="comment">// fs.writeFileSync(__dirname + &#x27;/index.html&#x27;, &#x27;love&#x27;)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(__dirname + <span class="string">&#x27;/index.html&#x27;</span>) <span class="comment">//=&gt;D:\Desktop\Node\code\04-path/index.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// resolve 解决问题  拼接绝对路径</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./index.html&#x27;</span>)) <span class="comment">//=&gt;D:\Desktop\Node\code\04-path\index.html</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;index.html&#x27;</span>)) <span class="comment">//=&gt;D:\Desktop\Node\code\04-path\index.html</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;/index.html&#x27;</span>, <span class="string">&#x27;./test&#x27;</span>)) <span class="comment">//=&gt;D:\index.html\test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// sep 获取路径分隔符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="property">sep</span>) <span class="comment">//=&gt; window \  linux /	</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// parse 方法  __filename  &#x27;全局变量&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(__filename) <span class="comment">//=&gt;文件的绝对路径 //=&gt;D:\Desktop\Node\code\04-path\01-path.js</span></span><br><span class="line"><span class="comment">// 解析路径</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;D:\\Desktop\\Node\\code\\04-path\\01-path.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">parse</span>(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取路径基础名称</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">basename</span>(pathname))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取路径的目录名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">dirname</span>(pathname))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取路径的拓展名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">extname</span>(pathname))</span><br></pre></td></tr></table></figure>

<h1 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h1><blockquote>
<p>HTTP（hypertext transport protocol）协议；中文叫 超文本传输协议</p>
</blockquote>
<h2 id="创建服务器基本步骤"><a href="#创建服务器基本步骤" class="headerlink" title="创建服务器基本步骤"></a>创建服务器基本步骤</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 导入http模块，http模块是node的核心模块，作用是用来创建http服务器的</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 创建服务器-createServer方法 </span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request,response</span>) =&gt;</span> &#123;</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;content-type&#x27;</span>,<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>) <span class="comment">// 设置响应编码格式</span></span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h1&gt;Hello World!&lt;/h1&gt;&#x27;</span>); <span class="comment">// 设置响应体</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 启动服务器，监听某个端口-通过listen监听某个端口来启动服务</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9999</span>,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器启动成功了, 请访问： http://localhost:9999&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意事项：</p>
<p>如果响应体中出现中文，会乱码，设置 response.setHeader(‘content-type’,’text&#x2F;html;charset&#x3D;utf-8’) 解决</p>
</blockquote>
<h2 id="获取http报文"><a href="#获取http报文" class="headerlink" title="获取http报文"></a>获取http报文</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request,response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;method,url,httpVersion&#125; = request;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`当前请求方式为：<span class="subst">$&#123;method&#125;</span>`</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`当前请求路径为：<span class="subst">$&#123;url&#125;</span>`</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`当前请求版本号为：<span class="subst">$&#123;httpVersion&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9999</span>,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器启动成功了, 请访问： http://localhost:9999&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="获取请求路径与查询字符串"><a href="#获取请求路径与查询字符串" class="headerlink" title="获取请求路径与查询字符串"></a>获取请求路径与查询字符串</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 导入http模块，http模块是node的核心模块，作用是用来创建http服务器的</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 创建服务器-createServer方法 </span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request,response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 解析 request.url</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">url</span>)   </span><br><span class="line">    <span class="comment">// 使用 parse 解析 request.url 的内容</span></span><br><span class="line">    <span class="comment">// true 将 query 属性将会设置为一个 对象</span></span><br><span class="line">    <span class="keyword">let</span> res = url.<span class="title function_">parse</span>(request.<span class="property">url</span>, <span class="literal">true</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)  </span><br><span class="line">    <span class="comment">// 路径</span></span><br><span class="line">    <span class="keyword">let</span> pathname = res.<span class="property">pathname</span></span><br><span class="line">    <span class="comment">// 查询字符串</span></span><br><span class="line">    <span class="keyword">let</span> keyword = res.<span class="property">query</span>.<span class="property">keyword</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(pathname,keyword)  </span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h1&gt;Hello World!&lt;/h1&gt;&#x27;</span>); <span class="comment">// 设置响应体</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 启动服务器，监听某个端口-通过listen监听某个端口来启动服务</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9999</span>,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器启动成功了, 请访问： http://localhost:9999&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>更多的可以查看文档：<a href="https://nodejs.cn/api/">https://nodejs.cn/api/</a></p>
<h2 id="根据不同请求输出不同响应数据"><a href="#根据不同请求输出不同响应数据" class="headerlink" title="根据不同请求输出不同响应数据"></a>根据不同请求输出不同响应数据</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request,response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;method&#125; = request;</span><br><span class="line">    <span class="keyword">let</span> &#123;pathname&#125; = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>, <span class="string">&#x27;http://127.0.0.1&#x27;</span>);</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(method ===<span class="string">&#x27;GET&#x27;</span>&amp;&amp; pathname === <span class="string">&#x27;/login&#x27;</span>)&#123;</span><br><span class="line">        response.<span class="title function_">end</span>(<span class="string">&#x27;登录页面&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(method ===<span class="string">&#x27;GET&#x27;</span>&amp;&amp; pathname === <span class="string">&#x27;/register&#x27;</span>)&#123;   </span><br><span class="line">        response.<span class="title function_">end</span>(<span class="string">&#x27;注册页面&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        response.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h1&gt;404&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9999</span>,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器启动成功了, 请访问： http://localhost:9999&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="搭建静态资源服务"><a href="#搭建静态资源服务" class="headerlink" title="搭建静态资源服务"></a>搭建静态资源服务</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request,response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取请求的url路径</span></span><br><span class="line">    <span class="keyword">let</span> &#123;pathname&#125; = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>, <span class="string">&#x27;http://127.0.0.1&#x27;</span>);</span><br><span class="line">    <span class="comment">// 网站根目录</span></span><br><span class="line">    <span class="keyword">let</span> root = __dirname +<span class="string">&#x27;/../&#x27;</span></span><br><span class="line">    <span class="comment">// 拼接文件路径</span></span><br><span class="line">    <span class="keyword">let</span> filePath = root+ pathname;</span><br><span class="line">    <span class="comment">// 读取文件fs异步API</span></span><br><span class="line">    fs.<span class="title function_">readFile</span>(filePath,<span class="function">(<span class="params">err,data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            response.<span class="title function_">end</span>(<span class="string">&#x27;404 Not Found&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        response.<span class="title function_">end</span>(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9999</span>,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器启动成功了, 请访问： http://localhost:9999&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="MIME类型"><a href="#MIME类型" class="headerlink" title="MIME类型"></a>MIME类型</h2><blockquote>
<p>通常称为 Multipurpose Internet Mail Extensions 或 MIME 类型 是一种标准，用来表示文档、文件或字节流的性质和格式</p>
</blockquote>
<p>HTTP 服务可以设置响应头 Content-Type 来表明响应体的 MIME 类型，浏览器会根据该类型决定如何处理资源</p>
<p>下面是常见文件对应的 mime 类型：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html: &#x27;text/html&#x27;,</span><br><span class="line">css: &#x27;text/css&#x27;,</span><br><span class="line">js: &#x27;text/javascript&#x27;,</span><br><span class="line">png: &#x27;image/png&#x27;,</span><br><span class="line">jpg: &#x27;image/jpeg&#x27;, </span><br><span class="line">gif: &#x27;image/gif&#x27;,</span><br><span class="line">mp4: &#x27;video/mp4&#x27;,</span><br><span class="line">mp3: &#x27;audio/mpeg&#x27;,</span><br><span class="line">json: &#x27;application/json&#x27;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对于未知的资源类型，可以选择 <code>application/octet-stream</code> 类型，浏览器在遇到该类型的响应时，会对响应体内容进行独立存储，也就是我们常见的 <code>下载</code> 效果</p>
</blockquote>
<h2 id="路径拼接"><a href="#路径拼接" class="headerlink" title="路径拼接"></a>路径拼接</h2><p>语法：path.join(path1,path2…)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="comment">//1 基本用法(掌握)</span></span><br><span class="line"><span class="keyword">const</span> res1 = path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;1.txt&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res1:&#x27;</span>,res1) <span class="comment">// res1: D:\node-test\6.path模块\1.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2 一个../ 会抵消一个上一级目录(了解)</span></span><br><span class="line"><span class="keyword">const</span> res2 = path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;../&#x27;</span>,<span class="string">&#x27;1.txt&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res2:&#x27;</span>,res2) <span class="comment">// res2: D:\node-test\1.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3 ./ 会被忽略(了解)</span></span><br><span class="line"><span class="keyword">const</span> res3 = path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./&#x27;</span>,<span class="string">&#x27;1.txt&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res3:&#x27;</span>,res3) <span class="comment">// res3: D:\node-test\6.path模块\1.txt</span></span><br></pre></td></tr></table></figure>

<h2 id="获取文件名"><a href="#获取文件名" class="headerlink" title="获取文件名"></a>获取文件名</h2><p>语法：path.basename(path[, ext])</p>
<ul>
<li>path: 文件路径</li>
<li>ext: 文件扩展名（可选）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> filepath = <span class="string">&#x27;D:/node-test/1.txt&#x27;</span></span><br><span class="line"><span class="comment">//获取文件名带后缀</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">basename</span>(filepath))<span class="comment">//1.txt </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取文件名不带后缀</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">basename</span>(filepath,<span class="string">&#x27;.txt&#x27;</span>))<span class="comment">//1 </span></span><br></pre></td></tr></table></figure>

<h2 id="获取扩展名"><a href="#获取扩展名" class="headerlink" title="获取扩展名"></a>获取扩展名</h2><p>语法：<code>path.extname(filepath)</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> filepath = <span class="string">&#x27;D:/node-test/1.txt&#x27;</span></span><br><span class="line"><span class="comment">//获取扩展名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">extname</span>(filepath)) <span class="comment">//.txt</span></span><br></pre></td></tr></table></figure>

<h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><h2 id="模块的导入导出"><a href="#模块的导入导出" class="headerlink" title="模块的导入导出"></a>模块的导入导出</h2><blockquote>
<p>模块导入</p>
</blockquote>
<ul>
<li>通过<code>require(&quot;fs&quot;)</code>来加载模块</li>
<li>如果是第三方模块，需要先使用npm进行下载</li>
<li>如果是自定义模块，需要加上相对路径<code>./</code>或者<code>../</code>,可以省略<code>.js</code>后缀，如果文件名是<code>index.js</code>那么index.js也可以省略</li>
<li>模块可以被多次导入，但是<code>只会在第一次加载</code></li>
</ul>
<blockquote>
<p>模块导出</p>
</blockquote>
<ul>
<li><code>module.exports</code> &#x3D; value</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//module.exports指向的是一个对象，我们给对象增加属性即可</span></span><br><span class="line"><span class="comment">//module.exports.num = 123;</span></span><br><span class="line"><span class="comment">//module.exports.age = 18;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过module.exports也可以导出一个值，但是多次导出会覆盖</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="string">&quot;18&quot;</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>module.exports与exports</p>
</blockquote>
<p>不能使用 <code>exports = value</code> 的形式暴露数据，模块内部 module 与 exports 的隐式关系 <code>exports = module.exports = &#123;&#125;</code> ，require 返回的是目标模块中 <code>module.exports</code> 的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="variable language_">module</span>.<span class="property">exports</span> === <span class="built_in">exports</span> ) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价操作</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">num</span> = <span class="number">123</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">num</span> = <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// exports = value 这种形式不行</span></span><br><span class="line"><span class="built_in">exports</span> = <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值操作：不要使用 exports = &#123;&#125;</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CommonJS-规范参考文档"><a href="#CommonJS-规范参考文档" class="headerlink" title="CommonJS 规范参考文档"></a>CommonJS 规范参考文档</h2><ul>
<li><a href="http://nodejs.cn/api/modules.html">module (模块)</a></li>
<li><a href="http://javascript.ruanyifeng.com/nodejs/module.html">CommonJS规范</a></li>
<li><a href="http://www.jianshu.com/p/09ffac7a3b2c">浅析JS模块规范：AMD，CMD，CommonJS</a></li>
</ul>
<h1 id="包管理器-npm"><a href="#包管理器-npm" class="headerlink" title="包管理器-npm"></a>包管理器-npm</h1><h2 id="npm的基本概念"><a href="#npm的基本概念" class="headerlink" title="npm的基本概念"></a>npm的基本概念</h2><ul>
<li>npm 全称 <code>Node Package Manager</code> ，翻译为中文意思是『Node 的包管理工具』</li>
<li>npm 是 node.js 官方内置的包管理工具，只要安装了node，就自带了<code>npm</code></li>
<li><a href="https://npmjs.com/">npm官网</a></li>
<li><a href="https://www.npmjs.com.cn/">npm中文文档</a></li>
</ul>
<h2 id="常用的包管理工具"><a href="#常用的包管理工具" class="headerlink" title="常用的包管理工具"></a>常用的包管理工具</h2><ul>
<li><code>npm</code></li>
<li>yarn</li>
<li>cnpm</li>
</ul>
<h2 id="npm的基本使用"><a href="#npm的基本使用" class="headerlink" title="npm的基本使用"></a>npm的基本使用</h2><h3 id="初始化包"><a href="#初始化包" class="headerlink" title="初始化包"></a>初始化包</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm init;    <span class="comment">//这个命令用于初始化一个包，创建一个package.json文件，我们的项目都应该先执行npm init</span></span><br><span class="line">npm init -y;  <span class="comment">//快速的初始化一个包， 不能是一个中文名</span></span><br></pre></td></tr></table></figure>

<p><code>package.json</code> 内容示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1-npm&quot;</span><span class="punctuation">,</span> 		#包的名字</span><br><span class="line">	<span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span> 	#包的版本</span><br><span class="line">	<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> 		#包的描述</span><br><span class="line">	<span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span> 	#包的入口文件</span><br><span class="line">	<span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> 		    #脚本配置</span><br><span class="line">		<span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> 			#作者</span><br><span class="line">	<span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span> 		#开源证书</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>初始化的过程中注意事项：</p>
<ol>
<li>package name (<code>包名</code>) 不能使用中文、大写，默认值是<code>文件夹的名称</code>，所以文件夹名称也不 能使用中文和大写</li>
<li>version (<code>版本号</code>)要求 <code>x.x.x</code> 的形式定义，<code>x</code> 必须是数字，默认值是 <code>1.0.0</code></li>
<li>ISC 证书与 MIT 证书功能上是相同的，关于开源证书扩展阅读 <a href="https://gitee.com/link?target=http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html">http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html</a></li>
<li><code>package.json</code> 可以手动创建与修改</li>
<li>使用 <code>npm init -y</code> 或者 <code>npm init --yes</code> 极速创建 <code>package.json</code></li>
</ol>
</blockquote>
<h3 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install 包名;  <span class="comment">//安装指定的包名的最新版本到项目中</span></span><br><span class="line">npm install 包名@版本号;  <span class="comment">//安装指定包的指定版本</span></span><br><span class="line"></span><br><span class="line">npm i 包名； <span class="comment">//简写</span></span><br></pre></td></tr></table></figure>

<p>运行之后文件夹下会增加两个资源</p>
<ul>
<li><code>node_modules 文件夹</code> 存放下载的包</li>
<li><code>package-lock.json 包的锁文件</code>，用来锁定包的版本</li>
</ul>
<h3 id="卸载包"><a href="#卸载包" class="headerlink" title="卸载包"></a>卸载包</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm uninstall 包名;  <span class="comment">//卸载已经安装的包</span></span><br><span class="line"></span><br><span class="line">npm uni 包名；<span class="comment">//简写</span></span><br></pre></td></tr></table></figure>

<h3 id="生产依赖与开发依赖"><a href="#生产依赖与开发依赖" class="headerlink" title="生产依赖与开发依赖"></a>生产依赖与开发依赖</h3><blockquote>
<p><code>开发依赖</code> 是只在开发阶段使用的依赖包，而 <code>生产依赖</code> 是开发阶段和最终上线运行阶段都用到的依赖包</p>
</blockquote>
<table>
<thead>
<tr>
<th>类型</th>
<th>命令</th>
<th>补充</th>
</tr>
</thead>
<tbody><tr>
<td>生产依赖</td>
<td>npm i -S uniq npm i –save uniq</td>
<td>-S 等效于 –save，<code>-S 是默认选项</code> 包信息保存在 package.json 中 <code>dependencies</code> 属性</td>
</tr>
<tr>
<td>开发依赖</td>
<td>npm i -D less npm i –save-dev less</td>
<td>-D 等效于 –save-dev 包信息保存在 package.json 中 <code>devDependencies</code> 属性</td>
</tr>
</tbody></table>
<h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h3><ul>
<li>全局安装的命令不受工作目录位置影响</li>
<li>可以通过 <code>npm root -g</code> 可以查看全局安装包的位置</li>
<li>不是所有的包都适合全局安装，只有全局类的工具才适合，可以通过查看包的官方文档来确定安装方式，这里先不必太纠结</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 该命令的作用是 自动重启 node 应用程序</span></span><br><span class="line">npm i -g nodemon</span><br></pre></td></tr></table></figure>

<h3 id="npm配置命令别名"><a href="#npm配置命令别名" class="headerlink" title="npm配置命令别名"></a>npm配置命令别名</h3><blockquote>
<p>配置 package.json 中的 <code>scripts</code> 属性</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node server.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>配置完成之后，可以使用别名执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run server</span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure>

<p>不过 <code>start</code> 别名比较特别，使用时可以省略 <code>run</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure>

<ul>
<li><code>npm start</code> 是项目中常用的一个命令，一般用来启动项目</li>
<li><code>npm run</code> 有自动向上级目录查找的特性，跟 <code>require</code> 函数也一样</li>
<li>对于陌生的项目，我们可以通过查看 <code>scripts</code> 属性来参考项目的一些操作</li>
</ul>
<h1 id="包管理器-cnpm"><a href="#包管理器-cnpm" class="headerlink" title="包管理器-cnpm"></a>包管理器-cnpm</h1><p>cnpm 是一个淘宝构建的<code>npmjs.com</code>的完整镜像，也称为『淘宝镜像』</p>
<p>官网：<a href="https://gitee.com/link?target=https://npmmirror.com/">https://npmmirror.com/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npmmirror.com </span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用 nrm 配置 npm 的镜像地址</p>
<p>nrm 全名 npm registry manager</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装 nrm</span></span><br><span class="line">npm i -g nrm</span><br><span class="line"><span class="comment">// 修改镜像</span></span><br><span class="line">nrm use taobao</span><br><span class="line"><span class="comment">// 检查 registry 地址是否为 https://registry.npmmirror.com/ , 如果 是 则表明成功</span></span><br><span class="line">npm config list</span><br></pre></td></tr></table></figure>

<h1 id="包管理器-yarm"><a href="#包管理器-yarm" class="headerlink" title="包管理器-yarm"></a>包管理器-yarm</h1><p>yarn 是由 Facebook 在 2016 年推出的新的 Javascript 包管理工具</p>
<p>官方网址：<a href="https://gitee.com/link?target=https://yarnpkg.com/">https://yarnpkg.com/</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装</span></span><br><span class="line">npm i -g yarn</span><br><span class="line"><span class="comment">// yarn 配置淘宝镜像</span></span><br><span class="line">yarn config set registry <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/</span></span><br></pre></td></tr></table></figure>

<p>通过锁文件判断项目使用的包管理工具</p>
<ul>
<li>npm 的锁文件为 <code>package-lock.json</code></li>
<li>yarn 的锁文件为 <code>yarn.lock</code></li>
</ul>
<h1 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h1><p>nvm 全称 <code>Node Version Manager</code> 顾名思义它是用来管理 node 版本的工具，方便切换不同版本的Node.js</p>
<p>下载：<a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a></p>
<p>选择 <code>nvm-setup.exe</code> 下载即可</p>
<p>常用命令</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>nvm list available</td>
<td>显示所有可以下载的 Node.js 版本</td>
</tr>
<tr>
<td>nvm list</td>
<td>显示已安装的版本</td>
</tr>
<tr>
<td>nvm install 18.12.1</td>
<td>安装 18.12.1 版本的 Node.js</td>
</tr>
<tr>
<td>nvm install latest</td>
<td>安装最新版的 Node.js</td>
</tr>
<tr>
<td>nvm uninstall 18.12.1</td>
<td>删除某个版本的 Node.js</td>
</tr>
<tr>
<td>nvm use 18.12.1</td>
<td>切换 18.12.1 的 Node.js</td>
</tr>
</tbody></table>
<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>一个路由的组成有 <code>请求方法</code>， <code>路径</code> 和 <code>回调函数</code> 组成</p>
<p>语法：app.<method>(path，callback)</p>
<p>创建路由模块：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载具体路由</span></span><br><span class="line"><span class="comment">// get 类型路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/list&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 获取参数</span></span><br><span class="line">  <span class="keyword">const</span> query = req.<span class="property">query</span></span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">      <span class="attr">code</span>:<span class="number">200</span>, <span class="comment">// 响应的状态码</span></span><br><span class="line">      <span class="attr">msg</span>:<span class="string">&#x27;ok&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>:query <span class="comment">// 响应的数据</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// post 类型路由</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/add&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 获取参数</span></span><br><span class="line">  <span class="keyword">const</span> body = req.<span class="property">body</span></span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">      <span class="attr">code</span>:<span class="number">200</span>, <span class="comment">// 响应的状态码</span></span><br><span class="line">      <span class="attr">msg</span>:<span class="string">&#x27;ok&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>:body <span class="comment">// 响应的数据</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 匹配所有的请求方法</span></span><br><span class="line">router.<span class="title function_">all</span>(<span class="string">&#x27;/search&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">	res.<span class="title function_">send</span>(<span class="string">&#x27;1 秒钟为您找到相关结果约 100,000,000 个&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 自定义 404 路由</span></span><br><span class="line">router.<span class="title function_">all</span>(<span class="string">&quot;*&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">	res.<span class="title function_">send</span>(<span class="string">&#x27;&lt;h1&gt;404 Not Found&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向外导出路由对象</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br></pre></td></tr></table></figure>

<p>注册路由模块：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./router&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册路由模块，添加访问前缀 (也可以没有访问前缀)</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, router) <span class="comment">// 测试时记得代码 /api 前缀</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8888</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>获取路由参数：（路由参数指的是 URL 路径中的参数）</p>
<ul>
<li>query属性：获取get请求参数，是一个对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传参：http://localhost:8888/user?name=jerry&amp;age=18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理请求</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>,<span class="function">(<span class="params">req,resp</span>) =&gt;</span> &#123;</span><br><span class="line">    resp.<span class="title function_">send</span>(req.<span class="property">query</span>)<span class="comment">//将get参数直接返回</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>body：获取POST请求参数，需要安装配置<code>body-parser</code>模块， POST请求参数</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i body-parser</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入 bodyParser 模块</span></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"><span class="comment">// 解析 JSON 格式请求体</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>())</span><br><span class="line"><span class="comment">// 将 POST 请求参数转化为对象，存储到 req.body 中 (application/x-www-form-urlencoded方式)</span></span><br><span class="line"><span class="comment">// 解析 querystring 格式请求体</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>,<span class="function">(<span class="params">req,resp</span>) =&gt;</span> &#123;</span><br><span class="line">    resp.<span class="title function_">send</span>(req.<span class="property">body</span>) <span class="comment">// 将 post 参数直接返回</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>params：获取restful风格的参数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//传参：http://localhost:8888/user/jerry/19</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">put</span>(<span class="string">&#x27;/user/:name/:age&#x27;</span>,<span class="function">(<span class="params">req,resp</span>) =&gt;</span> &#123;</span><br><span class="line">    resp.<span class="title function_">send</span>(req.<span class="property">params</span>) <span class="comment">// 将 restful 参数直接返回</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以获取单个参数</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/:name&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">	res.<span class="title function_">send</span>(<span class="string">&#x27;商品 name 为&#x27;</span> + req.<span class="property">params</span>.<span class="property">name</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="express框架"><a href="#express框架" class="headerlink" title="express框架"></a>express框架</h1><p>express 是一个基于 Node.js 平台的极简、灵活的 WEB 应用开发框架</p>
<p>官方网址： <a href="https://gitee.com/link?target=https://www.expressjs.com.cn/">https://www.expressjs.com.cn/</a></p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ul>
<li>安装express</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i express</span><br></pre></td></tr></table></figure>

<ul>
<li>案例</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入 express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建 express实例，也就是创建 express服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3900</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Example app listening on port 3900!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>参数说明</p>
<ul>
<li><code>express()</code>：创建一个Express应用，并返回，即：app</li>
<li>app.get()：注册一个GET类型的路由<ul>
<li>注意：只要注册了路由，所有的请求都会被处理（未配置的请求路径，响应404）</li>
</ul>
</li>
<li>res.send()：发送数据给客户端，并自动设置Content-Type<ul>
<li>参数可以是：字符串、数组、对象、Buffer</li>
<li>注意：只能使用一次</li>
</ul>
</li>
<li><code>req</code> 和 <code>res</code>：与http模块中的作用相同，是扩展后的请求和响应对象</li>
</ul>
<h2 id="response响应设置"><a href="#response响应设置" class="headerlink" title="response响应设置"></a>response响应设置</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  	<span class="comment">//1. express 中设置响应的方式兼容 HTTP 模块的方式</span></span><br><span class="line">  	res.<span class="property">statusCode</span> = <span class="number">404</span>;</span><br><span class="line">  	res.<span class="property">statusMessage</span> = <span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line">  	res.<span class="title function_">setHeader</span>(<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;xyz&#x27;</span>);</span><br><span class="line">  	res.<span class="title function_">write</span>(<span class="string">&#x27;响应体&#x27;</span>);</span><br><span class="line">  	res.<span class="title function_">end</span>(<span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//2. express 的响应方法</span></span><br><span class="line">  	res.<span class="title function_">status</span>(<span class="number">500</span>);  <span class="comment">// 设置响应状态码</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置响应头</span></span><br><span class="line">  	res.<span class="title function_">set</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/plain&#x27;</span>) </span><br><span class="line">    res.<span class="title function_">set</span>(&#123;</span><br><span class="line">  		<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span>,</span><br><span class="line">  		<span class="string">&#x27;cute&#x27;</span>: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">	&#125;)</span><br><span class="line">    </span><br><span class="line">  	res.<span class="title function_">send</span>(<span class="string">&#x27;中文响应不乱码&#x27;</span>); <span class="comment">// 设置响应体 send() 发送数据给客户端，并自动设置Content-Type</span></span><br><span class="line">    </span><br><span class="line">  	<span class="comment">//连贯操作</span></span><br><span class="line">  	res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">set</span>(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;text/plain&#x27;</span>).<span class="title function_">send</span>(<span class="string">&#x27;xxxxxx&#x27;</span>)</span><br><span class="line">  	</span><br><span class="line">    <span class="comment">//3. 其他响应</span></span><br><span class="line">  	res.<span class="title function_">redirect</span>(<span class="string">&#x27;http://xxx.com&#x27;</span>) <span class="comment">// 重定向</span></span><br><span class="line">  	res.<span class="title function_">download</span>(<span class="string">&#x27;./package.json&#x27;</span>); <span class="comment">// 下载响应</span></span><br><span class="line">  	res.<span class="title function_">json</span>(); <span class="comment">// 响应 JSON</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 响应文件内容</span></span><br><span class="line">    <span class="comment">// 发送文件给浏览器，并根据文件后缀名自动设置Content-Type</span></span><br><span class="line">	<span class="comment">// 注意：文件路径必须是绝对路径</span></span><br><span class="line">  	res.<span class="title function_">sendFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;index.html&#x27;</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><ul>
<li><p>中间件（Middleware）本质是一个回调函数</p>
</li>
<li><p>中间件函数可以像路由回调一样访问 请求对象（request）， 响应对象（response）以及 next 三个参数</p>
</li>
<li><p>next() 继续调用下一个中间件或路由</p>
</li>
<li><p>中间件可连续调用多个</p>
</li>
</ul>
<h3 id="全局中间件"><a href="#全局中间件" class="headerlink" title="全局中间件"></a>全局中间件</h3><ul>
<li>通过 <code>app.use()</code> 定义的中间件为全局中间件</li>
<li>语法：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> recordMiddleware = <span class="keyword">function</span>(<span class="params">request,response,next</span>)&#123;</span><br><span class="line">  <span class="comment">//实现功能代码</span></span><br><span class="line">  <span class="comment">//.....</span></span><br><span class="line">  <span class="comment">//执行next函数(当如果希望执行完中间件函数之后，仍然继续执行路由中的回调函数，必须调用next)</span></span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>案例：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义第一个全局中间件</span></span><br><span class="line"><span class="keyword">const</span> recordMiddleware = (<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了第1个全局中间件&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>() <span class="comment">// 一定要调用</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(recordMiddleware)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义第二个全局中间件 (声明时直接将匿名函数传递给 use)</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了第2个全局中间件&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;User page&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="路由中间件"><a href="#路由中间件" class="headerlink" title="路由中间件"></a>路由中间件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法一</span></span><br><span class="line">router.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/&#x27;</span>, router)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/路径&#x27;</span>,<span class="string">`中间件函数`</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">  	<span class="title function_">next</span>()</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/路径&#x27;</span>,<span class="string">`中间件函数1`</span>,<span class="string">`中间件函数2`</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">  	<span class="title function_">next</span>()</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="静态资源中间件"><a href="#静态资源中间件" class="headerlink" title="静态资源中间件"></a>静态资源中间件</h3><p>注意：如果静态资源与路由规则同时匹配，谁先匹配</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态资源中间件</span></span><br><span class="line"><span class="comment">// __dirname + &#x27;public&#x27; 静态资源文件夹目录</span></span><br><span class="line"><span class="comment">// 将当前文件夹下的public目录作为网站的根目录</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(__dirname + <span class="string">&#x27;public&#x27;</span>))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;User page&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8888</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="EJS模板引擎"><a href="#EJS模板引擎" class="headerlink" title="EJS模板引擎"></a>EJS模板引擎</h2><p>模板引擎是分离 <code>用户界面 </code>和 <code>业务数据</code> 的一种技术</p>
<p>官网：<a href="https://ejs.co/">https://ejs.co/</a></p>
<p>中文站：<a href="https://ejs.bootcss.com/">https://ejs.bootcss.com/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i ejs</span><br></pre></td></tr></table></figure>

<p>案例：列表渲染</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> xiyou = [<span class="string">&#x27;唐僧&#x27;</span>, <span class="string">&#x27;白骨精&#x27;</span>, <span class="string">&#x27;蜘蛛精&#x27;</span>, <span class="string">&#x27;牛魔王&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> html = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./test.html&#x27;</span>).<span class="title function_">toString</span>()</span><br><span class="line"><span class="keyword">const</span> result = ejs.<span class="title function_">render</span>(html, &#123;</span><br><span class="line">  <span class="attr">xiyou</span>: xiyou</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- test.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>西游<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        &lt;% xiyou.forEach((item)=&gt;&#123; %&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>&lt;%= item %&gt;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &lt;% &#125;) %&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>案例：条件渲染</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> isLogin = <span class="literal">false</span></span><br><span class="line"><span class="keyword">const</span> html = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./test.html&#x27;</span>).<span class="title function_">toString</span>()</span><br><span class="line"><span class="keyword">const</span> result = ejs.<span class="title function_">render</span>(html, &#123;</span><br><span class="line">    <span class="attr">isLogin</span>: isLogin</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- test.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>isLogin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &lt;% if(isLogin) &#123; %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>你好，欢迎回来<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    &lt;% &#125; else &#123; %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>请登录<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Express脚手架使用"><a href="#Express脚手架使用" class="headerlink" title="Express脚手架使用"></a>Express脚手架使用</h2><p>安装 express-generator</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -g express-generator</span><br></pre></td></tr></table></figure>

<p>创建项目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">express -e &#x27;项目名&#x27;</span><br><span class="line">或者</span><br><span class="line">express --no-view &#x27;项目名&#x27;  （不带view视图文件夹）</span><br></pre></td></tr></table></figure>

<p>安装依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure>

<p>修改 package.json 启动指令（使用 nodemon  启动）</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodemon ./bin/www&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<p>启动项目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure>

<p>浏览器访问 <a href="http://localhost:3000/">http://localhost:3000/</a></p>
<p>项目的目录结构</p>
<img src="/img/041.png" />

<h1 id="mongoose连接数据库"><a href="#mongoose连接数据库" class="headerlink" title="mongoose连接数据库"></a>mongoose连接数据库</h1><p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i mongoose</span><br></pre></td></tr></table></figure>

<p>案例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入mongoose模块</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接mongodb数据库</span></span><br><span class="line"><span class="comment">// 27017 是默认端口 </span></span><br><span class="line"><span class="comment">// test 是要操作的数据库名称 如果不存在会自动创建这个数据库</span></span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&#x27;mongodb://localhost:27017/test&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置回调</span></span><br><span class="line">mongoose.<span class="property">connection</span>.<span class="title function_">once</span>(<span class="string">&#x27;open&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="comment">// 连接成功</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">mongoose.<span class="property">connection</span>.<span class="title function_">once</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="comment">// 连接失败</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接失败&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">mongoose.<span class="property">connection</span>.<span class="title function_">once</span>(<span class="string">&#x27;close&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="comment">// 连接关闭</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接关闭&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  mongoose.<span class="title function_">disconnect</span>() <span class="comment">// 2s后断开连接</span></span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = mongoose</span><br></pre></td></tr></table></figure>

<h1 id="node操作mongodb数据库"><a href="#node操作mongodb数据库" class="headerlink" title="node操作mongodb数据库"></a>node操作mongodb数据库</h1><p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i mongodb</span><br></pre></td></tr></table></figure>

<p>案例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入 mongodb，并获取到客户端对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MongoClient</span> = <span class="built_in">require</span>(<span class="string">&#x27;mongodb&#x27;</span>).<span class="property">MongoClient</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接数据库服务地址</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;mongodb://localhost:27017&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line"><span class="title class_">MongoClient</span>.<span class="title function_">connect</span>(url, <span class="keyword">function</span> (<span class="params">err, client</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;链接数据库失败&#x27;</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据库链接成功&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取集合对象</span></span><br><span class="line">  <span class="keyword">const</span> db = client.<span class="title function_">db</span>(<span class="string">&#x27;nodedb&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 关闭数据库链接</span></span><br><span class="line">  client.<span class="title function_">close</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>mongodb图形化工具-Robo3T</p>
<p><a href="https://github.com/Studio3T/robomongo/releases">https://github.com/Studio3T/robomongo/releases</a></p>
<h1 id="安装并配置-MySQL-模块"><a href="#安装并配置-MySQL-模块" class="headerlink" title="安装并配置 MySQL 模块"></a>安装并配置 MySQL 模块</h1><p>安装 mysql 模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install mysql</span><br></pre></td></tr></table></figure>

<p>建立连接</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入mysql模块</span></span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建连接池</span></span><br><span class="line"><span class="keyword">const</span> db = mysql.<span class="title function_">createPool</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="comment">// 数据库服务器地址</span></span><br><span class="line">    <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>, <span class="comment">// 数据库用户名</span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>, <span class="comment">// 数据库密码</span></span><br><span class="line">    <span class="attr">database</span>: <span class="string">&#x27;clwy_api_development&#x27;</span> <span class="comment">// 数据库名称</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>测试是否正常工作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试连接是否成功</span></span><br><span class="line">db.<span class="title function_">query</span>(<span class="string">&#x27;select 1&#x27;</span>, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>);</span><br><span class="line">    <span class="comment">// 打印出现 [ RowDataPacket &#123; &#x27;1&#x27;: 1 &#125; ]  代表连接成功</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="node操作mysql增删改查"><a href="#node操作mysql增删改查" class="headerlink" title="node操作mysql增删改查"></a>node操作mysql增删改查</h2><blockquote>
<p>添加数据</p>
</blockquote>
<p>方法一：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 要插入到 users 表中的数据对象</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;<span class="attr">username</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="attr">password</span>: <span class="string">&#x27;123&#x27;</span>&#125;</span><br><span class="line"><span class="comment">// 待执行的 SQL 语句 其中? 是占位符</span></span><br><span class="line"><span class="keyword">const</span> insertSql = <span class="string">&#x27;insert into users (username,password) values (?,?)&#x27;</span>;</span><br><span class="line"><span class="comment">// 执行 SQL 语句</span></span><br><span class="line"><span class="comment">// 参数1：sql字符串  参数2：占位符对应的数据 参数3：插入之后的回调</span></span><br><span class="line">db.<span class="title function_">query</span>(insertSql,[user.<span class="property">username</span>,user.<span class="property">password</span>], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>);</span><br><span class="line">    <span class="keyword">if</span>(results.<span class="property">affectedRows</span> === <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;插入数据成功&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>方法二：向表中新增数据时，如果数据对象的每个属性和数据表的字段一一对应，则可以通过如下方式快速插入数据：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> insertSql = <span class="string">&#x27;insert into  users set ?&#x27;</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">username</span>: <span class="string">&#x27;tom&#x27;</span>, <span class="attr">password</span>: <span class="string">&#x27;123&#x27;</span>&#125;</span><br><span class="line">db.<span class="title function_">query</span>(insertSql,obj,<span class="function">(<span class="params">err,results</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">if</span>(err) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err:&#x27;</span>, err.<span class="property">message</span>)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;results:&#x27;</span>, results);</span><br><span class="line">   <span class="keyword">if</span>(results.<span class="property">affectedRows</span> == <span class="number">1</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;插入成功！&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查询数据</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> findAllSql = <span class="string">&#x27;select * from users&#x27;</span>;</span><br><span class="line">db.<span class="title function_">query</span>(findAllSql, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>修改数据</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;username,password,status,userId&#125; = &#123;<span class="attr">userId</span>: <span class="number">2</span>, <span class="attr">status</span>: <span class="number">1</span>, <span class="attr">username</span>: <span class="string">&#x27;jerry&#x27;</span>, <span class="attr">password</span>: <span class="string">&#x27;456&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;update users set username=?,password=?,status=? where userId=?&#x27;</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr,[username,password,status,userId],<span class="function">(<span class="params">err,results</span>) =&gt;</span> &#123; <span class="comment">// 注意第二个参数的顺序</span></span><br><span class="line">   <span class="keyword">if</span>(err) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err:&#x27;</span>, err)</span><br><span class="line">   <span class="keyword">if</span>(results.<span class="property">affectedRows</span> == <span class="number">1</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;修改成功！&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>快捷修改方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">userId</span>: <span class="number">3</span>,<span class="attr">status</span>:<span class="number">1</span>,<span class="attr">username</span>: <span class="string">&#x27;jerry1&#x27;</span>, <span class="attr">password</span>: <span class="string">&#x27;4516&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;update users set ? where userId=?&#x27;</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr,[obj,obj.<span class="property">userId</span>],<span class="function">(<span class="params">err,results</span>) =&gt;</span> &#123; <span class="comment">// 注意第二个参数的顺序</span></span><br><span class="line">  <span class="keyword">if</span>(err) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err:&#x27;</span>, err)</span><br><span class="line">  <span class="keyword">if</span>(results.<span class="property">affectedRows</span> == <span class="number">1</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;修改成功！&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>删除数据</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;delete from users where userId=?&#x27;</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr,<span class="number">2</span>,<span class="function">(<span class="params">err,results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err:&#x27;</span>, err)</span><br><span class="line">    <span class="keyword">if</span>(results.<span class="property">affectedRows</span> == <span class="number">1</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除成功！&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>标记删除 (伪删除：没有真正删除 而是修改状态为1 表示被删除了 实际上数据还是存在)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 把 userId = 1 的 那条数据 的状态 修改成 1  代表被删除了</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;update users set status = ? where userId=?&#x27;</span></span><br><span class="line"><span class="comment">// 两个参数：第一个1 是 status ，第二个1 是 userId</span></span><br><span class="line"><span class="comment">// 状态 status： 1（删除） 0（正常）</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr,[<span class="number">1</span>,<span class="number">1</span>],<span class="function">(<span class="params">err,results</span>) =&gt;</span> &#123; </span><br><span class="line">  <span class="keyword">if</span>(err) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err:&#x27;</span>, err)</span><br><span class="line">  <span class="keyword">if</span>(results.<span class="property">affectedRows</span> == <span class="number">1</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;标记删除成功！&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="cors跨域资源共享"><a href="#cors跨域资源共享" class="headerlink" title="cors跨域资源共享"></a>cors跨域资源共享</h1><ul>
<li>CORS（Cross-Origin Resource Sharing，跨域资源共享）解决跨域，是通过 HTTP 响应头决定浏览器是否阻止前端 JS 代码跨域获取资源</li>
<li>浏览器的同源安全策略默认会阻止网页“跨域”获取资源。但如果接口服务器配置了 CORS 相关的 HTTP 响应头，就可解除浏览器端的跨域访问限制</li>
<li>CORS 主要在服务器端进行配置。客户端浏览器无须做任何额外的配置，即可请求开启了 CORS 的接口。</li>
<li>CORS 在浏览器中有兼容性。只有支持 XMLHttpRequest Level2 的浏览器，才能正常访问开启了 CORS 的服务端接口（例如：IE10+、Chrome4+、FireFox3.5+）</li>
</ul>
<h2 id="express中使用cors"><a href="#express中使用cors" class="headerlink" title="express中使用cors"></a>express中使用cors</h2><p>运行 npm i cors 安装中间件</p>
<p>使用 const cors  &#x3D; require(‘cors’) 导入中间件</p>
<p>在路由之前调用 app.use(cors())配置中间件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一定要在路由之前配置cors中间件，从而解决接口跨域问题</span></span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由模块</span></span><br><span class="line"><span class="keyword">const</span> api = <span class="built_in">require</span>(<span class="string">&#x27;./api&#x27;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, api);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server started on port 3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="CORS-常见响应头"><a href="#CORS-常见响应头" class="headerlink" title="CORS 常见响应头"></a>CORS 常见响应头</h2><blockquote>
<p><code>Access-Control-Allow-Origin</code>：制定了允许访问资源的外域 URL</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;http://bruceblog.io&#x27;</span>)</span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>Access-Control-Allow-Headers</code></p>
</blockquote>
<ul>
<li>默认情况下，CORS 仅支持客户端向服务器发送如下的 9 个请求头：<code>Accept、Accept-Language、Content-Language、DPR、Downlink、Save-Data、Viewport-Width、Width 、Content-Type （值仅限于 text/plain、multipart/form-data、application/x-www-form-urlencoded 三者之一）</code></li>
<li>如果客户端向服务器发送了额外的请求头信息，则需要在服务器端，通过 A<code>ccess-Control-Allow-Headers</code> 对额外的请求头进行声明，否则这次请求会失败！</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 允许客户端额外向服务器发送请求 Content-Type 请求头和 X-Custom-Header请求头</span></span><br><span class="line"><span class="comment">// 注意：多个请求头之间使用英文的逗号经行分割</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;Content-Type, X-Custom-Header&#x27;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>Access-Control-Allow-Methods</code></p>
</blockquote>
<ul>
<li>默认情况下，CORS 仅支持客户端发起 GET、POST、HEAD 请求</li>
<li>如果客户端希望通过 PUT、DELETE 等方式请求服务器的资源，则需要在服务器端，通过 <code>Access-Control-Alow-Methods</code> 来指明实际请求所允许使用的 HTTP 方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只允许发送 POST, GET, DELETE, HEAD 请求</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;POST, GET, DELETE, HEAD&#x27;</span>)</span><br><span class="line"><span class="comment">// 允许所有的 HTTP请求方法</span></span><br><span class="line">res.<span class="title function_">setHEader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="CORS-请求分类"><a href="#CORS-请求分类" class="headerlink" title="CORS 请求分类"></a>CORS 请求分类</h2><blockquote>
<p>简单请求</p>
</blockquote>
<ul>
<li>请求方式：GET、POST、HEAD 三者之一</li>
<li>HTTP 头部信息不超过以下几种字段：无自定义头部字段、Accept、Accept-Language、Content-Language、DPR、Downlink、Save-Data、Viewport-Width、Width 、Content-Type（只有三个值 application&#x2F;x-www-formurlencoded、multipart&#x2F;form-data、text&#x2F;plain）</li>
</ul>
<blockquote>
<p>预检请求</p>
</blockquote>
<ul>
<li>请求方式为 GET、POST、HEAD 之外的请求 Method 类型</li>
<li>请求头中包含自定义头部字段</li>
<li>向服务器发送了 application&#x2F;json 格式的数据</li>
</ul>
<p>在浏览器与服务器正式通信之前，浏览器会先发送 OPTION 请求进行预检，以获知服务器是否允许该实际请求，所以这一次的 OPTION 请求称为“预检请求”。服务器成功响应预检请求后，才会发送真正的请求，并且携带真实数据</p>
<blockquote>
<p>简单请求和预检请求的区别</p>
</blockquote>
<p>简单请求特点：客户端与服务端之间只会发生一次请求</p>
<p>预检请求特点：客户端与服务端之间会发生两次请求，OPTION 预检请求成功之后，才会发起真正的请求</p>
<h1 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h1><h2 id="Session认证机制"><a href="#Session认证机制" class="headerlink" title="Session认证机制"></a>Session认证机制</h2><p>服务端渲染推荐使用 Session 认证机制</p>
<p>Cookie 是什么</p>
<ul>
<li><p>Cookie  是存储在用户浏览器中的一般不超过 4KB 的字符串</p>
</li>
<li><p>由 一个 名称（name）和 一个值（value）以及其他几个用于控制有效期、安全性、使用范围的可选属性组成</p>
</li>
<li><p>不同域名下的 Cookie  各自独立，每当客户端发起请求时，会自动把当前域名下的所有未过期的 Cookie   一同发送到服务器</p>
</li>
</ul>
<p>Cookie  的几大特性</p>
<ul>
<li><p>自动发送</p>
</li>
<li><p>域名独立</p>
</li>
<li><p>过期时限</p>
</li>
<li><p>4 KB 限制</p>
</li>
</ul>
<h3 id="Session-认证原理"><a href="#Session-认证原理" class="headerlink" title="Session 认证原理"></a>Session 认证原理</h3><img src="/img/522.png" />

<img src="/img/947.png" />

<p><strong>Cookie  不具有安全性 重要数据不建议存储在 Cookie  中</strong></p>
<h3 id="Express中使用session认证"><a href="#Express中使用session认证" class="headerlink" title="Express中使用session认证"></a>Express中使用session认证</h3><p>安装 express-session 中间件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install express-session</span><br></pre></td></tr></table></figure>

<p>配置express-session中间件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入express-session</span></span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br><span class="line"><span class="comment">// 配置express-session中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">  <span class="attr">secret</span>: <span class="string">&#x27;nanxun&#x27;</span>, <span class="comment">// secret 的值为任意字符串</span></span><br><span class="line">  <span class="attr">resave</span>: <span class="literal">false</span>,  <span class="comment">// 固定写法</span></span><br><span class="line">  <span class="attr">saveUninitialized</span>: <span class="literal">true</span>, <span class="comment">// 固定写法</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

<p>向 session 中存数据</p>
<p>中间件配置成功后，可通过 <code>req.session</code> 访问 session 对象，存储用户信息&#96;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取参数</span></span><br><span class="line">    req.<span class="property">session</span>.<span class="property">user</span> = req.<span class="property">body</span> <span class="comment">// 用户的信息</span></span><br><span class="line">    req.<span class="property">session</span>.<span class="property">isLogin</span> = req.<span class="property">body</span> <span class="comment">// 用户的登录状态</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">code</span>:<span class="number">200</span>, <span class="comment">// 响应的状态码</span></span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&#x27;登录成功&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>从 session 取数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/username&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">isLogin</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123; <span class="attr">code</span>: <span class="number">1</span>, <span class="attr">msg</span>: <span class="string">&#x27;fail&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">send</span>(&#123; <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">msg</span>: <span class="string">&#x27;success&#x27;</span>, <span class="attr">username</span>: req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">username</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>清空 session</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/logout&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 退出登录 清空当前客户端的 session 信息</span></span><br><span class="line">  req.<span class="property">session</span>.<span class="title function_">destroy</span>()</span><br><span class="line">  res.<span class="title function_">send</span>(&#123; <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">msg</span>: <span class="string">&#x27;logout 退出登录成功&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="Session-的局限性"><a href="#Session-的局限性" class="headerlink" title="Session 的局限性"></a>Session 的局限性</h3><ul>
<li>Session 认证机制需要配合 Cookie 才能实现。由于 Cookie 默认不支持跨域访问，所以，当涉及到前端跨域请求后端接口的时候，需要做很多额外的配置，才能实现跨域 Session 认证。</li>
<li>当前端请求后端接口不存在跨域问题的时候，推荐使用 Session 身份认证机制。</li>
<li>当前端需要跨域请求后端接口的时候，不推荐使用 Session 身份认证机制，推荐使用 JWT 认证机制</li>
</ul>
<h2 id="JWT认证"><a href="#JWT认证" class="headerlink" title="JWT认证"></a>JWT认证</h2><p>前后端分离推荐使用 JWT（JSON Web Token）认证机制，是目前最流行的跨域认证解决方案</p>
<h3 id="JWT-工作原理"><a href="#JWT-工作原理" class="headerlink" title="JWT 工作原理"></a>JWT 工作原理</h3><p>用户的信息通过 Token 字符串的形式，保存在客户端浏览器中。服务器通过还原 Token 字符串的形式来认证用户的身份</p>
<img src="/img/149.png" />

<h3 id="JWT-组成部分"><a href="#JWT-组成部分" class="headerlink" title="JWT 组成部分"></a>JWT 组成部分</h3><ul>
<li>由 Header、Payload、Signature 三部分组成</li>
<li>Payload 是真正的用户信息，加密后的字符串</li>
<li>Header 和 Signature 是安全性相关部分，保证 Token 安全性</li>
<li>三者使用 <code>.</code> 分隔</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Header</span>.<span class="property">Payload</span>.<span class="property">Signature</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Bearer</span> eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.<span class="property">eyJzdWIiOiJhZG1pbiIsImRhdGFTY29wZSI6MCwiZXhwIjoxNzMxNTc0ODkwLCJ1c2VySWQiOjIsImlhdCI6MTczMTU2NzY5MCwiYXV0aG9yaXRpZXMiOlsiUk9MRV9BRE1JTiJdLCJqdGkiOiI5ODQ3MGU3MmM0Zjk0YzQ5ODMxNGUyZTJhMWY0MGYwZSJ9</span>.<span class="property">U</span>-0i8RT3KYu1wd3wNisSaPizJrSWhwcTgZsBVdUMfk0</span><br></pre></td></tr></table></figure>

<h3 id="JWT的使用方式"><a href="#JWT的使用方式" class="headerlink" title="JWT的使用方式"></a>JWT的使用方式</h3><ul>
<li>客户端会把 JWT 存储在 localStorage 或 sessionStorage 中</li>
<li>此后客户端与服务端通信需要携带 JWT 进行身份认证，将 JWT 存在 HTTP 请求头 <code>Authorization</code> 字段中</li>
<li>加上 <code>Bearer</code> 前缀</li>
<li>Bearer 和 token 使用 空格 分隔</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Authorization: Bearer &lt;token&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Express-使用-JWT认证"><a href="#Express-使用-JWT认证" class="headerlink" title="Express 使用 JWT认证"></a>Express 使用 JWT认证</h3><p>安装：<code>jsonwebtoken</code> 用于生成 JWT 字符串;<code>express-jwt</code> 用于将 JWT 字符串解析还原成 JSON 对象</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install jsonwebtoken express-jwt</span><br></pre></td></tr></table></figure>

<p>定义 secret 密钥</p>
<ul>
<li>为保证 JWT 字符串的安全性，防止其在网络传输过程中被破解，需定义用于加密和解密的 secret 密钥</li>
<li>生成 JWT 字符串时，使用密钥加密信息，得到加密好的 JWT 字符串</li>
<li>把 JWT 字符串解析还原成 JSON 对象时，使用密钥解密</li>
</ul>
<p>生成 JWT 字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;登录成功&#x27;</span>,</span><br><span class="line">    <span class="comment">// 在登录成功之后， 调用 jwt.sign 生成 JWT 字符串 并通过 res.send() 的 token 属性发送给客户端</span></span><br><span class="line">    <span class="comment">// 参数1：用户信息对象</span></span><br><span class="line">    <span class="comment">// 参数2：加密的密钥</span></span><br><span class="line">    <span class="comment">// 参数3：配置对象（可以指定当前 token 的有效期）</span></span><br><span class="line">    <span class="attr">token</span>: jwt.<span class="title function_">sign</span>(&#123;<span class="attr">username</span>: userInfo.<span class="property">username</span>&#125;, secretKey, &#123;<span class="attr">expiresIn</span>: <span class="string">&#x27;10h&#x27;</span>&#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>JWT 字符串还原为 JSON 对象</p>
<ul>
<li>客户端访问有权限的接口时，需通过请求头的 <code>Authorization</code> 字段，将 Token 字符串发送到服务器进行身份认证</li>
<li>服务器可以通过 express-jwt 中间件将客户端发送过来的 Token 解析还原成 JSON 对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// express-jwt 5.x   npm install express-jwt@5</span></span><br><span class="line"><span class="comment">// 导入 express-jwt</span></span><br><span class="line"><span class="keyword">const</span> expressJWT = <span class="built_in">require</span>(<span class="string">&#x27;express-jwt&#x27;</span>);</span><br><span class="line"><span class="comment">// unless(&#123; path: [/^\/api\//] &#125;) 指定哪些接口无需jwt认证</span></span><br><span class="line"><span class="comment">// /api开头的接口都不需要访问权限</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">expressJWT</span>(&#123; <span class="attr">secret</span>: secretKey &#125;).<span class="title function_">unless</span>(&#123; <span class="attr">path</span>: [<span class="regexp">/^\/api\//</span>] &#125;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// express-jwt 7.x 及以上版本</span></span><br><span class="line"><span class="comment">// 导入 express-jwt</span></span><br><span class="line"><span class="keyword">const</span> &#123; expressjwt &#125; = <span class="built_in">require</span>(<span class="string">&#x27;express-jwt&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(</span><br><span class="line">  <span class="title function_">expressjwt</span>(&#123; <span class="attr">secret</span>: secretKey, <span class="attr">algorithms</span>: [<span class="string">&#x27;HS256&#x27;</span>] &#125;).<span class="title function_">unless</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>: [<span class="regexp">/^\/api\//</span>], <span class="comment">// 不需要认证的路由</span></span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>获取用户信息</p>
<ul>
<li>当 express-jwt 中间件配置成功后，即可在那些有权限的接口中，使用 <code>req.user</code> 对象，来访问从 JWT 字符串中解析出来的用户信息</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/getinfo&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//  express-jwt 中间件配置成功后 会把解析出来的用户信息挂载到这个 user 上</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">user</span>)</span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;获取信息成功&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: req.<span class="property">user</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>捕获解析 JWT 失败后产生的错误</p>
<ul>
<li>当使用 express-jwt 解析 Token 字符串时，如果客户端发送过来的 Token 字符串过期或不合法，会产生一个解析失败的错误，影响项目的正常运行</li>
<li>通过 Express 的错误中间件，捕获这个错误并进行相关的处理</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err.<span class="property">name</span> === <span class="string">&#x27;UnauthorizedError&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123; <span class="attr">code</span>: <span class="number">401</span>, <span class="attr">msg</span>: <span class="string">&#x27;无效的 token&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">send</span>(&#123; <span class="attr">code</span>: <span class="number">500</span>, <span class="attr">msg</span>: <span class="string">&#x27;未知的 error&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>uniapp</title>
    <url>/hyq/bc2ee5a9.html</url>
    <content><![CDATA[<h1 id="安装HBuilderX"><a href="#安装HBuilderX" class="headerlink" title="安装HBuilderX"></a>安装HBuilderX</h1><p>下载地址：<a href="https://www.dcloud.io/hbuilderx.html">https://www.dcloud.io/hbuilderx.html</a></p>
<p>HBuilderX，Windows为zip包，解压后才能使用</p>
<ol>
<li>首先，选中下载的zip包，点击<code>右键菜单</code>，点击<code>解压到当前文件夹</code></li>
<li>进入解压后的文件夹，找到HBuilderX.exe，直接点击打开</li>
</ol>
<img src="/img/install_windows.png" />

<p>创建桌面快捷方式</p>
<img src="/img/create_shortcut.png" />

<h1 id="uniapp-环境搭建"><a href="#uniapp-环境搭建" class="headerlink" title="uniapp 环境搭建"></a>uniapp 环境搭建</h1><p>创建 uniapp 项目</p>
<img src="/img/820.png" />

<img src="/img/024.png" />

<p>运行到浏览器</p>
<img src="/img/340.png" />

<img src="/img/437.png" />

<h1 id="项目的结构目录"><a href="#项目的结构目录" class="headerlink" title="项目的结构目录"></a>项目的结构目录</h1><blockquote>
<p>官方文档：<a href="https://uniapp.dcloud.net.cn/tutorial/project.html#%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84">https://uniapp.dcloud.net.cn/tutorial/project.html#%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├─pages                 业务页面文件存放的目录</span><br><span class="line">│  ├─index</span><br><span class="line">│  │  └─index.vue       index页面</span><br><span class="line">│  └─list</span><br><span class="line">│     └─list.vue        list页面</span><br><span class="line">├─static                存放应用引用的本地静态资源（如图片、视频等）的目录，注意：静态资源只能存放于此</span><br><span class="line">├─unpackage             非工程代码，一般存放运行或发行的编译结果</span><br><span class="line">├─main.js               Vue初始化入口文件</span><br><span class="line">├─App.vue               应用配置，用来配置App全局样式以及监听 应用生命周期</span><br><span class="line">├─manifest.json         配置应用名称、appid、logo、版本等打包信息，详见</span><br><span class="line">├─pages.json            配置页面路由、导航条、选项卡等页面类信息，详见</span><br><span class="line">└─uni.scss              这里是uni-app内置的常用样式变量 </span><br></pre></td></tr></table></figure>

<h1 id="创建和配置页面"><a href="#创建和配置页面" class="headerlink" title="创建和配置页面"></a>创建和配置页面</h1><img src="/img/045.png" />

<img src="/img/123.png" />

<p>list.vue 页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view&gt;</span><br><span class="line">		list页面</span><br><span class="line">	&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">	</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>page.json文件中查看配置</p>
<blockquote>
<p>注意：<strong>pages数组中第一项表示应用启动页</strong></p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="comment">//pages数组中第一项表示应用启动页，参考：https://uniapp.dcloud.io/collocation/pages</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/list/list&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;navigationBarTitleText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;文章列表&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;enablePullDownRefresh&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/index/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;navigationBarTitleText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uni-app&quot;</span></span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;globalStyle&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;navigationBarTextStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;black&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;navigationBarTitleText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uni-app&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;navigationBarBackgroundColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#F8F8F8&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;backgroundColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#F8F8F8&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;uniIdRouter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>浏览器查看测试结果</p>
<img src="/img/734.png" />

<h1 id="globalStyle全局配置"><a href="#globalStyle全局配置" class="headerlink" title="globalStyle全局配置"></a>globalStyle全局配置</h1><blockquote>
<p><code>page.json</code>文件中 <code>globalStyle</code> 节点</p>
<p>用于设置应用的状态栏、导航条、标题、窗口背景色等</p>
<p>更多属性配置可以参考文档：<a href="https://uniapp.dcloud.io/collocation/pages.html#globalstyle">https://uniapp.dcloud.io/collocation/pages.html#globalstyle</a></p>
</blockquote>
<table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>默认值</th>
<th>描述</th>
<th>平台差异说明</th>
</tr>
</thead>
<tbody><tr>
<td>navigationBarBackgroundColor</td>
<td>HexColor</td>
<td>#F7F7F7</td>
<td>导航栏背景颜色（同状态栏背景色）</td>
<td>APP与H5为#F7F7F7，小程序平台请参考相应小程序文档</td>
</tr>
<tr>
<td>navigationBarTextStyle</td>
<td>String</td>
<td>white</td>
<td>导航栏标题颜色及状态栏前景颜色，仅支持 black&#x2F;white</td>
<td></td>
</tr>
<tr>
<td>navigationBarTitleText</td>
<td>String</td>
<td></td>
<td>导航栏标题文字内容</td>
<td></td>
</tr>
<tr>
<td>navigationStyle</td>
<td>String</td>
<td>default</td>
<td>导航栏样式，仅支持 default&#x2F;custom。custom即取消默认的原生导航栏，需看<a href="https://uniapp.dcloud.io/collocation/pages#customnav">使用注意</a></td>
<td>微信小程序 7.0+、百度小程序、H5、App（2.0.3+）</td>
</tr>
<tr>
<td>backgroundColor</td>
<td>HexColor</td>
<td>#ffffff</td>
<td>下拉显示出来的窗口的背景色</td>
<td>微信小程序</td>
</tr>
<tr>
<td>backgroundTextStyle</td>
<td>String</td>
<td>dark</td>
<td>下拉 loading 的样式，仅支持 dark &#x2F; light</td>
<td>微信小程序</td>
</tr>
<tr>
<td>enablePullDownRefresh</td>
<td>Boolean</td>
<td>false</td>
<td>是否开启下拉刷新，详见<a href="https://uniapp.dcloud.io/tutorial/page.html#lifecycle">页面生命周期</a>。</td>
<td></td>
</tr>
<tr>
<td>onReachBottomDistance</td>
<td>Number</td>
<td>50</td>
<td>页面上拉触底事件触发时距页面底部距离，单位只支持px，详见<a href="https://uniapp.dcloud.io/tutorial/page.html#lifecycle">页面生命周期</a></td>
<td></td>
</tr>
</tbody></table>
<h1 id="视图容器"><a href="#视图容器" class="headerlink" title="视图容器"></a>视图容器</h1><h2 id="view组件"><a href="#view组件" class="headerlink" title="view组件"></a>view组件</h2><p>文档：<a href="https://uniapp.dcloud.net.cn/component/view.html">https://uniapp.dcloud.net.cn/component/view.html</a></p>
<p>视图容器</p>
<p>它类似于传统html中的div，用于包裹各种元素内容。</p>
<p>如果使用<a href="https://uniapp.dcloud.io/tutorial/nvue-outline">nvue</a>，则需注意，包裹文字应该使用<code>&lt;text&gt;</code>组件</p>
<table>
<thead>
<tr>
<th align="left">属性名</th>
<th align="left">类型</th>
<th align="left">默认值</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">hover-class</td>
<td align="left">String</td>
<td align="left">none</td>
<td align="left">指定按下去的样式类。当 hover-class&#x3D;”none” 时，没有点击态效果</td>
</tr>
<tr>
<td align="left">hover-stop-propagation</td>
<td align="left">Boolean</td>
<td align="left">false</td>
<td align="left">指定是否阻止本节点的祖先节点出现点击态，App、H5、支付宝小程序、百度小程序不支持（支付宝小程序、百度小程序文档中都有此属性，实测未支持）</td>
</tr>
<tr>
<td align="left">hover-start-time</td>
<td align="left">Number</td>
<td align="left">50</td>
<td align="left">按住后多久出现点击态，单位毫秒</td>
</tr>
<tr>
<td align="left">hover-stay-time</td>
<td align="left">Number</td>
<td align="left">400</td>
<td align="left">手指松开后点击态保留时间，单位毫秒</td>
</tr>
</tbody></table>
<h2 id="scroll-view组件"><a href="#scroll-view组件" class="headerlink" title="scroll-view组件"></a>scroll-view组件</h2><p>文档：<a href="https://uniapp.dcloud.net.cn/component/scroll-view.html">https://uniapp.dcloud.net.cn/component/scroll-view.html</a></p>
<p>可滚动视图区域。用于区域滚动。</p>
<p>需注意在webview渲染的页面中，区域滚动的性能不及页面滚动</p>
<table>
<thead>
<tr>
<th align="left">属性名</th>
<th align="left">类型</th>
<th align="left">默认值</th>
<th align="left">说明</th>
<th align="left">平台差异说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">scroll-x</td>
<td align="left">Boolean</td>
<td align="left">false</td>
<td align="left">允许横向滚动</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">scroll-y</td>
<td align="left">Boolean</td>
<td align="left">false</td>
<td align="left">允许纵向滚动</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">upper-threshold</td>
<td align="left">Number&#x2F;String</td>
<td align="left">50</td>
<td align="left">距顶部&#x2F;左边多远时（单位px），触发 scrolltoupper 事件</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">lower-threshold</td>
<td align="left">Number&#x2F;String</td>
<td align="left">50</td>
<td align="left">距底部&#x2F;右边多远时（单位px），触发 scrolltolower 事件</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">scroll-top</td>
<td align="left">Number&#x2F;String</td>
<td align="left"></td>
<td align="left">设置竖向滚动条位置</td>
<td align="left"></td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view class=&quot;content&quot;&gt;</span><br><span class="line">		&lt;scroll-view class=&quot;scroll&quot; scroll-x scroll-y&gt;</span><br><span class="line">			&lt;view class=&quot;group&quot;&gt;</span><br><span class="line">				&lt;view class=&quot;item&quot;&gt;</span><br><span class="line">					杂志</span><br><span class="line">				&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">				&lt;view class=&quot;item&quot;&gt;</span><br><span class="line">					新闻</span><br><span class="line">				&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">				&lt;view class=&quot;item&quot;&gt;</span><br><span class="line">					报刊</span><br><span class="line">				&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">				&lt;view class=&quot;item&quot;&gt;</span><br><span class="line">					玄幻</span><br><span class="line">				&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">				&lt;view class=&quot;item&quot;&gt;</span><br><span class="line">					灵异</span><br><span class="line">				&lt;/view&gt;</span><br><span class="line">			&lt;/view&gt;</span><br><span class="line">		&lt;/scroll-view&gt;</span><br><span class="line">		&lt;scroll-view class=&quot;scroll-view_H&quot; scroll-x scroll-left=&quot;120&quot;&gt;</span><br><span class="line">			&lt;view id=&quot;demo1&quot; class=&quot;scroll-view-item_H uni-bg-red&quot;&gt;杂志&lt;/view&gt;</span><br><span class="line">			&lt;view id=&quot;demo2&quot; class=&quot;scroll-view-item_H uni-bg-green&quot;&gt;新闻&lt;/view&gt;</span><br><span class="line">			&lt;view id=&quot;demo3&quot; class=&quot;scroll-view-item_H uni-bg-blue&quot;&gt;报刊&lt;/view&gt;</span><br><span class="line">		&lt;/scroll-view&gt;</span><br><span class="line">	&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">	.scroll &#123;</span><br><span class="line">		border: 1px solid red;</span><br><span class="line">		box-sizing: border-box;</span><br><span class="line">		height: 220rpx;</span><br><span class="line">		height: 100rpx;</span><br><span class="line"></span><br><span class="line">		.group &#123;</span><br><span class="line">			white-space: nowrap;</span><br><span class="line"></span><br><span class="line">			.item &#123;</span><br><span class="line">				width: 220rpx;</span><br><span class="line">				height: 220rpx;</span><br><span class="line">				background: royalblue;</span><br><span class="line">				display: inline-block;</span><br><span class="line">				margin-right: 10rpx;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	.scroll-view_H &#123;</span><br><span class="line">		white-space: nowrap;</span><br><span class="line">		width: 100%;</span><br><span class="line"></span><br><span class="line">		.scroll-view-item_H &#123;</span><br><span class="line">			display: inline-block;</span><br><span class="line">			width: 100%;</span><br><span class="line">			height: 300rpx;</span><br><span class="line">			line-height: 300rpx;</span><br><span class="line">			text-align: center;</span><br><span class="line">			font-size: 36rpx;</span><br><span class="line">		&#125;</span><br><span class="line">		.uni-bg-red&#123;</span><br><span class="line">			background-color: red;</span><br><span class="line">		&#125;</span><br><span class="line">		.uni-bg-green&#123;</span><br><span class="line">			background-color: green;</span><br><span class="line">		&#125;</span><br><span class="line">		.uni-bg-blue&#123;</span><br><span class="line">			background-color: blue;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="swiper组件"><a href="#swiper组件" class="headerlink" title="swiper组件"></a>swiper组件</h2><p>文档：<a href="https://uniapp.dcloud.net.cn/component/swiper.html">https://uniapp.dcloud.net.cn/component/swiper.html</a></p>
<p>滑块视图容器。</p>
<p>一般用于左右滑动或上下滑动，比如banner轮播图。</p>
<p>注意滑动切换和滚动的区别，滑动切换是一屏一屏的切换。swiper下的每个swiper-item是一个滑动切换区域，不能停留在2个滑动区域之间</p>
<table>
<thead>
<tr>
<th align="left">属性名</th>
<th align="left">类型</th>
<th align="left">默认值</th>
<th align="left">说明</th>
<th align="left">平台差异说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">indicator-dots</td>
<td align="left">Boolean</td>
<td align="left">false</td>
<td align="left">是否显示面板指示点</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">indicator-color</td>
<td align="left">Color</td>
<td align="left">rgba(0, 0, 0, .3)</td>
<td align="left">指示点颜色</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">indicator-active-color</td>
<td align="left">Color</td>
<td align="left">#000000</td>
<td align="left">当前选中的指示点颜色</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">autoplay</td>
<td align="left">Boolean</td>
<td align="left">false</td>
<td align="left">是否自动切换</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">current</td>
<td align="left">Number</td>
<td align="left">0</td>
<td align="left">当前所在滑块的 index</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">interval</td>
<td align="left">Number</td>
<td align="left">5000</td>
<td align="left">自动切换时间间隔</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">duration</td>
<td align="left">Number</td>
<td align="left">500</td>
<td align="left">滑动动画时长</td>
<td align="left">app-nvue不支持</td>
</tr>
<tr>
<td align="left">circular</td>
<td align="left">Boolean</td>
<td align="left">false</td>
<td align="left">是否采用衔接滑动，即播放到末尾后重新回到开头</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">vertical</td>
<td align="left">Boolean</td>
<td align="left">false</td>
<td align="left">滑动方向是否为纵向</td>
<td align="left"></td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view class=&quot;content&quot;&gt;</span><br><span class="line">		&lt;view class=&quot;uni-margin-wrap&quot;&gt;</span><br><span class="line">			&lt;swiper class=&quot;swiper&quot; circular indicator-dots indicator-active-color=&quot;#fff&quot;  autoplay interval=&quot;2000&quot;</span><br><span class="line">				duration=&quot;1000&quot;&gt;</span><br><span class="line">				&lt;swiper-item&gt;</span><br><span class="line">					&lt;view class=&quot;swiper-item uni-bg-red&quot;&gt;杂志&lt;/view&gt;</span><br><span class="line">				&lt;/swiper-item&gt;</span><br><span class="line">				&lt;swiper-item&gt;</span><br><span class="line">					&lt;view class=&quot;swiper-item uni-bg-green&quot;&gt;新闻&lt;/view&gt;</span><br><span class="line">				&lt;/swiper-item&gt;</span><br><span class="line">				&lt;swiper-item&gt;</span><br><span class="line">					&lt;view class=&quot;swiper-item uni-bg-blue&quot;&gt;报刊&lt;/view&gt;</span><br><span class="line">				&lt;/swiper-item&gt;</span><br><span class="line">			&lt;/swiper&gt;</span><br><span class="line">		&lt;/view&gt;</span><br><span class="line">	&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">	.uni-margin-wrap &#123;</span><br><span class="line">		width: 690rpx;</span><br><span class="line">		width: 100%;</span><br><span class="line"></span><br><span class="line">		.swiper &#123;</span><br><span class="line">			height: 300rpx;</span><br><span class="line"></span><br><span class="line">			.swiper-item &#123;</span><br><span class="line">				display: block;</span><br><span class="line">				height: 300rpx;</span><br><span class="line">				line-height: 300rpx;</span><br><span class="line">				text-align: center;</span><br><span class="line">			&#125;</span><br><span class="line">			.uni-bg-red &#123;</span><br><span class="line">				background-color: red;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			.uni-bg-green &#123;</span><br><span class="line">				background-color: green;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			.uni-bg-blue &#123;</span><br><span class="line">				background-color: blue;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="媒体组件"><a href="#媒体组件" class="headerlink" title="媒体组件"></a>媒体组件</h1><h2 id="image组件"><a href="#image组件" class="headerlink" title="image组件"></a>image组件</h2><p>文档：<a href="https://uniapp.dcloud.net.cn/component/image.html">https://uniapp.dcloud.net.cn/component/image.html</a></p>
<p>图片组件</p>
<table>
<thead>
<tr>
<th align="left">属性名</th>
<th align="left">类型</th>
<th align="left">默认值</th>
<th align="left">说明</th>
<th align="left">平台差异说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">src</td>
<td align="left">String</td>
<td align="left"></td>
<td align="left">图片资源地址</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">mode</td>
<td align="left">String</td>
<td align="left">‘scaleToFill’</td>
<td align="left">图片裁剪、缩放的模式</td>
<td align="left"></td>
</tr>
</tbody></table>
<blockquote>
<p>mode 有效值： mode 有 14 种模式，其中 5 种是缩放模式，9 种是裁剪模式</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view class=&quot;content&quot;&gt;</span><br><span class="line">		&lt;image style=&quot;width: 200px; height: 200px; background-color: #eeeeee;&quot; :mode=&quot;mode&quot; :src=&quot;src&quot;</span><br><span class="line">			&gt;&lt;/image&gt;</span><br><span class="line">	&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">	const mode = &#x27;scaleToFill&#x27;</span><br><span class="line">	const src = &#x27;https://qiniu-web-assets.dcloud.net.cn/unidoc/zh/shuijiao.jpg&#x27;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="video组件"><a href="#video组件" class="headerlink" title="video组件"></a>video组件</h2><p>文档：<a href="https://uniapp.dcloud.net.cn/component/video.html">https://uniapp.dcloud.net.cn/component/video.html</a></p>
<p>视频播放组件</p>
<table>
<thead>
<tr>
<th align="left">属性名</th>
<th align="left">类型</th>
<th align="left">默认值</th>
<th align="left">说明</th>
<th align="left">平台差异说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">src</td>
<td align="left">String</td>
<td align="left"></td>
<td align="left">要播放视频的资源地址</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">autoplay</td>
<td align="left">Boolean</td>
<td align="left">false</td>
<td align="left">是否自动播放</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">loop</td>
<td align="left">Boolean</td>
<td align="left">false</td>
<td align="left">是否循环播放</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">muted</td>
<td align="left">Boolean</td>
<td align="left">false</td>
<td align="left">是否静音播放</td>
<td align="left">飞书小程序不支持</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view class=&quot;content&quot;&gt;</span><br><span class="line">		&lt;video class=&quot;myVideo&quot; src=&quot;https://qiniu-web-assets.dcloud.net.cn/unidoc/zh/2minute-demo.mp4&quot; enable-danmu</span><br><span class="line">			danmu-btn controls&gt;&lt;/video&gt;</span><br><span class="line">	&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">	.myVideo&#123;</span><br><span class="line">		width: 100%;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="表单组件"><a href="#表单组件" class="headerlink" title="表单组件"></a>表单组件</h1><h2 id="button组件"><a href="#button组件" class="headerlink" title="button组件"></a>button组件</h2><p>文档：<a href="https://uniapp.dcloud.net.cn/component/button.html">https://uniapp.dcloud.net.cn/component/button.html</a></p>
<p>按钮组件</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>类型</th>
<th>默认值</th>
<th>说明</th>
<th>平台差异说明</th>
</tr>
</thead>
<tbody><tr>
<td>size</td>
<td>String</td>
<td>default</td>
<td>按钮的大小</td>
<td></td>
</tr>
<tr>
<td>type</td>
<td>String</td>
<td>default</td>
<td>按钮的样式类型</td>
<td></td>
</tr>
<tr>
<td>plain</td>
<td>Boolean</td>
<td>false</td>
<td>按钮是否镂空，背景色透明</td>
<td></td>
</tr>
<tr>
<td>disabled</td>
<td>Boolean</td>
<td>false</td>
<td>是否禁用</td>
<td></td>
</tr>
<tr>
<td>loading</td>
<td>Boolean</td>
<td>false</td>
<td>名称前是否带 loading 图标</td>
<td>H5、App(App-nvue 平台，在 ios 上为雪花，Android上为圆圈)</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view class=&quot;content&quot;&gt;</span><br><span class="line">		&lt;button&gt;默认按钮&lt;/button&gt;</span><br><span class="line">		&lt;button size=&quot;mini&quot;&gt;mini按钮&lt;/button&gt;</span><br><span class="line">		&lt;button type=&quot;primary&quot;&gt;type=primary按钮&lt;/button&gt;</span><br><span class="line">		&lt;button type=&quot;primary&quot; plain&gt;type=primary的镂空按钮&lt;/button&gt;</span><br><span class="line">		&lt;button type=&quot;primary&quot; disabled&gt;type=primary的禁用按钮&lt;/button&gt;</span><br><span class="line">		&lt;button type=&quot;primary&quot; loading&gt;type=primary的loading按钮&lt;/button&gt;</span><br><span class="line">	&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">	</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="navigator组件"><a href="#navigator组件" class="headerlink" title="navigator组件"></a>navigator组件</h1><p>文档：<a href="https://uniapp.dcloud.net.cn/component/navigator.html#navigator">https://uniapp.dcloud.net.cn/component/navigator.html#navigator</a></p>
<p>页面跳转。</p>
<p>该组件类似HTML中的<code>&lt;a&gt;</code>组件，但只能跳转本地页面。目标页面必须在pages.json中注册</p>
<table>
<thead>
<tr>
<th align="left">属性名</th>
<th align="left">类型</th>
<th align="left">默认值</th>
<th align="left">说明</th>
<th align="left">平台差异说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">url</td>
<td align="left">String</td>
<td align="left"></td>
<td align="left">应用内的跳转链接，值为相对路径或绝对路径，如：”..&#x2F;first&#x2F;first”，”&#x2F;pages&#x2F;first&#x2F;first”，注意不能加 <code>.vue</code> 后缀</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">open-type</td>
<td align="left">String</td>
<td align="left">navigate</td>
<td align="left">跳转方式</td>
<td align="left"></td>
</tr>
</tbody></table>
<p><strong>open-type 有效值</strong></p>
<p>文档：<a href="https://uniapp.dcloud.net.cn/api/router?id=navigateto">https://uniapp.dcloud.net.cn/api/router?id=navigateto</a></p>
<table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">说明</th>
<th align="left">平台差异说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">navigate</td>
<td align="left">对应 uni.navigateTo 的功能</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">redirect</td>
<td align="left">对应 uni.redirectTo 的功能</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">switchTab</td>
<td align="left">对应 uni.switchTab 的功能</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">reLaunch</td>
<td align="left">对应 uni.reLaunch 的功能</td>
<td align="left">抖音小程序与飞书小程序不支持</td>
</tr>
<tr>
<td align="left">navigateBack</td>
<td align="left">对应 uni.navigateBack 的功能</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">exit</td>
<td align="left">退出小程序，target&#x3D;”miniProgram”时生效</td>
<td align="left">微信2.1.0+、百度2.5.2+、QQ1.4.7+</td>
</tr>
</tbody></table>
<blockquote>
<p>注意：</p>
<ul>
<li>跳转tabbar页面，必须设置open-type&#x3D;”switchTab”</li>
<li>navigator-hover 默认为 {background-color: rgba(0, 0, 0, 0.1); opacity: 0.7;}, <code>&lt;navigator&gt;</code> 的子节点背景色应为透明色。</li>
<li>navigator-<code>open-type</code>属性 如果使用对应的值，则对应值的功能会高于对应跳转路径。</li>
<li>app-nvue 平台只有纯nvue项目（render为native）才支持 <code>&lt;navigator&gt;</code>。非render为native的情况下，nvue暂不支持navigator组件，请使用API跳转。</li>
<li>app下退出应用，Android平台可以使用<a href="https://www.html5plus.org/doc/zh_cn/runtime.html#plus.runtime.quit">plus.runtime.quit</a>。iOS没有退出应用的概念。</li>
<li><a href="https://ext.dcloud.net.cn/plugin?id=1182">uLink组件</a>是navigator组件的增强版，样式上自带下划线，功能上支持打开在线网页、其他App的schema、mailto发邮件、tel打电话。</li>
<li>Vue3 项目因 SSR 需要，H5 端会在外层嵌套 a 标签</li>
</ul>
</blockquote>
<h1 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h1><p>文档：<a href="https://uniapp.dcloud.net.cn/api/router.html">https://uniapp.dcloud.net.cn/api/router.html</a></p>
<ul>
<li>uni.navigateTo</li>
<li>uni.redirectTo</li>
<li>uni.switchTab</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    &lt;navigator url=&quot;/pages/test01/test01&quot;&gt;跳转到测试页(带返回按钮)&lt;/navigator&gt;</span><br><span class="line">    &lt;navigator url=&quot;/pages/test01/test01&quot; open-type=&quot;redirect&quot;&gt;跳转到测试页redirect(不带返回按钮)&lt;/navigator&gt;</span><br><span class="line">    &lt;navigator url=&quot;/pages/index/index&quot; open-type=&quot;switchTab&quot;&gt;跳转到tabbar的首页&lt;/navigator&gt;</span><br><span class="line">      </span><br><span class="line">    &lt;!-- 编程式导航 和上面三个是对应的 --&gt;</span><br><span class="line">	&lt;!-- 使用点击事件跳转 --&gt;</span><br><span class="line">    &lt;button type=&quot;primary&quot; @click=&quot;routerNavigate&quot;&gt;跳转到测试页(带返回按钮)&lt;/button&gt;</span><br><span class="line">    &lt;button type=&quot;primary&quot; @click=&quot;routerRedirect&quot;&gt;跳转到测试页(不带返回按钮)&lt;/button&gt;</span><br><span class="line">    &lt;button type=&quot;primary&quot; @click=&quot;routerSwichtab&quot;&gt;到tabbar的首页&lt;/button&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">// 定义导航方法</span><br><span class="line">const routerNavigate = () =&gt; &#123;</span><br><span class="line">  uni.navigateTo(&#123;</span><br><span class="line">    url: &#x27;/pages/test01/test01&#x27;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const routerRedirect = () =&gt; &#123;</span><br><span class="line">  uni.redirectTo(&#123;</span><br><span class="line">    url: &#x27;/pages/test01/test01&#x27;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const routerSwichtab = () =&gt; &#123;</span><br><span class="line">  uni.switchTab(&#123;</span><br><span class="line">    url: &#x27;/pages/index/index&#x27;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">/* 样式部分 */</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="tabBar-配置"><a href="#tabBar-配置" class="headerlink" title="tabBar 配置"></a>tabBar 配置</h1><p>文档：<a href="https://uniapp.dcloud.net.cn/collocation/pages.html#tabbar">https://uniapp.dcloud.net.cn/collocation/pages.html#tabbar</a></p>
<table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>必填</th>
<th>默认值</th>
<th>描述</th>
<th>平台差异说明</th>
</tr>
</thead>
<tbody><tr>
<td>color</td>
<td>HexColor</td>
<td>是</td>
<td></td>
<td>tab 上的文字默认颜色</td>
<td></td>
</tr>
<tr>
<td>selectedColor</td>
<td>HexColor</td>
<td>是</td>
<td></td>
<td>tab 上的文字选中时的颜色</td>
<td></td>
</tr>
<tr>
<td>backgroundColor</td>
<td>HexColor</td>
<td>是</td>
<td></td>
<td>tab 的背景色</td>
<td></td>
</tr>
<tr>
<td>borderStyle</td>
<td>String</td>
<td>否</td>
<td>black</td>
<td>tabbar 上边框的颜色，可选值 black&#x2F;white</td>
<td>App 2.3.4+ 支持其他颜色值、H5 3.0.0+</td>
</tr>
<tr>
<td>blurEffect</td>
<td>String</td>
<td>否</td>
<td>none</td>
<td>iOS 高斯模糊效果，可选值 dark&#x2F;extralight&#x2F;light&#x2F;none（参考:<a href="https://ask.dcloud.net.cn/article/36617">使用说明 (opens new window)</a>）</td>
<td>App 2.4.0+ 支持、H5 3.0.0+（只有最新版浏览器才支持）</td>
</tr>
<tr>
<td>list</td>
<td>Array</td>
<td>是</td>
<td></td>
<td>tab 的列表，详见 list 属性说明，最少2个、最多5个 tab</td>
<td></td>
</tr>
<tr>
<td>position</td>
<td>String</td>
<td>否</td>
<td>bottom</td>
<td>可选值 bottom、top</td>
<td>top 值仅微信小程序支持</td>
</tr>
</tbody></table>
<p>创建页面 (每次创建页面都要在<strong>pages.json中的pages节点下配置路径</strong>)</p>
<img src="/img/828.png" />

<p>将图片拷贝的静态文件夹，有选中的图片和不选中的图片</p>
<img src="/img/244.png" />

<p>page.json中配置一下tabbar</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;tabBar&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#333&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;selectedColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#015FF9&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;首页&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/index/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/images/tabbar/home.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/images/tabbar/home-h.png&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;列表&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/list/list&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/images/tabbar/list.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/images/tabbar/list-h.png&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我们&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/about/about&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/images/tabbar/user.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/images/tabbar/user-h.png&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>然后在浏览器就可以看到效果了，点击之后可以切换到对应的界面</p>
<img src="/img/227.png" />

<h1 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h1><img src="/img/241.png" />

<img src="/img/212.png" />

<p>在 vue-component 目录下新建一个 vue 文件 ，名字可以随便取 比如：vue3Setup.vue</p>
<img src="/img/2214.png" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- vue3Setup.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view&gt;</span><br><span class="line"></span><br><span class="line">	&lt;/view&gt;	</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">	</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>然后再次新建组件的时候就可以选择刚刚这个自定义的组件模板</p>
<img src="/img/2220.png" />

<h1 id="easycom-自动导入自定义组件"><a href="#easycom-自动导入自定义组件" class="headerlink" title="easycom 自动导入自定义组件"></a>easycom 自动导入自定义组件</h1><p>文档：<a href="https://uniapp.dcloud.net.cn/component/#easycom">组件使用的入门教程 | uni-app官网</a></p>
<blockquote>
<p>如果扩展组件符合uni-app的 <code>easycom</code> 组件规范，则可以免注册，直接使用。比如 uni-ui 扩展组件就符合<code>easycom </code>组件规范。</p>
<p>如果组件不符合 easycom 规范，则需要在代码里手动 import 和注册组件，然后才能使用</p>
</blockquote>
<h2 id="easycom组件规范"><a href="#easycom组件规范" class="headerlink" title="easycom组件规范"></a>easycom组件规范</h2><blockquote>
<p><code>HBuilderX 2.5.5</code>起支持</p>
</blockquote>
<p>传统 vue 组件，需要安装、引用、注册，三个步骤后才能使用组件。<code>easycom</code>将其精简为一步。</p>
<p>只要组件安装在项目的 components 目录下或 <code>uni_modules </code>目录下，并符合 <code>components/组件名称/组件名称.(vue|uvue) </code>目录结构（注意：当同时存在 vue 和 uvue 时，uni-app 项目优先使用 vue 文件，而uni-app x 项目优先使用 uvue 文件，<a href="https://doc.dcloud.net.cn/uni-app-x/component/#%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91%E5%90%8C%E6%97%B6%E5%85%BC%E5%AE%B9-uni-app-x-%E5%92%8C-uni-app-%E7%9A%84%E7%BB%84%E4%BB%B6">详情</a>） 就可以不用引用、注册，直接在页面中使用</p>
<p><code>easycom</code>是自动开启的，不需要手动开启</p>
<p>如果你的组件名称或路径不符合easycom的默认规范，可以在<code>pages.json</code>的<code>easycom</code>节点进行个性化设置，自定义匹配组件的策略。<a href="https://uniapp.dcloud.net.cn/collocation/pages#easycom">另见</a></p>
<h2 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h2><p>先创建  components  目录 –&gt;右键选择 创建组件</p>
<img src="/img/134.png" />

<img src="/img/119.png" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div class=&quot;form-container&quot;&gt;</span><br><span class="line">		&lt;form @submit=&quot;onSubmit&quot;&gt;</span><br><span class="line">			&lt;div class=&quot;row&quot;&gt;</span><br><span class="line">				&lt;input type=&quot;text&quot; name=&quot;username&quot; placeholder=&quot;请输入用户名&quot; /&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">			&lt;div class=&quot;row&quot;&gt;</span><br><span class="line">				&lt;textarea name=&quot;content&quot; placeholder=&quot;请输入内容&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">			&lt;div class=&quot;row&quot;&gt;</span><br><span class="line">				&lt;view class=&quot;radioList&quot;&gt;</span><br><span class="line">					&lt;label&gt;性别：&lt;/label&gt;</span><br><span class="line">					&lt;radio-group name=&quot;gender&quot;&gt;</span><br><span class="line">						&lt;label&gt;</span><br><span class="line">							&lt;radio value=&quot;男&quot; /&gt;男</span><br><span class="line">						&lt;/label&gt;</span><br><span class="line">						&lt;label&gt;</span><br><span class="line">							&lt;radio value=&quot;女&quot; /&gt;女</span><br><span class="line">						&lt;/label&gt;</span><br><span class="line">						&lt;label&gt;</span><br><span class="line">							&lt;radio value=&quot;保密&quot; checked /&gt;保密</span><br><span class="line">						&lt;/label&gt;</span><br><span class="line">					&lt;/radio-group&gt;</span><br><span class="line">				&lt;/view&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">			&lt;div class=&quot;row&quot;&gt;</span><br><span class="line">				&lt;picker :range=&quot;options&quot; name=&quot;school&quot; :value=&quot;selectValue&quot; @change=&quot;pickerChange&quot;&gt;</span><br><span class="line">					&lt;view&gt;点击选择学历：&#123;&#123; options[selectValue] &#125;&#125;&lt;/view&gt;</span><br><span class="line">				&lt;/picker&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">			&lt;div class=&quot;row&quot;&gt;</span><br><span class="line">				&lt;button form-type=&quot;submit&quot; type=&quot;primary&quot;&gt;提交表单&lt;/button&gt;</span><br><span class="line">				&lt;button form-type=&quot;reset&quot; type=&quot;default&quot;&gt;重置表单&lt;/button&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line">		&lt;/form&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">	import &#123;</span><br><span class="line">		ref</span><br><span class="line">	&#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">	const obj = ref(&#123;&#125;);</span><br><span class="line">	const options = [&quot;高中&quot;, &quot;大专&quot;, &quot;本科&quot;, &quot;博士&quot;];</span><br><span class="line">	const selectValue = ref(2);</span><br><span class="line"></span><br><span class="line">	const onSubmit = (e) =&gt; &#123;</span><br><span class="line">		obj.value = e.detail.value;</span><br><span class="line">		obj.value.school = options[selectValue.value];</span><br><span class="line">		console.log(obj.value);</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	const pickerChange = (e) =&gt; &#123;</span><br><span class="line">		selectValue.value = e.detail.value;</span><br><span class="line">	&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">	.form-container &#123;</span><br><span class="line">		display: flex;</span><br><span class="line">		justify-content: center;</span><br><span class="line">		align-items: center;</span><br><span class="line">		// height: 100vh; /* 使容器占满整个视口高度 */</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	form &#123;</span><br><span class="line">		width: 100%;</span><br><span class="line">		padding: 20rpx;</span><br><span class="line">		margin: 20rpx;</span><br><span class="line">		border: 1px solid #ccc;</span><br><span class="line">		border-radius: 10rpx;</span><br><span class="line">		box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	.row &#123;</span><br><span class="line">		margin-bottom: 15px;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	input &#123;</span><br><span class="line">		height: 2.5rem;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	input,</span><br><span class="line">	textarea &#123;</span><br><span class="line">		border: 1px solid #eee;</span><br><span class="line">		width: 100%;</span><br><span class="line">		padding: 20rpx;</span><br><span class="line">		box-sizing: border-box;</span><br><span class="line">		border-radius: 8rpx;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	textarea &#123;</span><br><span class="line">		resize: vertical;</span><br><span class="line">	&#125;</span><br><span class="line">	.radioList&#123;</span><br><span class="line">		display: flex;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	button &#123;</span><br><span class="line">		padding: 6rpx 20rpx;</span><br><span class="line">		margin: 10rpx 0;</span><br><span class="line">		border: none;</span><br><span class="line">		border-radius: 8rpx;</span><br><span class="line">		cursor: pointer;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	button[type=&quot;primary&quot;] &#123;</span><br><span class="line">		background-color: #409EFF;</span><br><span class="line">		color: white;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	button[type=&quot;default&quot;] &#123;</span><br><span class="line">		background-color: #ccc;</span><br><span class="line">		color: black;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	button[type=&quot;primary&quot;]:hover &#123;</span><br><span class="line">		background-color: #66b1ff;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	button[type=&quot;default&quot;]:hover &#123;</span><br><span class="line">		background-color: #ddd;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	label &#123;</span><br><span class="line">		display: block;</span><br><span class="line">		margin-bottom: 5px;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	radio-group &#123;</span><br><span class="line">		display: flex;</span><br><span class="line">		gap: 20rpx;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>在页面中使用组件</p>
<blockquote>
<p>注意在使用组件的使用 组件的命名有两种 <code>&lt;my-component-name&gt;</code> 和 <code>&lt;MyComponentName&gt;</code> 都是一样的  </p>
<p>一个是使用短横线分隔命名 还有一个是使用驼峰命名 </p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view&gt;</span><br><span class="line">		&lt;componentA&gt;&lt;/componentA&gt;</span><br><span class="line">	&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">	</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">	</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>测试效果</p>
<img src="/img/114.png" />

<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">│─components            符合vue组件规范的uni-app组件目录</span><br><span class="line">│  └─componentA         符合‘components/组件名称/组件名称.vue’目录结构，easycom方式可直接使用组件</span><br><span class="line">│  	  └─componentA.vue  可复用的componentA组件</span><br><span class="line">│  └─componentB</span><br><span class="line">|     └─componentB.vue  可复用的componentB组件</span><br></pre></td></tr></table></figure>

<h1 id="Props-传值-父传子"><a href="#Props-传值-父传子" class="headerlink" title="Props 传值 (父传子)"></a>Props 传值 (父传子)</h1><p>定义一个标题组件 pubTitle ，通过给这个组件传递不同的值 在每个页面显示的数据不一样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view class=&quot;pubTitle&quot;&gt;</span><br><span class="line">		&lt;view class=&quot;big&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/view&gt;</span><br><span class="line">		&lt;view class=&quot;small&quot;&gt;&#123;&#123;subtitle&#125;&#125;&lt;/view&gt;</span><br><span class="line">		&lt;view class=&quot;line&quot;&gt;&lt;/view&gt;</span><br><span class="line">	&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">	const props = defineProps(&#123;</span><br><span class="line">		title: &#123;</span><br><span class="line">			type: String,</span><br><span class="line">			default: &quot;默认标题&quot;</span><br><span class="line">		&#125;,</span><br><span class="line">		subtitle: &#123;</span><br><span class="line">			type: String,</span><br><span class="line">			default: &quot;默认副标题&quot;</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">.pubTitle&#123; </span><br><span class="line">	padding:60rpx 30rpx;</span><br><span class="line">	text-align: center;</span><br><span class="line">	background: #B9EDF8;</span><br><span class="line">	.big&#123; </span><br><span class="line">		font-size: 50rpx;</span><br><span class="line">		font-weight: 600;</span><br><span class="line">		color:#1F6ED4;</span><br><span class="line">	&#125;</span><br><span class="line">	.small&#123; </span><br><span class="line">		font-size: 28rpx;</span><br><span class="line">		color:#39BAE8;</span><br><span class="line">	&#125;</span><br><span class="line">	.line&#123; </span><br><span class="line">		display: inline-block;</span><br><span class="line">		width: 100rpx;</span><br><span class="line">		height: 10rpx;</span><br><span class="line">		background: #0000A1;</span><br><span class="line">		border-radius: 10rpx;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>如果不传递值的话会有默认值 default，<code>不同的数据类型会有不同的默认值</code></p>
<blockquote>
<p>注意 数组 和 对象 的默认值写法</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">default</span>: <span class="string">&quot;默认标题&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">subtitle</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">default</span>: <span class="string">&quot;默认副标题&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">time</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">        <span class="attr">default</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">list</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Array</span>,</span><br><span class="line">        <span class="title function_">default</span> () &#123;</span><br><span class="line">            <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">user</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Object</span>,</span><br><span class="line">        <span class="title function_">default</span> () &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&quot;匿名&quot;</span>,</span><br><span class="line">                <span class="attr">gender</span>: <span class="string">&quot;保密&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>调用组件 pubTitle 并传值 </p>
<blockquote>
<p>因为是在首页调用的 所以传递的值是 title&#x3D;”首页” subtitle&#x3D;”index page”</p>
<p>如果在列表页调用 可以在传递自己想要的值 比如： title&#x3D;”列表” subtitle&#x3D;”list page”</p>
<p>这个是也可以通过 js 动态传值 <code>:title=&#39;name&#39;</code></p>
<p><code>不同的页面调用 可以传递不同的值 达到组件复用的效果</code></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view class=&quot;content&quot;&gt;</span><br><span class="line">		&lt;view class=&quot;text-area&quot;&gt;</span><br><span class="line">			&lt;!-- 传递的值是固定的 --&gt;</span><br><span class="line">			&lt;!-- &lt;pubTitle title=&quot;首页&quot; subtitle=&quot;index page&quot; /&gt; --&gt;</span><br><span class="line">			&lt;!-- 动态传值 --&gt;</span><br><span class="line">			&lt;pubTitle :title=&#x27;name&#x27; subtitle=&quot;index page&quot; /&gt;</span><br><span class="line">		&lt;/view&gt;</span><br><span class="line">	&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">	const name = &#x27;首页！！&#x27;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>展示效果</p>
<img src="/img/112.png" />

<h1 id="emit-传值-子传父"><a href="#emit-传值-子传父" class="headerlink" title="emit 传值 (子传父)"></a>emit 传值 (子传父)</h1><p>创建一个组件 myEvent 作为子组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view&gt;</span><br><span class="line">		&lt;input type=&quot;text&quot; placeholder=&quot;请输入...&quot; @input=&quot;onInput&quot;&gt;</span><br><span class="line">	&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">	const emit = defineEmits([&quot;myenv&quot;]);</span><br><span class="line">	const onInput = (e) =&gt; &#123;</span><br><span class="line">		emit(&quot;myenv&quot;, &#123;</span><br><span class="line">			value: e.detail.value,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>定义一个自定义事件 myenv  在 onInput 方法中调用 自定义事件向父组件以对象的形式传递数据 </p>
</blockquote>
<p>父组件调用子组件 myEvent </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view class=&quot;content&quot;&gt;</span><br><span class="line">		&lt;view class=&quot;text-area&quot;&gt;</span><br><span class="line">			&lt;myEvent @myenv=&quot;onMyenv&quot;&gt;&lt;/myEvent&gt;</span><br><span class="line">		&lt;/view&gt;</span><br><span class="line">	&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">	const onMyenv = (e) =&gt; &#123;</span><br><span class="line">		console.log(e)</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在调用子组件的时候 将 onMyenv 方法绑定到子组件自定义的方法 myenv 上面 在 onMyenv 方法里面接收子组件传递过来的值</p>
</blockquote>
<p>效果展示</p>
<img src="/img/103.png" />

<h1 id="应用和页面的生命周期函数"><a href="#应用和页面的生命周期函数" class="headerlink" title="应用和页面的生命周期函数"></a>应用和页面的生命周期函数</h1><h2 id="应用的生命周期函数-App-vue-文件"><a href="#应用的生命周期函数-App-vue-文件" class="headerlink" title="应用的生命周期函数 App.vue 文件"></a>应用的生命周期函数 App.vue 文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	export default &#123;</span><br><span class="line">		onLaunch: function() &#123;</span><br><span class="line">			console.log(&#x27;App Launch 页面加载完毕（只执行一次）&#x27;)</span><br><span class="line">		&#125;,</span><br><span class="line">		onShow: function() &#123;</span><br><span class="line">			console.log(&#x27;App Show 页面显示&#x27;)</span><br><span class="line">		&#125;,</span><br><span class="line">		onHide: function() &#123;</span><br><span class="line">			console.log(&#x27;App Hide 页面隐藏&#x27;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">	/*每个页面公共css */</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="页面生命周期函数"><a href="#页面生命周期函数" class="headerlink" title="页面生命周期函数"></a>页面生命周期函数</h2><p>文档：<a href="https://uniapp.dcloud.net.cn/tutorial/page.html#lifecycle">https://uniapp.dcloud.net.cn/tutorial/page.html#lifecycle</a></p>
<table>
<thead>
<tr>
<th>函数名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>onLoad</td>
<td>监听页面加载，其参数为上个页面传递的数据，参数类型为 Object（用于页面传参），参考<a href="https://uniapp.dcloud.net.cn/api/router#navigateto">示例</a></td>
</tr>
<tr>
<td>onShow</td>
<td>监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面</td>
</tr>
<tr>
<td>onReady</td>
<td>监听页面初次渲染完成。注意如果渲染速度快，会在页面进入动画完成前触发</td>
</tr>
<tr>
<td>onHide</td>
<td>监听页面隐藏</td>
</tr>
</tbody></table>
<h1 id="组件的生命周期函数"><a href="#组件的生命周期函数" class="headerlink" title="组件的生命周期函数"></a>组件的生命周期函数</h1><blockquote>
<p>和 vue3 的生命周期一样</p>
</blockquote>
<ul>
<li><code>onBeforeMount</code>：在挂载开始之前被调用</li>
<li><code>onMounted</code>：在挂载完成后被调用</li>
<li><code>onUnmounted</code>：在组件卸载后被调用</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view&gt;</span><br><span class="line">		组件</span><br><span class="line">	&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">	import &#123; onBeforeMount, onMounted, onUnmounted &#125; from &#x27;vue&#x27;;</span><br><span class="line">	onBeforeMount(() =&gt; &#123;</span><br><span class="line">	 console.log(&#x27;beforeCreate...&#x27;)</span><br><span class="line">	&#125;);</span><br><span class="line">	</span><br><span class="line">	onMounted(() =&gt; &#123;</span><br><span class="line">	  console.log(&#x27;created&#x27;) //页面渲染完毕</span><br><span class="line">	  console.log(&#x27;beforeMount&#x27;)</span><br><span class="line">	  console.log(&#x27;mounted&#x27;) //dom挂载完毕</span><br><span class="line">	&#125;);</span><br><span class="line">	</span><br><span class="line">	onUnmounted(() =&gt; &#123;</span><br><span class="line">	  console.log(&#x27;destroyed&#x27;) //页面销毁</span><br><span class="line">	&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="uni-showToast-消息提示框"><a href="#uni-showToast-消息提示框" class="headerlink" title="uni.showToast 消息提示框"></a>uni.showToast 消息提示框</h1><p>文档：<a href="https://uniapp.dcloud.net.cn/api/ui/prompt.html#showtoast">https://uniapp.dcloud.net.cn/api/ui/prompt.html#showtoast</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view class=&quot;content&quot;&gt;</span><br><span class="line">		&lt;image class=&quot;logo&quot; src=&quot;/static/logo.png&quot; @click=&quot;clickImg&quot;&gt;&lt;/image&gt;</span><br><span class="line">	&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">	const clickImg = () =&gt; &#123;</span><br><span class="line">        // icon 图标: success error none</span><br><span class="line">		uni.showToast(&#123;</span><br><span class="line">			title: &quot;操作成功&quot;,</span><br><span class="line">			icon: &quot;none&quot;,</span><br><span class="line">			mask: true</span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line">		setTimeout(() =&gt; &#123;</span><br><span class="line">			uni.navigateTo(&#123;</span><br><span class="line">				url: &quot;/pages/test01/test01&quot;</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;, 1500)</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">	</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="uni-showModal-模态弹窗"><a href="#uni-showModal-模态弹窗" class="headerlink" title="uni.showModal 模态弹窗"></a>uni.showModal 模态弹窗</h1><p>文档：<a href="https://uniapp.dcloud.net.cn/api/ui/prompt.html#showmodal">https://uniapp.dcloud.net.cn/api/ui/prompt.html#showmodal</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view class=&quot;content&quot;&gt;</span><br><span class="line">		&lt;image class=&quot;logo&quot; src=&quot;/static/logo.png&quot; @click=&quot;clickBox&quot;&gt;&lt;/image&gt;</span><br><span class="line">	&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">	const clickBox = () =&gt; &#123;</span><br><span class="line">		// uni.showModal(&#123;</span><br><span class="line">		// 	title: &quot;手机验证&quot;,</span><br><span class="line">		// 	success: res =&gt; &#123;</span><br><span class="line">		// 		console.log(res)</span><br><span class="line">		// 		if (res.confirm) &#123;</span><br><span class="line">		// 			uni.navigateTo(&#123;</span><br><span class="line">		// 				url: &quot;/pages/test01/test01&quot;</span><br><span class="line">		// 			&#125;)</span><br><span class="line">		// 		&#125; else &#123;</span><br><span class="line">		// 			uni.showToast(&#123;</span><br><span class="line">		// 				title: &quot;取消&quot;,</span><br><span class="line">		// 				icon: &quot;none&quot;</span><br><span class="line">		// 			&#125;)</span><br><span class="line">		// 		&#125;</span><br><span class="line">		// 	&#125;</span><br><span class="line">		// &#125;)</span><br><span class="line"></span><br><span class="line">		uni.showModal(&#123;</span><br><span class="line">			title: &quot;手机验证&quot;,</span><br><span class="line">			editable: true,</span><br><span class="line">			placeholderText: &quot;请输入手机号&quot;,</span><br><span class="line">			success: res =&gt; &#123;</span><br><span class="line">				console.log(res)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>效果展示</p>
<img src="/img/215.png" />

<img src="/img/248.png" />

<h1 id="uni-showActionSheet"><a href="#uni-showActionSheet" class="headerlink" title="uni.showActionSheet"></a>uni.showActionSheet</h1><p>文档：<a href="https://uniapp.dcloud.net.cn/api/ui/prompt.html#showactionsheet">https://uniapp.dcloud.net.cn/api/ui/prompt.html#showactionsheet</a></p>
<p>从底部向上弹出操作菜单</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view class=&quot;content&quot;&gt;</span><br><span class="line">		&lt;image class=&quot;logo&quot; src=&quot;/static/logo.png&quot; @click=&quot;clickAction&quot;&gt;&lt;/image&gt;</span><br><span class="line">	&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">	import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">	const arr = ref([&quot;三国演义&quot;, &quot;西游记&quot;, &quot;红楼梦&quot;, &quot;水浒传&quot;]);</span><br><span class="line">	const clickAction = () =&gt; &#123;</span><br><span class="line">		uni.showActionSheet(&#123;</span><br><span class="line">			itemList: arr.value,</span><br><span class="line">			success: (res) =&gt; &#123;</span><br><span class="line">				console.log(arr.value[res.tapIndex])</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">	</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>效果展示</p>
<img src="/img/225.png" />

<h1 id="界面设置导航条"><a href="#界面设置导航条" class="headerlink" title="界面设置导航条"></a>界面设置导航条</h1><p>文档：<a href="https://uniapp.dcloud.net.cn/api/ui/navigationbar.html">https://uniapp.dcloud.net.cn/api/ui/navigationbar.html</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view&gt;</span><br><span class="line">		</span><br><span class="line">	&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">	import &#123;</span><br><span class="line">		onMounted</span><br><span class="line">	&#125; from &#x27;vue&#x27;;</span><br><span class="line">	onMounted(() =&gt; &#123;</span><br><span class="line">		uni.setNavigationBarTitle(&#123;</span><br><span class="line">			title: &quot;详情title&quot;</span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line">		uni.setNavigationBarColor(&#123;</span><br><span class="line">			backgroundColor: &quot;#1AA034&quot;,</span><br><span class="line">			frontColor: &quot;#ffffff&quot;</span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line">		// 	uni.showNavigationBarLoading();</span><br><span class="line"></span><br><span class="line">		// 	setTimeout(() =&gt; &#123;</span><br><span class="line">		// 		uni.hideNavigationBarLoading()</span><br><span class="line">		// 	&#125;, 1500)</span><br><span class="line">	&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>参数说明</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">类型</th>
<th align="left">必填</th>
<th align="left">说明</th>
<th align="left">平台差异说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">frontColor</td>
<td align="left">String</td>
<td align="left">是</td>
<td align="left">前景颜色值，包括按钮、标题、状态栏的颜色，仅支持 #ffffff 和 #000000</td>
<td align="left">App、H5、微信小程序、百度小程序、抖音小程序、QQ小程序、快手小程序、京东小程序</td>
</tr>
<tr>
<td align="left">backgroundColor</td>
<td align="left">String</td>
<td align="left">是</td>
<td align="left">背景颜色值，有效值为十六进制颜色</td>
<td align="left"></td>
</tr>
</tbody></table>
<h1 id="tabbar配置iconfont字体图标"><a href="#tabbar配置iconfont字体图标" class="headerlink" title="tabbar配置iconfont字体图标"></a>tabbar配置iconfont字体图标</h1><p>iconfont 官网：<a href="https://www.iconfont.cn/">iconfont-阿里巴巴矢量图标库</a></p>
<p><strong>iconfont参数说明：</strong></p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">text</td>
<td align="left">String</td>
<td align="left">字库 Unicode 码</td>
</tr>
<tr>
<td align="left">selectedText</td>
<td align="left">String</td>
<td align="left">选中后字库 Unicode 码</td>
</tr>
<tr>
<td align="left">fontSize</td>
<td align="left">String</td>
<td align="left">字体图标字号(px)</td>
</tr>
<tr>
<td align="left">color</td>
<td align="left">String</td>
<td align="left">字体图标颜色</td>
</tr>
<tr>
<td align="left">selectedColor</td>
<td align="left">String</td>
<td align="left">字体图标选中颜色</td>
</tr>
</tbody></table>
<img src="/img/247.png" />

<img src="/img/617.png" />

<img src="/img/128.png" />

<img src="/img/222.png" />

<p>复制 iconfont.ttf 这个文件到  static &#x2F;font 目录下</p>
<blockquote>
<p>在 pages.json 中使用 </p>
<p>先 配置 iconfontSrc 属性，引入 iconfont.ttf 这个文件</p>
<p>直接复制 然后 把 <code>&amp;#x</code>改成 <code>\u</code>  最后去掉 <code>;</code></p>
<p><code>&amp;#xe65d;</code> —&gt; <code>\ue65d</code></p>
</blockquote>
<img src="/img/234.png" />

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;tabBar&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;iconfontSrc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/font/iconfont.ttf&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#333&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;selectedColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#015FF9&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;首页&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/index/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;iconfont&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\ue65d&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;selectedText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\ue65d&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#333&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;selectedColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#007aff&quot;</span></span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;列表&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/list/list&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;iconfont&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\ue65d&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;selectedText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\ue65d&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#333&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;selectedColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#007aff&quot;</span></span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我们&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/about/about&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;iconfont&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\ue65d&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;selectedText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\ue65d&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#333&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;selectedColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#007aff&quot;</span></span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">	<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<img src="/img/345.png" />

<h1 id="uni-request-发送请求"><a href="#uni-request-发送请求" class="headerlink" title="uni.request 发送请求"></a>uni.request 发送请求</h1><p>文档：<a href="https://uniapp.dcloud.net.cn/api/request/request.html">https://uniapp.dcloud.net.cn/api/request/request.html</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view&gt;</span><br><span class="line">		&lt;button type=&quot;primary&quot; @click=&quot;getData&quot;&gt;发起请求&lt;/button&gt;</span><br><span class="line">		&lt;view class=&quot;row&quot; v-for=&quot;item in listArr&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">			&lt;view class=&quot;title&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/view&gt;</span><br><span class="line">			&lt;view class=&quot;content&quot;&gt;&#123;&#123;item.body&#125;&#125;&lt;/view&gt;</span><br><span class="line">		&lt;/view&gt;</span><br><span class="line">	&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">	import &#123;</span><br><span class="line">		ref</span><br><span class="line">	&#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">	const listArr = ref([])</span><br><span class="line"></span><br><span class="line">	const getData = () =&gt; &#123;</span><br><span class="line">		uni.request(&#123;</span><br><span class="line">			url: &#x27;&quot;http://jsonplaceholder.typicode.com/posts&#x27;,</span><br><span class="line">			method: &#x27;GET&#x27;,</span><br><span class="line">			success: resp =&gt; &#123;</span><br><span class="line">				// console.log(resp)</span><br><span class="line">				listArr.value = resp.data</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">	.row &#123;</span><br><span class="line">		padding: 20rpx 0;</span><br><span class="line">		border-bottom: 1px dotted #e4e4e4;</span><br><span class="line"></span><br><span class="line">		.title &#123;</span><br><span class="line">			font-size: 36rpx;</span><br><span class="line">			padding-bottom: 15rpx;</span><br><span class="line">			color: #333;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		.content &#123;</span><br><span class="line">			font-size: 28rpx;</span><br><span class="line">			color: #888;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="数据缓存"><a href="#数据缓存" class="headerlink" title="数据缓存"></a>数据缓存</h1><p>文档：<a href="https://uniapp.dcloud.net.cn/api/storage/storage.html">https://uniapp.dcloud.net.cn/api/storage/storage.html</a></p>
<blockquote>
<p>如果使用同步保存的 那么需要使用同步获取&#x2F;同步删除，反之 异步也是如此</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view&gt;</span><br><span class="line">		&lt;button type=&quot;primary&quot; @click=&quot;saveData&quot;&gt;保存数据&lt;/button&gt;</span><br><span class="line">		&lt;button type=&quot;primary&quot; @click=&quot;getData&quot;&gt;获取数据&lt;/button&gt;</span><br><span class="line">		&lt;button type=&quot;primary&quot; @click=&quot;removeData&quot;&gt;删除某一项数据&lt;/button&gt;</span><br><span class="line">		&lt;button type=&quot;primary&quot; @click=&quot;clearData&quot;&gt;删除全部数据&lt;/button&gt;</span><br><span class="line">	&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">	const saveData = () =&gt; &#123;</span><br><span class="line">		// 将数据存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个异步接口</span><br><span class="line">		// uni.setStorage(&#123;</span><br><span class="line">		//     key: &#x27;id&#x27;,</span><br><span class="line">		//     data: 100,</span><br><span class="line">		//     success:resp=&gt;&#123;</span><br><span class="line">		//         console.log(&#x27;保存成功&#x27;,resp)</span><br><span class="line">		//     &#125;</span><br><span class="line">		// &#125;)</span><br><span class="line">		// 将 data 存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个同步接口</span><br><span class="line">		uni.setStorageSync(&#x27;id&#x27;, 100)</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	const getData = () =&gt; &#123;</span><br><span class="line">		// 从本地缓存中异步获取指定 key 对应的内容</span><br><span class="line">		// uni.getStorage(&#123;</span><br><span class="line">		//     key: &#x27;id&#x27;,</span><br><span class="line">		//     success:resp=&gt;&#123;</span><br><span class="line">		//         console.log(&#x27;获取成功：&#x27;,resp.data)</span><br><span class="line">		//     &#125;</span><br><span class="line">		// &#125;)</span><br><span class="line">		// 从本地缓存中同步获取指定 key 对应的内容</span><br><span class="line">		let resp = uni.getStorageSync(&#x27;id&#x27;)</span><br><span class="line">		console.log(&#x27;获取成功：&#x27;, resp)</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	const removeData = () =&gt; &#123;</span><br><span class="line">		// 从本地缓存中异步移除指定 key</span><br><span class="line">		// uni.removeStorage(&#123;</span><br><span class="line">		//     key: &#x27;id&#x27;,</span><br><span class="line">		//     success:resp=&gt; &#123;</span><br><span class="line">		//         console.log(&#x27;删除成功&#x27;,resp)</span><br><span class="line">		//     &#125;</span><br><span class="line">		// &#125;)</span><br><span class="line">		// 从本地缓存中同步移除指定 key</span><br><span class="line">		uni.removeStorageSync(&#x27;id&#x27;)</span><br><span class="line">	&#125;</span><br><span class="line">    const clearData = () =&gt; &#123;</span><br><span class="line">		// 异步清理本地数据缓存</span><br><span class="line">		// uni.clearStorage(&#123;</span><br><span class="line">		//     success:resp=&gt; &#123;</span><br><span class="line">		//         console.log(&#x27;删除成功&#x27;,resp)</span><br><span class="line">		//     &#125;</span><br><span class="line">		// &#125;)</span><br><span class="line">		// 同步清理本地数据缓存</span><br><span class="line">		uni.clearStorageSync()</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<img src="/img/193.png" />
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3+TypeScript</title>
    <url>/hyq/7ba1d77a.html</url>
    <content><![CDATA[<blockquote>
<p>编码规范 </p>
</blockquote>
<p>在 Vue3 中</p>
<ol>
<li>编码语言：JavaScript、TypeScript</li>
<li>代码风格：组合式API、选项式API</li>
<li>简写格式：setup语法糖</li>
</ol>
<p>一般公司项目中都是采用：TypeScript、组合式API、setup语法糖</p>
<h3 id="Vue3-简介"><a href="#Vue3-简介" class="headerlink" title="Vue3 简介"></a>Vue3 简介</h3><p>2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）</p>
<p>经历了：4800+次提交、40+个RFC、60+次PR、300+贡献</p>
<p>github上的tags地址：<a href="https://github.com/vuejs/core/releases/tag/v3.0.0">https://github.com/vuejs/core/releases/tag/v3.0.0</a></p>
<img src="/img/51.png" />

<h3 id="创建vue3的工程"><a href="#创建vue3的工程" class="headerlink" title="创建vue3的工程"></a>创建vue3的工程</h3><h4 id="使用vue-cli创建"><a href="#使用vue-cli创建" class="headerlink" title="使用vue-cli创建"></a>使用vue-cli创建</h4><blockquote>
<p>vue-cli 基于 webpack 实现 官方推荐 基于 vite 创建项目</p>
</blockquote>
<p>官方文档：<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span></span><br><span class="line">vue --version</span><br><span class="line"><span class="comment">## 安装或者升级你的@vue/cli</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment">## 创建 </span></span><br><span class="line"><span class="comment">## vue_test是项目名</span></span><br><span class="line">vue create vue_test</span><br><span class="line"><span class="comment">## 选择3.x</span></span><br><span class="line"><span class="comment">## Choose a version of Vue.js that you want to start the project with (Use arrow kwys)</span></span><br><span class="line"><span class="comment">## &gt; 3.x</span></span><br><span class="line"><span class="comment">##   2.x</span></span><br><span class="line"><span class="comment">## 启动</span></span><br><span class="line"><span class="built_in">cd</span> vue_test</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure>

<h4 id="使用-vite-创建"><a href="#使用-vite-创建" class="headerlink" title="使用 vite 创建"></a>使用 vite 创建</h4><p>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p>
<p>vite官网：<a href="https://vitejs.cn/">https://vitejs.cn</a></p>
<blockquote>
<p>vite 是什么</p>
</blockquote>
<p>新一代前端构建工具</p>
<blockquote>
<p>优势</p>
</blockquote>
<p>轻量快速的热重载（HMR）</p>
<p>真正的按需编译，不再等待整个应用编译完成</p>
<p>开发环境中，无需打包操作，可快速的启动服务</p>
<blockquote>
<p>webpack 构建 与 vite 构建对比图</p>
</blockquote>
<img src="/img/98.png" />

<blockquote>
<p>webpack 构建 : 先有一个入口 然后一个一个加载路由和模块 最后全部加载完了才启动服务</p>
<p>vite 构建 : 一上来就是启动服务 需要哪个加载哪个</p>
</blockquote>
<p>具体操作如下：</p>
<blockquote>
<p>vue 官方文档安装方式</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 创建命令</span></span><br><span class="line">npm create vue@latest</span><br><span class="line"></span><br><span class="line"><span class="comment">## 具体配置</span></span><br><span class="line"><span class="comment">## 配置项目名称</span></span><br><span class="line">✔ Project name: … &lt;your-project-name&gt;</span><br><span class="line"><span class="comment">## 是否添加 TypeScript 支持</span></span><br><span class="line">✔ Add TypeScript? … No / Yes</span><br><span class="line"><span class="comment">## 是否添加 JSX 支持</span></span><br><span class="line">✔ Add JSX Support? … No / Yes</span><br><span class="line"><span class="comment">## 是否添加路由</span></span><br><span class="line">✔ Add Vue Router <span class="keyword">for</span> Single Page Application development? … No / Yes</span><br><span class="line"><span class="comment">## 是否添加 pinia</span></span><br><span class="line">✔ Add Pinia <span class="keyword">for</span> state management? … No / Yes</span><br><span class="line"><span class="comment">## 是否添加单元测试</span></span><br><span class="line">✔ Add Vitest <span class="keyword">for</span> Unit testing? … No / Yes</span><br><span class="line"><span class="comment">## 是否添加 端到端 测试方案</span></span><br><span class="line">✔ Add an End-to-End Testing Solution? … No / Cypress / Nightwatch / Playwright</span><br><span class="line"><span class="comment">## 是否添 ESLint 语法检测</span></span><br><span class="line">✔ Add ESLint <span class="keyword">for</span> code quality? … No / Yes</span><br><span class="line"><span class="comment">## 是否添加 Prettier 代码格式化</span></span><br><span class="line">✔ Add Prettier <span class="keyword">for</span> code formatting? … No / Yes</span><br><span class="line"><span class="comment">## 是否添加 DevTools 调试工具</span></span><br><span class="line">✔ Add Vue DevTools 7 extension <span class="keyword">for</span> debugging? (experimental) … No / Yes</span><br><span class="line">Scaffolding project <span class="keyword">in</span> ./&lt;your-project-name&gt;...</span><br><span class="line">Done.</span><br><span class="line"><span class="comment">## 进入工程目录</span></span><br><span class="line"><span class="built_in">cd</span> &lt;your-project-name&gt;</span><br><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment">## 运行</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<blockquote>
<p>vite 安装方式</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 创建工程</span></span><br><span class="line">npm init vite-app &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 进入工程目录</span></span><br><span class="line"><span class="built_in">cd</span> &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment">## 运行</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<h3 id="Vue3-的核心语法"><a href="#Vue3-的核心语法" class="headerlink" title="Vue3 的核心语法"></a>Vue3 的核心语法</h3><h4 id="Composition-API（组合式API）和-Options-API（选项式API）"><a href="#Composition-API（组合式API）和-Options-API（选项式API）" class="headerlink" title="Composition API（组合式API）和 Options API（选项式API）"></a>Composition API（组合式API）和 Options API（选项式API）</h4><ul>
<li><p>Vue2 的 API 是 Options （选项式API）</p>
</li>
<li><p>Vue3 的 API 是 Composition （组合式API）</p>
</li>
</ul>
<blockquote>
<p>Options API 的 缺点</p>
</blockquote>
<p>Options 类型的 API ，数据，方法，计算属性等，是分散在 data , methods , computed 中的，想要新增或者修改，data , methods , computed 都要修改 ，太繁琐，不便于维护和复用</p>
<blockquote>
<p>常用 Composition API</p>
</blockquote>
<p>官方文档 : <a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p>
<h4 id="setup-函数"><a href="#setup-函数" class="headerlink" title="setup 函数"></a>setup 函数</h4><p>Vue3.0 中一个新的配置项，值为一个函数</p>
<p>组件中所用到的：data , methods 等等，均要配置在 setup 函数中</p>
<p><code>setup函数的两种返回值：</code></p>
<p>若返回一个<code>对象</code>，则对象中的属性、方法, 在模板中均可以直接使用 （在模板中直接渲染数据 或者 调用方法）</p>
<p>若返回一个<code>函数</code>：则可以自定义渲染内容（直接渲染返回的函数内容）</p>
<blockquote>
<p>注意点：</p>
<p>Vue2.x 配置（data、methods、computed…）中 <strong>可以访问到</strong> setup 中的属性、方法</p>
<p>但在 setup 中<strong>不能访问到</strong> Vue2.x 配置（data、methos、computed…）</p>
</blockquote>
<p><code>setup 语法糖 </code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div class=&quot;person&quot;&gt;</span><br><span class="line">        &lt;h2&gt;</span><br><span class="line">            &#123;&#123;name&#125;&#125;</span><br><span class="line">        &lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;changeName&quot;&gt;</span><br><span class="line">            修改name</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">	export default &#123;</span><br><span class="line">        name:&#x27;Person&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">	const name = &quot;xxx&quot;</span><br><span class="line">    changeName = () =&gt;&#123;</span><br><span class="line">        name = &quot;zhangsan&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>可以有两个 script 标签  一个指定组件名称 另一个是 setup 语法糖</code></p>
</blockquote>
<p>上述代码就为了一个<code>组件名称</code>特意写一个 <code>script</code> 标签，比较麻烦，我们可以借助 vite 中的插件简化 这样后续就可以只写一个 setup 语法糖的 script 标签</p>
<p>1.安装插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i vite-plugin-vue-setup-extend -D</span><br></pre></td></tr></table></figure>

<p>2.配置 vue.config.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineConfig&#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="comment">// 导入插件vite-plugin-vue-setup-extend</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueSetupExtend</span> <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-vue-setup-extend&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="comment">// 使用插件</span></span><br><span class="line">        <span class="title class_">VueSetupExtend</span>()</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>3.在 <code>script</code> 标签 指定 <code>组件名称 name=&quot;Person&quot;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Person&quot;&gt;</span><br><span class="line">	</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="ref函数-基本类型和对象类型的响应式数据"><a href="#ref函数-基本类型和对象类型的响应式数据" class="headerlink" title="ref函数 (基本类型和对象类型的响应式数据)"></a>ref函数 (基本类型和对象类型的响应式数据)</h4><blockquote>
<p>ref 既可以定义 <code>基本数据类型</code> 也可以定义 <code>对象数据类型</code> </p>
</blockquote>
<p>作用 : <code>定义一个响应式的数据</code></p>
<p>语法 : const xxx &#x3D; ref(initValue初始值)</p>
<p>返回值 ：RefImpl 实例对象 简称 ref对象 或者 ref，ref 的 value 属性是响应式的</p>
<p>注意点 ：</p>
<ul>
<li>JS中操作数据 ： <code>xxx.value</code> </li>
<li>模板中读取数据 : 不需要 .value，直接 <code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li>
</ul>
<blockquote>
<p>基本类型</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div class=&quot;person&quot;&gt;</span><br><span class="line">        &lt;h2&gt;</span><br><span class="line">            &#123;&#123;name&#125;&#125;</span><br><span class="line">        &lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;changeName&quot;&gt;</span><br><span class="line">            修改name</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">    import &#123;ref&#125; from &quot;vue&quot;</span><br><span class="line">	const name = ref(&quot;xxx&quot;)</span><br><span class="line">    changeName = () =&gt;&#123;</span><br><span class="line">        name.value = &quot;zhangsan&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对象类型</p>
<p>直接把 reactive 修改成 ref 但是注意 ref 需要 <code>.value</code></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div class=&quot;person&quot;&gt;</span><br><span class="line">       &lt;h2&gt;</span><br><span class="line">           &#123;&#123;car.brand&#125;&#125;车，价值&#123;&#123;car.price&#125;&#125;万  </span><br><span class="line">        &lt;/h2&gt;</span><br><span class="line">        &lt;button @click=changePrice&gt;</span><br><span class="line">            修改价格</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">        &lt;hr /&gt;</span><br><span class="line">        &lt;h2&gt;</span><br><span class="line">            游戏列表</span><br><span class="line">        &lt;/h2&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;item in games&quot; :key=&quot;item.id&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;button @click=changeFirstGames&gt;</span><br><span class="line">            修改价格</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;person&quot;&gt;</span><br><span class="line">    import &#123;ref&#125; from &quot;vue&quot;</span><br><span class="line">	let car =ref(&#123;brand=&quot;宝马x8&quot;,price=&quot;145&quot;&#125;)</span><br><span class="line">    let games =ref([&#123;id=1,name=&quot;原神&quot;&#125;,&#123;id=2,name=&quot;双人成行&quot;&#125;,&#123;id=3,name=&quot;逆水寒&quot;&#125;])</span><br><span class="line">    const changePrice = ()=&gt;&#123;</span><br><span class="line">        car.value.price += 10</span><br><span class="line">    &#125;</span><br><span class="line">    const changeFirstGames = ()=&gt;&#123;</span><br><span class="line">        games.value[0].name = &quot;冰天雪女&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .person&#123;</span><br><span class="line">        background-color:skyblue;</span><br><span class="line">        box-shadow:0 0 10px;</span><br><span class="line">        border-radius:10px;</span><br><span class="line">        padding:20px;</span><br><span class="line">    &#125;</span><br><span class="line">    button&#123;</span><br><span class="line">        margin:0 5px;</span><br><span class="line">    &#125;</span><br><span class="line">    li&#123;</span><br><span class="line">        font-size:20px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>



<h4 id="reactive函数-对象类型的响应式数据"><a href="#reactive函数-对象类型的响应式数据" class="headerlink" title="reactive函数 (对象类型的响应式数据)"></a>reactive函数 (对象类型的响应式数据)</h4><blockquote>
<p>reactive 只能定义 <code>对象和数组类型的数据</code> </p>
</blockquote>
<p>作用: 定义一个<strong>对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数，否则报错）</p>
<p>语法： const 响应式对象(xxx) &#x3D; reactive(源对象)</p>
<p>接收值：<code>对象或数组</code>,</p>
<p>返回值：一个<code>代理对象</code>（Proxy的实例对象，简称proxy对象）</p>
<p>注意点 ：</p>
<ul>
<li><p>js中、模板中都不需要操作 <code>xxx.value</code> 操作数据，可以直接操作</p>
</li>
<li><p>reactive 定义的响应式数据是<strong>深层次的</strong> (vue2 中并不是)</p>
</li>
<li><p>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div class=&quot;person&quot;&gt;</span><br><span class="line">       &lt;h2&gt;</span><br><span class="line">           &#123;&#123;car.brand&#125;&#125;车，价值&#123;&#123;car.price&#125;&#125;万  </span><br><span class="line">        &lt;/h2&gt;</span><br><span class="line">        &lt;button @click=changePrice&gt;</span><br><span class="line">            修改价格</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">        &lt;hr /&gt;</span><br><span class="line">        &lt;h2&gt;</span><br><span class="line">            游戏列表</span><br><span class="line">        &lt;/h2&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;item in games&quot; :key=&quot;item.id&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;button @click=changeFirstGames&gt;</span><br><span class="line">            修改价格</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;person&quot;&gt;</span><br><span class="line">    import &#123;reactive&#125; from &quot;vue&quot;</span><br><span class="line">	let car =reactive(&#123;brand=&quot;宝马x8&quot;,price=&quot;145&quot;&#125;)</span><br><span class="line">    let games =reactive([&#123;id=1,name=&quot;原神&quot;&#125;,&#123;id=2,name=&quot;双人成行&quot;&#125;,&#123;id=3,name=&quot;逆水寒&quot;&#125;])</span><br><span class="line">    const changePrice = ()=&gt;&#123;</span><br><span class="line">        car.price += 10</span><br><span class="line">    &#125;</span><br><span class="line">    const changeFirstGames = ()=&gt;&#123;</span><br><span class="line">        games[0].name = &quot;冰天雪女&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .person&#123;</span><br><span class="line">        background-color:skyblue;</span><br><span class="line">        box-shadow:0 0 10px;</span><br><span class="line">        border-radius:10px;</span><br><span class="line">        padding:20px;</span><br><span class="line">    &#125;</span><br><span class="line">    button&#123;</span><br><span class="line">        margin:0 5px;</span><br><span class="line">    &#125;</span><br><span class="line">    li&#123;</span><br><span class="line">        font-size:20px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="ref-和-reactive-的对比"><a href="#ref-和-reactive-的对比" class="headerlink" title="ref 和 reactive 的对比"></a>ref 和 reactive 的对比</h4><p>定义数据类型角度</p>
<blockquote>
<p>ref 定义 ：基本类型数据、对象类型数据</p>
<p>reactive 定义：对象类型数据</p>
</blockquote>
<p>区别</p>
<blockquote>
<p>ref 创建变量必须使用 .value  （安装插件Volar 可以自动导入）</p>
<p>reactive 重新分配一个新对象 会失去响应式 （可以使用 Object.assign 去整体替换）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div class=&quot;person&quot;&gt;</span><br><span class="line">       &lt;h2&gt;</span><br><span class="line">           &#123;&#123;car.brand&#125;&#125;车，价值&#123;&#123;car.price&#125;&#125;万  </span><br><span class="line">        &lt;/h2&gt;</span><br><span class="line">        &lt;button @click=changeCar&gt;</span><br><span class="line">            修改汽车</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;person&quot;&gt;</span><br><span class="line">    import &#123;reactive&#125; from &quot;vue&quot;</span><br><span class="line">	let car =reactive(&#123;brand=&quot;宝马x8&quot;,price=&quot;145&quot;&#125;)</span><br><span class="line">   </span><br><span class="line">    const changeCar = ()=&gt;&#123;</span><br><span class="line">        car = &#123;brand=&quot;小米su7&quot;,price=&quot;30&quot;&#125; //这种写法页面不更新 不在是响应式</span><br><span class="line">        car = reactive(&#123;brand=&quot;小米su7&quot;,price=&quot;30&quot;&#125;) //这种写法页面不更新 不在是响应式</span><br><span class="line">        Object.assign(car,&#123;brand=&quot;小米su7&quot;,price=&quot;30&quot;&#125;) //这种写法更新 直接替换 car</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .person&#123;</span><br><span class="line">        background-color:skyblue;</span><br><span class="line">        box-shadow:0 0 10px;</span><br><span class="line">        border-radius:10px;</span><br><span class="line">        padding:20px;</span><br><span class="line">    &#125;</span><br><span class="line">    button&#123;</span><br><span class="line">        margin:0 5px;</span><br><span class="line">    &#125;</span><br><span class="line">    li&#123;</span><br><span class="line">        font-size:20px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>注意：Volar 全名（TypeScript Vue Plugin）设置里面找到 这个插件 勾上（Auto Insert: Dot Value）</p>
<p>使用原则</p>
<blockquote>
<p>如果需要一个基本数据类型的响应式数据，使用 ref</p>
<p>如果需要一个响应式对象但是 层级不深，使用 ref , reactive 都可以</p>
<p>如果需要一个响应式对象而且层级比较深，推荐使用 reactive</p>
</blockquote>
<h4 id="toRefs-和-toRef"><a href="#toRefs-和-toRef" class="headerlink" title="toRefs 和 toRef"></a>toRefs 和 toRef</h4><p>作用：将一个响应式对象中的每一个属性，转换为 ref 对象</p>
<p>语法：<code>const name = toRef(person,&#39;name&#39;)</code></p>
<p>注意：toRefs 和 toRef 功能一致 但是toRefs 是转换整个对象，toRef 是转换对象里面的单个属性 </p>
<p>语法：const  name &#x3D;  toRefs(person)</p>
<blockquote>
<p>注意：转换之后 可以直接在页面上使用 name ，也可以使用响应式 person.name</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div class=&quot;person&quot;&gt;</span><br><span class="line">       &lt;h2&gt;</span><br><span class="line">           姓名：&#123;&#123;name&#125;&#125;-&#123;&#123;person.name&#125;&#125;</span><br><span class="line">        &lt;/h2&gt;</span><br><span class="line">         &lt;h2&gt;</span><br><span class="line">          	年龄：&#123;&#123;age&#125;&#125;-&#123;&#123;person.age&#125;&#125;-&#123;&#123;nl&#125;&#125;</span><br><span class="line">        &lt;/h2&gt;</span><br><span class="line">        &lt;button @click=changeName&gt;</span><br><span class="line">            修改姓名</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">        &lt;button @click=changeAge&gt;</span><br><span class="line">            修改年龄</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;person&quot;&gt;</span><br><span class="line">    import &#123;reactive,toRefs,toRef&#125; from &quot;vue&quot;</span><br><span class="line">	let person =reactive(&#123;name=&quot;南屿&quot;,age=17&#125;)</span><br><span class="line">    let &#123;name,age&#125; = toRefs(person)</span><br><span class="line">    let nl = toRef(person,&#x27;age&#x27;)</span><br><span class="line">    console.log(nl.value)</span><br><span class="line">   </span><br><span class="line">    const changeName = ()=&gt;&#123;</span><br><span class="line">       name.value  = &quot;临安与&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    const changeAge = ()=&gt;&#123;</span><br><span class="line">       age.value  += 1</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .person&#123;</span><br><span class="line">        background-color:skyblue;</span><br><span class="line">        box-shadow:0 0 10px;</span><br><span class="line">        border-radius:10px;</span><br><span class="line">        padding:20px;</span><br><span class="line">    &#125;</span><br><span class="line">    button&#123;</span><br><span class="line">        margin:0 5px;</span><br><span class="line">    &#125;</span><br><span class="line">    li&#123;</span><br><span class="line">        font-size:20px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="计算属性与监视"><a href="#计算属性与监视" class="headerlink" title="计算属性与监视"></a>计算属性与监视</h3><h4 id="computed函数"><a href="#computed函数" class="headerlink" title="computed函数"></a>computed函数</h4><ul>
<li>与 Vue2.x 中 computed 功能一致</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div class=&quot;person&quot;&gt;</span><br><span class="line">      姓：&lt;input type=&quot;text&quot; v-model=&#x27;firstName&#x27; /&gt;&lt;br&gt;</span><br><span class="line">      名：&lt;input type=&quot;text&quot; v-model=&#x27;lastName&#x27; /&gt;&lt;br&gt;</span><br><span class="line">      全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;button @click=&#x27;changeFullName&#x27;&gt;</span><br><span class="line">            修改全名</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;person&quot;&gt;</span><br><span class="line">    import &#123;ref,computed&#125; from &quot;vue&quot;</span><br><span class="line">	let firstName = ref(&#x27;张&#x27;)</span><br><span class="line">    let lastName = ref(&#x27;三&#x27;)</span><br><span class="line">    // 这样定义的计算属性是不可修改的（只读）</span><br><span class="line">    // let fullName = computed(()=&gt;&#123;</span><br><span class="line">        // return firstName.value.slice(0,1).toUpperCase() + firstName.value.slice(1) + &#x27;-&#x27; + lastName.value</span><br><span class="line">   //  &#125;)</span><br><span class="line">    </span><br><span class="line">     // 这样定义的计算属性是可修改的（可读可写）</span><br><span class="line">    let fullName = computed(()=&gt;&#123;</span><br><span class="line">       get()&#123;</span><br><span class="line">            return firstName.value.slice(0,1).toUpperCase() + firstName.value.slice(1) + &#x27;-&#x27; + lastName.value</span><br><span class="line">       &#125;,</span><br><span class="line">           set(val)&#123;</span><br><span class="line">               const [str1,str2] = val.slice(&#x27;-&#x27;)</span><br><span class="line">               firstName.value = str1</span><br><span class="line">               lastName.value = str2</span><br><span class="line">               console.log(&#x27;set&#x27;,val)</span><br><span class="line">           &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">   </span><br><span class="line">    const changeFullName = ()=&gt;&#123;</span><br><span class="line">       fullName.value = &#x27;南-希&#x27;</span><br><span class="line">    &#125;   </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .person&#123;</span><br><span class="line">        background-color:skyblue;</span><br><span class="line">        box-shadow:0 0 10px;</span><br><span class="line">        border-radius:10px;</span><br><span class="line">        padding:20px;</span><br><span class="line">    &#125;</span><br><span class="line">    button&#123;</span><br><span class="line">        margin:0 5px;</span><br><span class="line">    &#125;</span><br><span class="line">    li&#123;</span><br><span class="line">        font-size:20px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="watch函数"><a href="#watch函数" class="headerlink" title="watch函数"></a>watch函数</h4><ul>
<li>监视数据变化 （与 Vue2.x 中 watch 功能一致）</li>
</ul>
<blockquote>
<p>注意：Vue3 中的 watch 只能监视一下四种数据：</p>
<p>ref 定义的数据</p>
<p>reactive 定义的数据</p>
<p>函数返回一个值</p>
<p>一个包含上述内容的数组</p>
</blockquote>
<blockquote>
<p>情况一：监视【ref】定义的【基本数据类型】响应式数据</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div class=&quot;person&quot;&gt;</span><br><span class="line">        &lt;h2&gt;当前数据：&#123;&#123;num&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&#x27;changeNum&#x27;&gt;</span><br><span class="line">            数据 +1</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;person&quot;&gt;</span><br><span class="line">    import &#123;ref,watch&#125; from &quot;vue&quot;</span><br><span class="line"></span><br><span class="line">   let num = ref(0)</span><br><span class="line">    const changeNum = ()=&gt;&#123;</span><br><span class="line">       num.value += 1</span><br><span class="line">    &#125;   </span><br><span class="line">    //情况一：监视【ref】定义的【基本数据类型】响应式数据</span><br><span class="line">    const stopWatch = watch(num,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">        console.log(&#x27;数据变了&#x27;，newValue,oldValue)</span><br><span class="line">        // 如果最新数据大于10 停止监视</span><br><span class="line">        if(newValue&gt;10)&#123;</span><br><span class="line">            stopWatch()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .person&#123;</span><br><span class="line">        background-color:skyblue;</span><br><span class="line">        box-shadow:0 0 10px;</span><br><span class="line">        border-radius:10px;</span><br><span class="line">        padding:20px;</span><br><span class="line">    &#125;</span><br><span class="line">    button&#123;</span><br><span class="line">        margin:0 5px;</span><br><span class="line">    &#125;</span><br><span class="line">    li&#123;</span><br><span class="line">        font-size:20px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>情况二：监视【ref】定义的【对象数据类型】响应式数据 直接写【数据名】监视的是对象的【地址值】若想监视对象内部的数据 需要手动开启【深度监视】 immediate表示初始化之后马上执行一次</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div class=&quot;person&quot;&gt;</span><br><span class="line">       &lt;h2&gt;</span><br><span class="line">           姓名：&#123;&#123;person.name&#125;&#125;</span><br><span class="line">        &lt;/h2&gt;</span><br><span class="line">         &lt;h2&gt;</span><br><span class="line">          	年龄：&#123;&#123;person.age&#125;&#125;</span><br><span class="line">        &lt;/h2&gt;</span><br><span class="line">        &lt;button @click=changeName&gt;</span><br><span class="line">            修改姓名</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">        &lt;button @click=changeAge&gt;</span><br><span class="line">            修改年龄</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">        &lt;button @click=changePerson&gt;</span><br><span class="line">            修改全部</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;person&quot;&gt;</span><br><span class="line">    import &#123;ref,watch&#125; from &quot;vue&quot;</span><br><span class="line">    let person =ref(&#123;name=&quot;南屿&quot;,age=17&#125;)</span><br><span class="line">    const changeName = ()=&gt;&#123;</span><br><span class="line">       person.value.name  = &quot;临安与&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    const changeAge = ()=&gt;&#123;</span><br><span class="line">       person.value.age  += 1</span><br><span class="line">    &#125;</span><br><span class="line">     const changePerson = ()=&gt;&#123;</span><br><span class="line">       person.value  =  &#123;name=&quot;君南浔&quot;,age=19&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /*情况二：监视【ref】定义的【对象数据类型】响应式数据 直接写【数据名】监视的是对象的【地址值】若想监视对象内部的数据 需要手动开启【深度监视】 immediate表示初始化之后马上执行一次</span><br><span class="line">    </span><br><span class="line">    注意：</span><br><span class="line">    1.如果修改的是ref对象中的属性 newValue oldValue都是新值 因为是同一个对象</span><br><span class="line">    2.如果修改整个ref定义的对象 newValue是新值 oldValue是旧值 因为不是同一个对象了</span><br><span class="line">    </span><br><span class="line">    watch 第一个参数：被监视的数据</span><br><span class="line">    watch 第二个参数：监视的回调</span><br><span class="line">    watch 第三个参数：配置对象（deep，immediate）</span><br><span class="line">    */</span><br><span class="line">   	watch(person,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">        console.log(&#x27;person数据变了&#x27;，newValue,oldValue)</span><br><span class="line">    &#125;,&#123;deep:true,immediate:true&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .person&#123;</span><br><span class="line">        background-color:skyblue;</span><br><span class="line">        box-shadow:0 0 10px;</span><br><span class="line">        border-radius:10px;</span><br><span class="line">        padding:20px;</span><br><span class="line">    &#125;</span><br><span class="line">    button&#123;</span><br><span class="line">        margin:0 5px;</span><br><span class="line">    &#125;</span><br><span class="line">    li&#123;</span><br><span class="line">        font-size:20px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>情况二：监视【reactive】定义的【对象数据类型】响应式数据 </p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div class=&quot;person&quot;&gt;</span><br><span class="line">       &lt;h2&gt;</span><br><span class="line">           姓名：&#123;&#123;person.name&#125;&#125;</span><br><span class="line">        &lt;/h2&gt;</span><br><span class="line">         &lt;h2&gt;</span><br><span class="line">          	年龄：&#123;&#123;person.age&#125;&#125;</span><br><span class="line">        &lt;/h2&gt;</span><br><span class="line">        &lt;button @click=changeName&gt;</span><br><span class="line">            修改姓名</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">        &lt;button @click=changeAge&gt;</span><br><span class="line">            修改年龄</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">        &lt;button @click=changePerson&gt;</span><br><span class="line">            修改全部</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;person&quot;&gt;</span><br><span class="line">    import &#123;reactive,watch&#125; from &quot;vue&quot;</span><br><span class="line">    let person =reactive(&#123;name=&quot;南屿&quot;,age=17&#125;)</span><br><span class="line">    const changeName = ()=&gt;&#123;</span><br><span class="line">       person.name  = &quot;临安与&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    const changeAge = ()=&gt;&#123;</span><br><span class="line">       person.age  += 1</span><br><span class="line">    &#125;</span><br><span class="line">     const changePerson = ()=&gt;&#123;</span><br><span class="line">       Object.assign(person,&#123;name=&quot;君南浔&quot;,age=19&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /*情况三：监视【ref】定义的【对象数据类型】响应式数据</span><br><span class="line">    </span><br><span class="line">    注意：</span><br><span class="line">    若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！</span><br><span class="line">    若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 </span><br><span class="line">    */</span><br><span class="line">   	watch(person,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">        console.log(&#x27;person数据变了&#x27;，newValue,oldValue)</span><br><span class="line">    &#125;,&#123;deep:true,immediate:true&#125;) //此处的deep配置不再奏效</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .person&#123;</span><br><span class="line">        background-color:skyblue;</span><br><span class="line">        box-shadow:0 0 10px;</span><br><span class="line">        border-radius:10px;</span><br><span class="line">        padding:20px;</span><br><span class="line">    &#125;</span><br><span class="line">    button&#123;</span><br><span class="line">        margin:0 5px;</span><br><span class="line">    &#125;</span><br><span class="line">    li&#123;</span><br><span class="line">        font-size:20px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>情况四：监视reactive定义的响应式数据中的 <code>某个属性 </code></p>
</blockquote>
<ul>
<li>该属性是<code>基本类型</code>的，要写成<code>函数式</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">name</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123; <span class="comment">//注意第一个参数要用箭头函数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>

<ul>
<li>该属性是<code>对象类型</code>的，<code>可以直接写，也可以写成函数式</code>，更推荐写函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;) </span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<p>监视的要是对象里的属性，那么最好写函数式</p>
<p>要是对象监视的是地址值，需要关注对象内部，需要手动开启深度监视</p>
</blockquote>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>vue3</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
</search>
